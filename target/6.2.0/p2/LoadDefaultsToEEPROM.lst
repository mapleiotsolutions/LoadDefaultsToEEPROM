
c:/Users/maple/OneDrive/SkardaLocal/Particle/Photon2_Test/LoadDefaultsToEEPROM/target/6.2.0/p2/LoadDefaultsToEEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fc000  085fc000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fc018  085fc018  0000c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fcff8  085fc0a8  0000cff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00002ff8  023fd000  085fc0b0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007adc0  085ff0a8  0001adc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001c4  1007ae38  1007ae38  0002ae38  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff120  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000e94  085ff124  085ff124  0001f124  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f124  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0017b83c  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001231e  00000000  00000000  0019b83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00066bef  00000000  00000000  001adb5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003028  00000000  00000000  00214749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000106c0  00000000  00000000  00217771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00023fbd  00000000  00000000  00227e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00046e38  00000000  00000000  0024bdee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001628dc  00000000  00000000  00292c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008ec4  00000000  00000000  003f5504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fc018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc018:	4813      	ldr	r0, [pc, #76]	; (85fc068 <module_user_pre_init+0x50>)
 85fc01a:	4914      	ldr	r1, [pc, #80]	; (85fc06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fc01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc01e:	4288      	cmp	r0, r1
 85fc020:	d005      	beq.n	85fc02e <module_user_pre_init+0x16>
 85fc022:	4a13      	ldr	r2, [pc, #76]	; (85fc070 <module_user_pre_init+0x58>)
 85fc024:	4282      	cmp	r2, r0
 85fc026:	d002      	beq.n	85fc02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fc028:	4b12      	ldr	r3, [pc, #72]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc02a:	1a12      	subs	r2, r2, r0
 85fc02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fc02e:	4812      	ldr	r0, [pc, #72]	; (85fc078 <module_user_pre_init+0x60>)
 85fc030:	4a12      	ldr	r2, [pc, #72]	; (85fc07c <module_user_pre_init+0x64>)
 85fc032:	2100      	movs	r1, #0
 85fc034:	4b12      	ldr	r3, [pc, #72]	; (85fc080 <module_user_pre_init+0x68>)
 85fc036:	1a12      	subs	r2, r2, r0
 85fc038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fc03a:	4812      	ldr	r0, [pc, #72]	; (85fc084 <module_user_pre_init+0x6c>)
 85fc03c:	4912      	ldr	r1, [pc, #72]	; (85fc088 <module_user_pre_init+0x70>)
 85fc03e:	4288      	cmp	r0, r1
 85fc040:	d005      	beq.n	85fc04e <module_user_pre_init+0x36>
 85fc042:	4a12      	ldr	r2, [pc, #72]	; (85fc08c <module_user_pre_init+0x74>)
 85fc044:	4282      	cmp	r2, r0
 85fc046:	d002      	beq.n	85fc04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fc048:	4b0a      	ldr	r3, [pc, #40]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc04a:	1a12      	subs	r2, r2, r0
 85fc04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fc04e:	4810      	ldr	r0, [pc, #64]	; (85fc090 <module_user_pre_init+0x78>)
 85fc050:	4910      	ldr	r1, [pc, #64]	; (85fc094 <module_user_pre_init+0x7c>)
 85fc052:	4288      	cmp	r0, r1
 85fc054:	d005      	beq.n	85fc062 <module_user_pre_init+0x4a>
 85fc056:	4a10      	ldr	r2, [pc, #64]	; (85fc098 <module_user_pre_init+0x80>)
 85fc058:	4282      	cmp	r2, r0
 85fc05a:	d002      	beq.n	85fc062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fc05c:	4b05      	ldr	r3, [pc, #20]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc05e:	1a12      	subs	r2, r2, r0
 85fc060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fc062:	4801      	ldr	r0, [pc, #4]	; (85fc068 <module_user_pre_init+0x50>)
 85fc064:	bd08      	pop	{r3, pc}
 85fc066:	bf00      	nop
 85fc068:	1007adc0 	.word	0x1007adc0
 85fc06c:	085ff0a8 	.word	0x085ff0a8
 85fc070:	1007ae38 	.word	0x1007ae38
 85fc074:	10110d2d 	.word	0x10110d2d
 85fc078:	1007ae38 	.word	0x1007ae38
 85fc07c:	1007affc 	.word	0x1007affc
 85fc080:	10110ea1 	.word	0x10110ea1
 85fc084:	023fcff8 	.word	0x023fcff8
 85fc088:	085fc0a8 	.word	0x085fc0a8
 85fc08c:	023fd000 	.word	0x023fd000
 85fc090:	023fd000 	.word	0x023fd000
 85fc094:	085fc0b0 	.word	0x085fc0b0
 85fc098:	023ffff8 	.word	0x023ffff8

085fc09c <dynalib_preinit>:
 85fc09c:	085fc019 00000000                       .._.....

Disassembly of section .psram_text:

023fd000 <strcmp>:
 23fd000:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fd004:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fd008:	2a01      	cmp	r2, #1
 23fd00a:	bf28      	it	cs
 23fd00c:	429a      	cmpcs	r2, r3
 23fd00e:	d0f7      	beq.n	23fd000 <strcmp>
 23fd010:	1ad0      	subs	r0, r2, r3
 23fd012:	4770      	bx	lr

023fd014 <strlen>:
 23fd014:	4603      	mov	r3, r0
 23fd016:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fd01a:	2a00      	cmp	r2, #0
 23fd01c:	d1fb      	bne.n	23fd016 <strlen+0x2>
 23fd01e:	1a18      	subs	r0, r3, r0
 23fd020:	3801      	subs	r0, #1
 23fd022:	4770      	bx	lr

023fd024 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fd024:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fd026:	f001 fea3 	bl	23fed70 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fd02a:	2500      	movs	r5, #0
 23fd02c:	4e05      	ldr	r6, [pc, #20]	; (23fd044 <module_user_init+0x20>)
 23fd02e:	4c06      	ldr	r4, [pc, #24]	; (23fd048 <module_user_init+0x24>)
 23fd030:	1ba4      	subs	r4, r4, r6
 23fd032:	08a4      	lsrs	r4, r4, #2
 23fd034:	42ac      	cmp	r4, r5
 23fd036:	d100      	bne.n	23fd03a <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fd038:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fd03a:	f856 3b04 	ldr.w	r3, [r6], #4
 23fd03e:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fd040:	3501      	adds	r5, #1
 23fd042:	e7f7      	b.n	23fd034 <module_user_init+0x10>
 23fd044:	023fffd0 	.word	0x023fffd0
 23fd048:	023ffff8 	.word	0x023ffff8

023fd04c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fd04c:	f000 b848 	b.w	23fd0e0 <setup>

023fd050 <module_user_loop>:
}

void module_user_loop() {
 23fd050:	b508      	push	{r3, lr}
    loop();
 23fd052:	f000 f8ab 	bl	23fd1ac <loop>
    _post_loop();
}
 23fd056:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fd05a:	f001 be41 	b.w	23fece0 <_post_loop>

023fd05e <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fd05e:	f000 bc49 	b.w	23fd8f4 <malloc>

023fd062 <_Znaj>:
 23fd062:	f000 bc47 	b.w	23fd8f4 <malloc>

023fd066 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fd066:	f000 bc53 	b.w	23fd910 <free>
	...

023fd06c <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fd06c:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fd06e:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fd070:	4a02      	ldr	r2, [pc, #8]	; (23fd07c <__cxa_pure_virtual+0x10>)
 23fd072:	4903      	ldr	r1, [pc, #12]	; (23fd080 <__cxa_pure_virtual+0x14>)
 23fd074:	f000 fb0a 	bl	23fd68c <panic_>
  while (1);
 23fd078:	e7fe      	b.n	23fd078 <__cxa_pure_virtual+0xc>
 23fd07a:	bf00      	nop
 23fd07c:	023fd399 	.word	0x023fd399
 23fd080:	023ffb84 	.word	0x023ffb84

023fd084 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fd084:	7800      	ldrb	r0, [r0, #0]
 23fd086:	fab0 f080 	clz	r0, r0
 23fd08a:	0940      	lsrs	r0, r0, #5
 23fd08c:	4770      	bx	lr

023fd08e <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fd08e:	2301      	movs	r3, #1
 23fd090:	7003      	strb	r3, [r0, #0]
 23fd092:	4770      	bx	lr

023fd094 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fd094:	4770      	bx	lr
	...

023fd098 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fd098:	b510      	push	{r4, lr}
 23fd09a:	4604      	mov	r4, r0
 23fd09c:	4b09      	ldr	r3, [pc, #36]	; (23fd0c4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fd09e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fd0a0:	f000 ff9a 	bl	23fdfd8 <_ZN5spark10LogManager8instanceEv>
 23fd0a4:	4621      	mov	r1, r4
 23fd0a6:	f001 f9e3 	bl	23fe470 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fd0aa:	f001 ff6d 	bl	23fef88 <_Z16_fetch_usbserialv>
 23fd0ae:	f001 ff5f 	bl	23fef70 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fd0b2:	4620      	mov	r0, r4
 23fd0b4:	4b04      	ldr	r3, [pc, #16]	; (23fd0c8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fd0b6:	f840 3b04 	str.w	r3, [r0], #4
 23fd0ba:	f001 f863 	bl	23fe184 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fd0be:	4620      	mov	r0, r4
 23fd0c0:	bd10      	pop	{r4, pc}
 23fd0c2:	bf00      	nop
 23fd0c4:	023ffbbc 	.word	0x023ffbbc
 23fd0c8:	023ffba4 	.word	0x023ffba4

023fd0cc <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fd0cc:	b510      	push	{r4, lr}
 23fd0ce:	4604      	mov	r4, r0
    }
 23fd0d0:	f7ff ffe2 	bl	23fd098 <_ZN5spark16SerialLogHandlerD1Ev>
 23fd0d4:	4620      	mov	r0, r4
 23fd0d6:	2124      	movs	r1, #36	; 0x24
 23fd0d8:	f7ff ffc5 	bl	23fd066 <_ZdlPvj>
 23fd0dc:	4620      	mov	r0, r4
 23fd0de:	bd10      	pop	{r4, pc}

023fd0e0 <setup>:
// Show system, cloud connectivity, and application logs over USB
// View logs with CLI using 'particle serial monitor --follow'
SerialLogHandler logHandler(LOG_LEVEL_INFO);

// setup() runs once, when the device is first turned on
void setup() {
 23fd0e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Put initialization like pinMode and begin functions here
  EEPROM.put(8, 1);   //Mode (0 = Demo, 1 = LED Sight Glass)
 23fd0e2:	f002 fb85 	bl	23ff7f0 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23fd0e6:	2204      	movs	r2, #4
 23fd0e8:	2301      	movs	r3, #1
 23fd0ea:	eb0d 0102 	add.w	r1, sp, r2
 23fd0ee:	2008      	movs	r0, #8
 23fd0f0:	9301      	str	r3, [sp, #4]
 23fd0f2:	f000 f97b 	bl	23fd3ec <HAL_EEPROM_Put>
  EEPROM.put(10, 0);  //LevelSns_Type (0 = Submersible, 1 = Ultrasonic)
 23fd0f6:	f002 fb7b 	bl	23ff7f0 <_Z21__fetch_global_EEPROMv>
 23fd0fa:	2204      	movs	r2, #4
 23fd0fc:	2500      	movs	r5, #0
 23fd0fe:	eb0d 0102 	add.w	r1, sp, r2
 23fd102:	200a      	movs	r0, #10
 23fd104:	9501      	str	r5, [sp, #4]
 23fd106:	f000 f971 	bl	23fd3ec <HAL_EEPROM_Put>
  EEPROM.put(12, 38); //LevelSns_TankHeight (Default to 1:1 mapping from LED to Tank Height)
 23fd10a:	f002 fb71 	bl	23ff7f0 <_Z21__fetch_global_EEPROMv>
 23fd10e:	2204      	movs	r2, #4
 23fd110:	2426      	movs	r4, #38	; 0x26
 23fd112:	eb0d 0102 	add.w	r1, sp, r2
 23fd116:	200c      	movs	r0, #12
 23fd118:	9401      	str	r4, [sp, #4]
 23fd11a:	f000 f967 	bl	23fd3ec <HAL_EEPROM_Put>
  EEPROM.put(14, 0);  //LevelSns_SnsOffset 
 23fd11e:	f002 fb67 	bl	23ff7f0 <_Z21__fetch_global_EEPROMv>
 23fd122:	2204      	movs	r2, #4
 23fd124:	200e      	movs	r0, #14
 23fd126:	eb0d 0102 	add.w	r1, sp, r2
 23fd12a:	9501      	str	r5, [sp, #4]
 23fd12c:	f000 f95e 	bl	23fd3ec <HAL_EEPROM_Put>
  EEPROM.put(20, 38); //LED_Length
 23fd130:	f002 fb5e 	bl	23ff7f0 <_Z21__fetch_global_EEPROMv>
 23fd134:	2204      	movs	r2, #4
 23fd136:	2014      	movs	r0, #20
 23fd138:	eb0d 0102 	add.w	r1, sp, r2
 23fd13c:	9401      	str	r4, [sp, #4]
 23fd13e:	f000 f955 	bl	23fd3ec <HAL_EEPROM_Put>
  EEPROM.put(22, 60); //LED_Cnt
 23fd142:	f002 fb55 	bl	23ff7f0 <_Z21__fetch_global_EEPROMv>
 23fd146:	2204      	movs	r2, #4
 23fd148:	233c      	movs	r3, #60	; 0x3c
 23fd14a:	eb0d 0102 	add.w	r1, sp, r2
 23fd14e:	2016      	movs	r0, #22
 23fd150:	9301      	str	r3, [sp, #4]
 23fd152:	f000 f94b 	bl	23fd3ec <HAL_EEPROM_Put>
  EEPROM.put(24, 25); //LED_AlrtLowPerc
 23fd156:	f002 fb4b 	bl	23ff7f0 <_Z21__fetch_global_EEPROMv>
 23fd15a:	2204      	movs	r2, #4
 23fd15c:	2319      	movs	r3, #25
 23fd15e:	eb0d 0102 	add.w	r1, sp, r2
 23fd162:	2018      	movs	r0, #24
 23fd164:	9301      	str	r3, [sp, #4]
 23fd166:	f000 f941 	bl	23fd3ec <HAL_EEPROM_Put>
  EEPROM.put(26, 75); //LED_AlrtHighPerc
 23fd16a:	f002 fb41 	bl	23ff7f0 <_Z21__fetch_global_EEPROMv>
 23fd16e:	2204      	movs	r2, #4
 23fd170:	234b      	movs	r3, #75	; 0x4b
 23fd172:	eb0d 0102 	add.w	r1, sp, r2
 23fd176:	201a      	movs	r0, #26
 23fd178:	9301      	str	r3, [sp, #4]
 23fd17a:	f000 f937 	bl	23fd3ec <HAL_EEPROM_Put>
  EEPROM.put(28, 520); //convMulti
 23fd17e:	f002 fb37 	bl	23ff7f0 <_Z21__fetch_global_EEPROMv>
 23fd182:	2204      	movs	r2, #4
 23fd184:	f44f 7302 	mov.w	r3, #520	; 0x208
 23fd188:	eb0d 0102 	add.w	r1, sp, r2
 23fd18c:	201c      	movs	r0, #28
 23fd18e:	9301      	str	r3, [sp, #4]
 23fd190:	f000 f92c 	bl	23fd3ec <HAL_EEPROM_Put>
  EEPROM.put(30, 50); //LED Brightness
 23fd194:	f002 fb2c 	bl	23ff7f0 <_Z21__fetch_global_EEPROMv>
 23fd198:	2204      	movs	r2, #4
 23fd19a:	2332      	movs	r3, #50	; 0x32
 23fd19c:	201e      	movs	r0, #30
 23fd19e:	eb0d 0102 	add.w	r1, sp, r2
 23fd1a2:	9301      	str	r3, [sp, #4]
 23fd1a4:	f000 f922 	bl	23fd3ec <HAL_EEPROM_Put>
}
 23fd1a8:	b003      	add	sp, #12
 23fd1aa:	bd30      	pop	{r4, r5, pc}

023fd1ac <loop>:

  // Example: Publish event to cloud every 10 seconds. Uncomment the next 3 lines to try it!
  // Log.info("Sending Hello World to the cloud!");
  // Particle.publish("Hello world!");
  // delay( 10 * 1000 ); // milliseconds and blocking - see docs for more info!
}
 23fd1ac:	4770      	bx	lr

023fd1ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd1ae:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fd1b0:	2614      	movs	r6, #20
 23fd1b2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd1b6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd1b8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd1bc:	42ae      	cmp	r6, r5
 23fd1be:	d004      	beq.n	23fd1ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fd1c0:	4628      	mov	r0, r5
 23fd1c2:	f000 fc69 	bl	23fda98 <_ZN6StringD1Ev>
 23fd1c6:	3514      	adds	r5, #20
 23fd1c8:	e7f8      	b.n	23fd1bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fd1ca:	6820      	ldr	r0, [r4, #0]
 23fd1cc:	f000 fba0 	bl	23fd910 <free>
    AllocatorT::free(data_);
}
 23fd1d0:	4620      	mov	r0, r4
 23fd1d2:	bd70      	pop	{r4, r5, r6, pc}

023fd1d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fd1d4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd1d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd1d8:	4604      	mov	r4, r0
 23fd1da:	460d      	mov	r5, r1
 23fd1dc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd1de:	d916      	bls.n	23fd20e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fd1e0:	4290      	cmp	r0, r2
 23fd1e2:	d215      	bcs.n	23fd210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fd1e4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fd1e8:	1a75      	subs	r5, r6, r1
 23fd1ea:	f1a1 0714 	sub.w	r7, r1, #20
 23fd1ee:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd1f0:	42b7      	cmp	r7, r6
 23fd1f2:	d01c      	beq.n	23fd22e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fd1f4:	b12c      	cbz	r4, 23fd202 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fd1f6:	4631      	mov	r1, r6
 23fd1f8:	4620      	mov	r0, r4
 23fd1fa:	f000 fcb6 	bl	23fdb6a <_ZN6StringC1EOS_>
 23fd1fe:	7c33      	ldrb	r3, [r6, #16]
 23fd200:	7423      	strb	r3, [r4, #16]
 23fd202:	4630      	mov	r0, r6
 23fd204:	f000 fc48 	bl	23fda98 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fd208:	3e14      	subs	r6, #20
 23fd20a:	3c14      	subs	r4, #20
 23fd20c:	e7f0      	b.n	23fd1f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fd20e:	d00e      	beq.n	23fd22e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fd210:	42b5      	cmp	r5, r6
 23fd212:	d00c      	beq.n	23fd22e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fd214:	b12c      	cbz	r4, 23fd222 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fd216:	4629      	mov	r1, r5
 23fd218:	4620      	mov	r0, r4
 23fd21a:	f000 fca6 	bl	23fdb6a <_ZN6StringC1EOS_>
 23fd21e:	7c2b      	ldrb	r3, [r5, #16]
 23fd220:	7423      	strb	r3, [r4, #16]
 23fd222:	4628      	mov	r0, r5
 23fd224:	f000 fc38 	bl	23fda98 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fd228:	3514      	adds	r5, #20
 23fd22a:	3414      	adds	r4, #20
 23fd22c:	e7f0      	b.n	23fd210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fd22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fd230:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fd236:	e9c0 3300 	strd	r3, r3, [r0]
 23fd23a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd23c:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd23e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd240:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd242:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd244:	dd24      	ble.n	23fd290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fd246:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fd24a:	fb08 f007 	mul.w	r0, r8, r7
 23fd24e:	f000 fb51 	bl	23fd8f4 <malloc>
            if (!d) {
 23fd252:	4605      	mov	r5, r0
 23fd254:	b1e0      	cbz	r0, 23fd290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fd256:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fd25a:	fb08 1202 	mla	r2, r8, r2, r1
 23fd25e:	f7ff ffb9 	bl	23fd1d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fd262:	6820      	ldr	r0, [r4, #0]
 23fd264:	f000 fb54 	bl	23fd910 <free>
        data_ = d;
 23fd268:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fd26a:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fd26c:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fd270:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fd274:	45b8      	cmp	r8, r7
 23fd276:	d009      	beq.n	23fd28c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fd278:	4639      	mov	r1, r7
 23fd27a:	4628      	mov	r0, r5
 23fd27c:	f000 fc8f 	bl	23fdb9e <_ZN6StringC1ERKS_>
 23fd280:	7c3b      	ldrb	r3, [r7, #16]
 23fd282:	3514      	adds	r5, #20
 23fd284:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fd288:	3714      	adds	r7, #20
 23fd28a:	e7f3      	b.n	23fd274 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fd28c:	6873      	ldr	r3, [r6, #4]
 23fd28e:	6063      	str	r3, [r4, #4]
}
 23fd290:	4620      	mov	r0, r4
 23fd292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023fd298 <_GLOBAL__sub_I_SystemMode>:
 23fd298:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fd29a:	2400      	movs	r4, #0
 23fd29c:	4b23      	ldr	r3, [pc, #140]	; (23fd32c <_GLOBAL__sub_I_SystemMode+0x94>)
    SleepResult() {}
 23fd29e:	4a24      	ldr	r2, [pc, #144]	; (23fd330 <_GLOBAL__sub_I_SystemMode+0x98>)
 23fd2a0:	b08c      	sub	sp, #48	; 0x30
 23fd2a2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
 23fd2a4:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fd2a8:	2003      	movs	r0, #3
 23fd2aa:	f000 fa19 	bl	23fd6e0 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23fd2ae:	4621      	mov	r1, r4
 23fd2b0:	2001      	movs	r0, #1
 23fd2b2:	f000 fa23 	bl	23fd6fc <system_thread_set_state>
        capacity_(0) {
 23fd2b6:	e9cd 4400 	strd	r4, r4, [sp]
 23fd2ba:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fd2bc:	f001 fe64 	bl	23fef88 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fd2c0:	4c1c      	ldr	r4, [pc, #112]	; (23fd334 <_GLOBAL__sub_I_SystemMode+0x9c>)
 23fd2c2:	4605      	mov	r5, r0
 23fd2c4:	4626      	mov	r6, r4
 23fd2c6:	4669      	mov	r1, sp
 23fd2c8:	a803      	add	r0, sp, #12
 23fd2ca:	f7ff ffb1 	bl	23fd230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23fd2ce:	a903      	add	r1, sp, #12
 23fd2d0:	a806      	add	r0, sp, #24
 23fd2d2:	f7ff ffad 	bl	23fd230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fd2d6:	4b18      	ldr	r3, [pc, #96]	; (23fd338 <_GLOBAL__sub_I_SystemMode+0xa0>)
 23fd2d8:	a906      	add	r1, sp, #24
 23fd2da:	f846 3b04 	str.w	r3, [r6], #4
 23fd2de:	a809      	add	r0, sp, #36	; 0x24
 23fd2e0:	f7ff ffa6 	bl	23fd230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fd2e4:	aa09      	add	r2, sp, #36	; 0x24
 23fd2e6:	211e      	movs	r1, #30
 23fd2e8:	4630      	mov	r0, r6
 23fd2ea:	f001 f9a3 	bl	23fe634 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd2ee:	a809      	add	r0, sp, #36	; 0x24
 23fd2f0:	f7ff ff5d 	bl	23fd1ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fd2f4:	a806      	add	r0, sp, #24
 23fd2f6:	f7ff ff5a 	bl	23fd1ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fd2fa:	4b10      	ldr	r3, [pc, #64]	; (23fd33c <_GLOBAL__sub_I_SystemMode+0xa4>)
 23fd2fc:	6225      	str	r5, [r4, #32]
 23fd2fe:	6023      	str	r3, [r4, #0]
 23fd300:	a803      	add	r0, sp, #12
 23fd302:	f7ff ff54 	bl	23fd1ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fd306:	4b0e      	ldr	r3, [pc, #56]	; (23fd340 <_GLOBAL__sub_I_SystemMode+0xa8>)
 23fd308:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fd30a:	f001 fe3d 	bl	23fef88 <_Z16_fetch_usbserialv>
 23fd30e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fd312:	f001 fe29 	bl	23fef68 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fd316:	f000 fe5f 	bl	23fdfd8 <_ZN5spark10LogManager8instanceEv>
 23fd31a:	4621      	mov	r1, r4
 23fd31c:	f001 f862 	bl	23fe3e4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 23fd320:	4668      	mov	r0, sp
 23fd322:	f7ff ff44 	bl	23fd1ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fd326:	b00c      	add	sp, #48	; 0x30
 23fd328:	bd70      	pop	{r4, r5, r6, pc}
 23fd32a:	bf00      	nop
 23fd32c:	1007ae38 	.word	0x1007ae38
 23fd330:	ffff0000 	.word	0xffff0000
 23fd334:	1007ae44 	.word	0x1007ae44
 23fd338:	023ffba4 	.word	0x023ffba4
 23fd33c:	023ffca8 	.word	0x023ffca8
 23fd340:	023ffbbc 	.word	0x023ffbbc

023fd344 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fd344:	b509      	push	{r0, r3, lr}
 23fd346:	4804      	ldr	r0, [pc, #16]	; (23fd358 <netdb_freeaddrinfo+0x14>)
 23fd348:	6800      	ldr	r0, [r0, #0]
 23fd34a:	4b04      	ldr	r3, [pc, #16]	; (23fd35c <netdb_freeaddrinfo+0x18>)
 23fd34c:	4403      	add	r3, r0
 23fd34e:	681b      	ldr	r3, [r3, #0]
 23fd350:	689b      	ldr	r3, [r3, #8]
 23fd352:	9302      	str	r3, [sp, #8]
 23fd354:	bd09      	pop	{r0, r3, pc}
 23fd356:	0000      	.short	0x0000
 23fd358:	1007adc0 	.word	0x1007adc0
 23fd35c:	00000050 	.word	0x00000050

023fd360 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fd360:	b509      	push	{r0, r3, lr}
 23fd362:	4804      	ldr	r0, [pc, #16]	; (23fd374 <netdb_getaddrinfo+0x14>)
 23fd364:	6800      	ldr	r0, [r0, #0]
 23fd366:	4b04      	ldr	r3, [pc, #16]	; (23fd378 <netdb_getaddrinfo+0x18>)
 23fd368:	4403      	add	r3, r0
 23fd36a:	681b      	ldr	r3, [r3, #0]
 23fd36c:	68db      	ldr	r3, [r3, #12]
 23fd36e:	9302      	str	r3, [sp, #8]
 23fd370:	bd09      	pop	{r0, r3, pc}
 23fd372:	0000      	.short	0x0000
 23fd374:	1007adc0 	.word	0x1007adc0
 23fd378:	00000050 	.word	0x00000050

023fd37c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fd37c:	b509      	push	{r0, r3, lr}
 23fd37e:	4804      	ldr	r0, [pc, #16]	; (23fd390 <HAL_RNG_GetRandomNumber+0x14>)
 23fd380:	6800      	ldr	r0, [r0, #0]
 23fd382:	4b04      	ldr	r3, [pc, #16]	; (23fd394 <HAL_RNG_GetRandomNumber+0x18>)
 23fd384:	4403      	add	r3, r0
 23fd386:	681b      	ldr	r3, [r3, #0]
 23fd388:	685b      	ldr	r3, [r3, #4]
 23fd38a:	9302      	str	r3, [sp, #8]
 23fd38c:	bd09      	pop	{r0, r3, pc}
 23fd38e:	0000      	.short	0x0000
 23fd390:	1007adc0 	.word	0x1007adc0
 23fd394:	00000000 	.word	0x00000000

023fd398 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fd398:	b509      	push	{r0, r3, lr}
 23fd39a:	4804      	ldr	r0, [pc, #16]	; (23fd3ac <HAL_Delay_Microseconds+0x14>)
 23fd39c:	6800      	ldr	r0, [r0, #0]
 23fd39e:	4b04      	ldr	r3, [pc, #16]	; (23fd3b0 <HAL_Delay_Microseconds+0x18>)
 23fd3a0:	4403      	add	r3, r0
 23fd3a2:	681b      	ldr	r3, [r3, #0]
 23fd3a4:	68db      	ldr	r3, [r3, #12]
 23fd3a6:	9302      	str	r3, [sp, #8]
 23fd3a8:	bd09      	pop	{r0, r3, pc}
 23fd3aa:	0000      	.short	0x0000
 23fd3ac:	1007adc0 	.word	0x1007adc0
 23fd3b0:	00000000 	.word	0x00000000

023fd3b4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fd3b4:	b509      	push	{r0, r3, lr}
 23fd3b6:	4804      	ldr	r0, [pc, #16]	; (23fd3c8 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fd3b8:	6800      	ldr	r0, [r0, #0]
 23fd3ba:	4b04      	ldr	r3, [pc, #16]	; (23fd3cc <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fd3bc:	4403      	add	r3, r0
 23fd3be:	681b      	ldr	r3, [r3, #0]
 23fd3c0:	695b      	ldr	r3, [r3, #20]
 23fd3c2:	9302      	str	r3, [sp, #8]
 23fd3c4:	bd09      	pop	{r0, r3, pc}
 23fd3c6:	0000      	.short	0x0000
 23fd3c8:	1007adc0 	.word	0x1007adc0
 23fd3cc:	00000000 	.word	0x00000000

023fd3d0 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 23fd3d0:	b509      	push	{r0, r3, lr}
 23fd3d2:	4804      	ldr	r0, [pc, #16]	; (23fd3e4 <HAL_EEPROM_Init+0x14>)
 23fd3d4:	6800      	ldr	r0, [r0, #0]
 23fd3d6:	4b04      	ldr	r3, [pc, #16]	; (23fd3e8 <HAL_EEPROM_Init+0x18>)
 23fd3d8:	4403      	add	r3, r0
 23fd3da:	681b      	ldr	r3, [r3, #0]
 23fd3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd3de:	9302      	str	r3, [sp, #8]
 23fd3e0:	bd09      	pop	{r0, r3, pc}
 23fd3e2:	0000      	.short	0x0000
 23fd3e4:	1007adc0 	.word	0x1007adc0
 23fd3e8:	00000000 	.word	0x00000000

023fd3ec <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 23fd3ec:	b509      	push	{r0, r3, lr}
 23fd3ee:	4804      	ldr	r0, [pc, #16]	; (23fd400 <HAL_EEPROM_Put+0x14>)
 23fd3f0:	6800      	ldr	r0, [r0, #0]
 23fd3f2:	4b04      	ldr	r3, [pc, #16]	; (23fd404 <HAL_EEPROM_Put+0x18>)
 23fd3f4:	4403      	add	r3, r0
 23fd3f6:	681b      	ldr	r3, [r3, #0]
 23fd3f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fd3fa:	9302      	str	r3, [sp, #8]
 23fd3fc:	bd09      	pop	{r0, r3, pc}
 23fd3fe:	0000      	.short	0x0000
 23fd400:	1007adc0 	.word	0x1007adc0
 23fd404:	00000000 	.word	0x00000000

023fd408 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fd408:	b509      	push	{r0, r3, lr}
 23fd40a:	4804      	ldr	r0, [pc, #16]	; (23fd41c <os_mutex_recursive_create+0x14>)
 23fd40c:	6800      	ldr	r0, [r0, #0]
 23fd40e:	4b04      	ldr	r3, [pc, #16]	; (23fd420 <os_mutex_recursive_create+0x18>)
 23fd410:	4403      	add	r3, r0
 23fd412:	681b      	ldr	r3, [r3, #0]
 23fd414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd416:	9302      	str	r3, [sp, #8]
 23fd418:	bd09      	pop	{r0, r3, pc}
 23fd41a:	0000      	.short	0x0000
 23fd41c:	1007adc0 	.word	0x1007adc0
 23fd420:	00000030 	.word	0x00000030

023fd424 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fd424:	b509      	push	{r0, r3, lr}
 23fd426:	4804      	ldr	r0, [pc, #16]	; (23fd438 <os_mutex_recursive_destroy+0x14>)
 23fd428:	6800      	ldr	r0, [r0, #0]
 23fd42a:	4b04      	ldr	r3, [pc, #16]	; (23fd43c <os_mutex_recursive_destroy+0x18>)
 23fd42c:	4403      	add	r3, r0
 23fd42e:	681b      	ldr	r3, [r3, #0]
 23fd430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fd432:	9302      	str	r3, [sp, #8]
 23fd434:	bd09      	pop	{r0, r3, pc}
 23fd436:	0000      	.short	0x0000
 23fd438:	1007adc0 	.word	0x1007adc0
 23fd43c:	00000030 	.word	0x00000030

023fd440 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fd440:	b509      	push	{r0, r3, lr}
 23fd442:	4804      	ldr	r0, [pc, #16]	; (23fd454 <os_mutex_recursive_lock+0x14>)
 23fd444:	6800      	ldr	r0, [r0, #0]
 23fd446:	4b04      	ldr	r3, [pc, #16]	; (23fd458 <os_mutex_recursive_lock+0x18>)
 23fd448:	4403      	add	r3, r0
 23fd44a:	681b      	ldr	r3, [r3, #0]
 23fd44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fd44e:	9302      	str	r3, [sp, #8]
 23fd450:	bd09      	pop	{r0, r3, pc}
 23fd452:	0000      	.short	0x0000
 23fd454:	1007adc0 	.word	0x1007adc0
 23fd458:	00000030 	.word	0x00000030

023fd45c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fd45c:	b509      	push	{r0, r3, lr}
 23fd45e:	4804      	ldr	r0, [pc, #16]	; (23fd470 <os_mutex_recursive_unlock+0x14>)
 23fd460:	6800      	ldr	r0, [r0, #0]
 23fd462:	4b04      	ldr	r3, [pc, #16]	; (23fd474 <os_mutex_recursive_unlock+0x18>)
 23fd464:	4403      	add	r3, r0
 23fd466:	681b      	ldr	r3, [r3, #0]
 23fd468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fd46a:	9302      	str	r3, [sp, #8]
 23fd46c:	bd09      	pop	{r0, r3, pc}
 23fd46e:	0000      	.short	0x0000
 23fd470:	1007adc0 	.word	0x1007adc0
 23fd474:	00000030 	.word	0x00000030

023fd478 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fd478:	b509      	push	{r0, r3, lr}
 23fd47a:	4804      	ldr	r0, [pc, #16]	; (23fd48c <inet_inet_ntop+0x14>)
 23fd47c:	6800      	ldr	r0, [r0, #0]
 23fd47e:	4b04      	ldr	r3, [pc, #16]	; (23fd490 <inet_inet_ntop+0x18>)
 23fd480:	4403      	add	r3, r0
 23fd482:	681b      	ldr	r3, [r3, #0]
 23fd484:	695b      	ldr	r3, [r3, #20]
 23fd486:	9302      	str	r3, [sp, #8]
 23fd488:	bd09      	pop	{r0, r3, pc}
 23fd48a:	0000      	.short	0x0000
 23fd48c:	1007adc0 	.word	0x1007adc0
 23fd490:	0000004c 	.word	0x0000004c

023fd494 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fd494:	b509      	push	{r0, r3, lr}
 23fd496:	4804      	ldr	r0, [pc, #16]	; (23fd4a8 <hal_usart_end+0x14>)
 23fd498:	6800      	ldr	r0, [r0, #0]
 23fd49a:	4b04      	ldr	r3, [pc, #16]	; (23fd4ac <hal_usart_end+0x18>)
 23fd49c:	4403      	add	r3, r0
 23fd49e:	681b      	ldr	r3, [r3, #0]
 23fd4a0:	689b      	ldr	r3, [r3, #8]
 23fd4a2:	9302      	str	r3, [sp, #8]
 23fd4a4:	bd09      	pop	{r0, r3, pc}
 23fd4a6:	0000      	.short	0x0000
 23fd4a8:	1007adc0 	.word	0x1007adc0
 23fd4ac:	00000024 	.word	0x00000024

023fd4b0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fd4b0:	b509      	push	{r0, r3, lr}
 23fd4b2:	4804      	ldr	r0, [pc, #16]	; (23fd4c4 <hal_usart_write+0x14>)
 23fd4b4:	6800      	ldr	r0, [r0, #0]
 23fd4b6:	4b04      	ldr	r3, [pc, #16]	; (23fd4c8 <hal_usart_write+0x18>)
 23fd4b8:	4403      	add	r3, r0
 23fd4ba:	681b      	ldr	r3, [r3, #0]
 23fd4bc:	68db      	ldr	r3, [r3, #12]
 23fd4be:	9302      	str	r3, [sp, #8]
 23fd4c0:	bd09      	pop	{r0, r3, pc}
 23fd4c2:	0000      	.short	0x0000
 23fd4c4:	1007adc0 	.word	0x1007adc0
 23fd4c8:	00000024 	.word	0x00000024

023fd4cc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fd4cc:	b509      	push	{r0, r3, lr}
 23fd4ce:	4804      	ldr	r0, [pc, #16]	; (23fd4e0 <hal_usart_available+0x14>)
 23fd4d0:	6800      	ldr	r0, [r0, #0]
 23fd4d2:	4b04      	ldr	r3, [pc, #16]	; (23fd4e4 <hal_usart_available+0x18>)
 23fd4d4:	4403      	add	r3, r0
 23fd4d6:	681b      	ldr	r3, [r3, #0]
 23fd4d8:	691b      	ldr	r3, [r3, #16]
 23fd4da:	9302      	str	r3, [sp, #8]
 23fd4dc:	bd09      	pop	{r0, r3, pc}
 23fd4de:	0000      	.short	0x0000
 23fd4e0:	1007adc0 	.word	0x1007adc0
 23fd4e4:	00000024 	.word	0x00000024

023fd4e8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fd4e8:	b509      	push	{r0, r3, lr}
 23fd4ea:	4804      	ldr	r0, [pc, #16]	; (23fd4fc <hal_usart_read+0x14>)
 23fd4ec:	6800      	ldr	r0, [r0, #0]
 23fd4ee:	4b04      	ldr	r3, [pc, #16]	; (23fd500 <hal_usart_read+0x18>)
 23fd4f0:	4403      	add	r3, r0
 23fd4f2:	681b      	ldr	r3, [r3, #0]
 23fd4f4:	695b      	ldr	r3, [r3, #20]
 23fd4f6:	9302      	str	r3, [sp, #8]
 23fd4f8:	bd09      	pop	{r0, r3, pc}
 23fd4fa:	0000      	.short	0x0000
 23fd4fc:	1007adc0 	.word	0x1007adc0
 23fd500:	00000024 	.word	0x00000024

023fd504 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fd504:	b509      	push	{r0, r3, lr}
 23fd506:	4804      	ldr	r0, [pc, #16]	; (23fd518 <hal_usart_peek+0x14>)
 23fd508:	6800      	ldr	r0, [r0, #0]
 23fd50a:	4b04      	ldr	r3, [pc, #16]	; (23fd51c <hal_usart_peek+0x18>)
 23fd50c:	4403      	add	r3, r0
 23fd50e:	681b      	ldr	r3, [r3, #0]
 23fd510:	699b      	ldr	r3, [r3, #24]
 23fd512:	9302      	str	r3, [sp, #8]
 23fd514:	bd09      	pop	{r0, r3, pc}
 23fd516:	0000      	.short	0x0000
 23fd518:	1007adc0 	.word	0x1007adc0
 23fd51c:	00000024 	.word	0x00000024

023fd520 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fd520:	b509      	push	{r0, r3, lr}
 23fd522:	4804      	ldr	r0, [pc, #16]	; (23fd534 <hal_usart_flush+0x14>)
 23fd524:	6800      	ldr	r0, [r0, #0]
 23fd526:	4b04      	ldr	r3, [pc, #16]	; (23fd538 <hal_usart_flush+0x18>)
 23fd528:	4403      	add	r3, r0
 23fd52a:	681b      	ldr	r3, [r3, #0]
 23fd52c:	69db      	ldr	r3, [r3, #28]
 23fd52e:	9302      	str	r3, [sp, #8]
 23fd530:	bd09      	pop	{r0, r3, pc}
 23fd532:	0000      	.short	0x0000
 23fd534:	1007adc0 	.word	0x1007adc0
 23fd538:	00000024 	.word	0x00000024

023fd53c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fd53c:	b509      	push	{r0, r3, lr}
 23fd53e:	4804      	ldr	r0, [pc, #16]	; (23fd550 <hal_usart_is_enabled+0x14>)
 23fd540:	6800      	ldr	r0, [r0, #0]
 23fd542:	4b04      	ldr	r3, [pc, #16]	; (23fd554 <hal_usart_is_enabled+0x18>)
 23fd544:	4403      	add	r3, r0
 23fd546:	681b      	ldr	r3, [r3, #0]
 23fd548:	6a1b      	ldr	r3, [r3, #32]
 23fd54a:	9302      	str	r3, [sp, #8]
 23fd54c:	bd09      	pop	{r0, r3, pc}
 23fd54e:	0000      	.short	0x0000
 23fd550:	1007adc0 	.word	0x1007adc0
 23fd554:	00000024 	.word	0x00000024

023fd558 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fd558:	b509      	push	{r0, r3, lr}
 23fd55a:	4804      	ldr	r0, [pc, #16]	; (23fd56c <hal_usart_available_data_for_write+0x14>)
 23fd55c:	6800      	ldr	r0, [r0, #0]
 23fd55e:	4b04      	ldr	r3, [pc, #16]	; (23fd570 <hal_usart_available_data_for_write+0x18>)
 23fd560:	4403      	add	r3, r0
 23fd562:	681b      	ldr	r3, [r3, #0]
 23fd564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd566:	9302      	str	r3, [sp, #8]
 23fd568:	bd09      	pop	{r0, r3, pc}
 23fd56a:	0000      	.short	0x0000
 23fd56c:	1007adc0 	.word	0x1007adc0
 23fd570:	00000024 	.word	0x00000024

023fd574 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fd574:	b509      	push	{r0, r3, lr}
 23fd576:	4804      	ldr	r0, [pc, #16]	; (23fd588 <hal_usart_begin_config+0x14>)
 23fd578:	6800      	ldr	r0, [r0, #0]
 23fd57a:	4b04      	ldr	r3, [pc, #16]	; (23fd58c <hal_usart_begin_config+0x18>)
 23fd57c:	4403      	add	r3, r0
 23fd57e:	681b      	ldr	r3, [r3, #0]
 23fd580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd582:	9302      	str	r3, [sp, #8]
 23fd584:	bd09      	pop	{r0, r3, pc}
 23fd586:	0000      	.short	0x0000
 23fd588:	1007adc0 	.word	0x1007adc0
 23fd58c:	00000024 	.word	0x00000024

023fd590 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fd590:	b509      	push	{r0, r3, lr}
 23fd592:	4804      	ldr	r0, [pc, #16]	; (23fd5a4 <hal_usart_init_ex+0x14>)
 23fd594:	6800      	ldr	r0, [r0, #0]
 23fd596:	4b04      	ldr	r3, [pc, #16]	; (23fd5a8 <hal_usart_init_ex+0x18>)
 23fd598:	4403      	add	r3, r0
 23fd59a:	681b      	ldr	r3, [r3, #0]
 23fd59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd59e:	9302      	str	r3, [sp, #8]
 23fd5a0:	bd09      	pop	{r0, r3, pc}
 23fd5a2:	0000      	.short	0x0000
 23fd5a4:	1007adc0 	.word	0x1007adc0
 23fd5a8:	00000024 	.word	0x00000024

023fd5ac <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fd5ac:	b509      	push	{r0, r3, lr}
 23fd5ae:	4804      	ldr	r0, [pc, #16]	; (23fd5c0 <HAL_USB_USART_Init+0x14>)
 23fd5b0:	6800      	ldr	r0, [r0, #0]
 23fd5b2:	4b04      	ldr	r3, [pc, #16]	; (23fd5c4 <HAL_USB_USART_Init+0x18>)
 23fd5b4:	4403      	add	r3, r0
 23fd5b6:	681b      	ldr	r3, [r3, #0]
 23fd5b8:	681b      	ldr	r3, [r3, #0]
 23fd5ba:	9302      	str	r3, [sp, #8]
 23fd5bc:	bd09      	pop	{r0, r3, pc}
 23fd5be:	0000      	.short	0x0000
 23fd5c0:	1007adc0 	.word	0x1007adc0
 23fd5c4:	00000034 	.word	0x00000034

023fd5c8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fd5c8:	b509      	push	{r0, r3, lr}
 23fd5ca:	4804      	ldr	r0, [pc, #16]	; (23fd5dc <HAL_USB_USART_Begin+0x14>)
 23fd5cc:	6800      	ldr	r0, [r0, #0]
 23fd5ce:	4b04      	ldr	r3, [pc, #16]	; (23fd5e0 <HAL_USB_USART_Begin+0x18>)
 23fd5d0:	4403      	add	r3, r0
 23fd5d2:	681b      	ldr	r3, [r3, #0]
 23fd5d4:	685b      	ldr	r3, [r3, #4]
 23fd5d6:	9302      	str	r3, [sp, #8]
 23fd5d8:	bd09      	pop	{r0, r3, pc}
 23fd5da:	0000      	.short	0x0000
 23fd5dc:	1007adc0 	.word	0x1007adc0
 23fd5e0:	00000034 	.word	0x00000034

023fd5e4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fd5e4:	b509      	push	{r0, r3, lr}
 23fd5e6:	4804      	ldr	r0, [pc, #16]	; (23fd5f8 <HAL_USB_USART_End+0x14>)
 23fd5e8:	6800      	ldr	r0, [r0, #0]
 23fd5ea:	4b04      	ldr	r3, [pc, #16]	; (23fd5fc <HAL_USB_USART_End+0x18>)
 23fd5ec:	4403      	add	r3, r0
 23fd5ee:	681b      	ldr	r3, [r3, #0]
 23fd5f0:	689b      	ldr	r3, [r3, #8]
 23fd5f2:	9302      	str	r3, [sp, #8]
 23fd5f4:	bd09      	pop	{r0, r3, pc}
 23fd5f6:	0000      	.short	0x0000
 23fd5f8:	1007adc0 	.word	0x1007adc0
 23fd5fc:	00000034 	.word	0x00000034

023fd600 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
 23fd600:	b509      	push	{r0, r3, lr}
 23fd602:	4804      	ldr	r0, [pc, #16]	; (23fd614 <HAL_USB_USART_Available_Data+0x14>)
 23fd604:	6800      	ldr	r0, [r0, #0]
 23fd606:	4b04      	ldr	r3, [pc, #16]	; (23fd618 <HAL_USB_USART_Available_Data+0x18>)
 23fd608:	4403      	add	r3, r0
 23fd60a:	681b      	ldr	r3, [r3, #0]
 23fd60c:	691b      	ldr	r3, [r3, #16]
 23fd60e:	9302      	str	r3, [sp, #8]
 23fd610:	bd09      	pop	{r0, r3, pc}
 23fd612:	0000      	.short	0x0000
 23fd614:	1007adc0 	.word	0x1007adc0
 23fd618:	00000034 	.word	0x00000034

023fd61c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
 23fd61c:	b509      	push	{r0, r3, lr}
 23fd61e:	4804      	ldr	r0, [pc, #16]	; (23fd630 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fd620:	6800      	ldr	r0, [r0, #0]
 23fd622:	4b04      	ldr	r3, [pc, #16]	; (23fd634 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fd624:	4403      	add	r3, r0
 23fd626:	681b      	ldr	r3, [r3, #0]
 23fd628:	695b      	ldr	r3, [r3, #20]
 23fd62a:	9302      	str	r3, [sp, #8]
 23fd62c:	bd09      	pop	{r0, r3, pc}
 23fd62e:	0000      	.short	0x0000
 23fd630:	1007adc0 	.word	0x1007adc0
 23fd634:	00000034 	.word	0x00000034

023fd638 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fd638:	b509      	push	{r0, r3, lr}
 23fd63a:	4804      	ldr	r0, [pc, #16]	; (23fd64c <HAL_USB_USART_Receive_Data+0x14>)
 23fd63c:	6800      	ldr	r0, [r0, #0]
 23fd63e:	4b04      	ldr	r3, [pc, #16]	; (23fd650 <HAL_USB_USART_Receive_Data+0x18>)
 23fd640:	4403      	add	r3, r0
 23fd642:	681b      	ldr	r3, [r3, #0]
 23fd644:	699b      	ldr	r3, [r3, #24]
 23fd646:	9302      	str	r3, [sp, #8]
 23fd648:	bd09      	pop	{r0, r3, pc}
 23fd64a:	0000      	.short	0x0000
 23fd64c:	1007adc0 	.word	0x1007adc0
 23fd650:	00000034 	.word	0x00000034

023fd654 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fd654:	b509      	push	{r0, r3, lr}
 23fd656:	4804      	ldr	r0, [pc, #16]	; (23fd668 <HAL_USB_USART_Send_Data+0x14>)
 23fd658:	6800      	ldr	r0, [r0, #0]
 23fd65a:	4b04      	ldr	r3, [pc, #16]	; (23fd66c <HAL_USB_USART_Send_Data+0x18>)
 23fd65c:	4403      	add	r3, r0
 23fd65e:	681b      	ldr	r3, [r3, #0]
 23fd660:	69db      	ldr	r3, [r3, #28]
 23fd662:	9302      	str	r3, [sp, #8]
 23fd664:	bd09      	pop	{r0, r3, pc}
 23fd666:	0000      	.short	0x0000
 23fd668:	1007adc0 	.word	0x1007adc0
 23fd66c:	00000034 	.word	0x00000034

023fd670 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
 23fd670:	b509      	push	{r0, r3, lr}
 23fd672:	4804      	ldr	r0, [pc, #16]	; (23fd684 <HAL_USB_USART_Flush_Data+0x14>)
 23fd674:	6800      	ldr	r0, [r0, #0]
 23fd676:	4b04      	ldr	r3, [pc, #16]	; (23fd688 <HAL_USB_USART_Flush_Data+0x18>)
 23fd678:	4403      	add	r3, r0
 23fd67a:	681b      	ldr	r3, [r3, #0]
 23fd67c:	6a1b      	ldr	r3, [r3, #32]
 23fd67e:	9302      	str	r3, [sp, #8]
 23fd680:	bd09      	pop	{r0, r3, pc}
 23fd682:	0000      	.short	0x0000
 23fd684:	1007adc0 	.word	0x1007adc0
 23fd688:	00000034 	.word	0x00000034

023fd68c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fd68c:	b509      	push	{r0, r3, lr}
 23fd68e:	4804      	ldr	r0, [pc, #16]	; (23fd6a0 <panic_+0x14>)
 23fd690:	6800      	ldr	r0, [r0, #0]
 23fd692:	4b04      	ldr	r3, [pc, #16]	; (23fd6a4 <panic_+0x18>)
 23fd694:	4403      	add	r3, r0
 23fd696:	681b      	ldr	r3, [r3, #0]
 23fd698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd69a:	9302      	str	r3, [sp, #8]
 23fd69c:	bd09      	pop	{r0, r3, pc}
 23fd69e:	0000      	.short	0x0000
 23fd6a0:	1007adc0 	.word	0x1007adc0
 23fd6a4:	00000048 	.word	0x00000048

023fd6a8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fd6a8:	b509      	push	{r0, r3, lr}
 23fd6aa:	4804      	ldr	r0, [pc, #16]	; (23fd6bc <log_level_name+0x14>)
 23fd6ac:	6800      	ldr	r0, [r0, #0]
 23fd6ae:	4b04      	ldr	r3, [pc, #16]	; (23fd6c0 <log_level_name+0x18>)
 23fd6b0:	4403      	add	r3, r0
 23fd6b2:	681b      	ldr	r3, [r3, #0]
 23fd6b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fd6b6:	9302      	str	r3, [sp, #8]
 23fd6b8:	bd09      	pop	{r0, r3, pc}
 23fd6ba:	0000      	.short	0x0000
 23fd6bc:	1007adc0 	.word	0x1007adc0
 23fd6c0:	00000048 	.word	0x00000048

023fd6c4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fd6c4:	b509      	push	{r0, r3, lr}
 23fd6c6:	4804      	ldr	r0, [pc, #16]	; (23fd6d8 <log_set_callbacks+0x14>)
 23fd6c8:	6800      	ldr	r0, [r0, #0]
 23fd6ca:	4b04      	ldr	r3, [pc, #16]	; (23fd6dc <log_set_callbacks+0x18>)
 23fd6cc:	4403      	add	r3, r0
 23fd6ce:	681b      	ldr	r3, [r3, #0]
 23fd6d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fd6d2:	9302      	str	r3, [sp, #8]
 23fd6d4:	bd09      	pop	{r0, r3, pc}
 23fd6d6:	0000      	.short	0x0000
 23fd6d8:	1007adc0 	.word	0x1007adc0
 23fd6dc:	00000048 	.word	0x00000048

023fd6e0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fd6e0:	b509      	push	{r0, r3, lr}
 23fd6e2:	4804      	ldr	r0, [pc, #16]	; (23fd6f4 <set_system_mode+0x14>)
 23fd6e4:	6800      	ldr	r0, [r0, #0]
 23fd6e6:	4b04      	ldr	r3, [pc, #16]	; (23fd6f8 <set_system_mode+0x18>)
 23fd6e8:	4403      	add	r3, r0
 23fd6ea:	681b      	ldr	r3, [r3, #0]
 23fd6ec:	685b      	ldr	r3, [r3, #4]
 23fd6ee:	9302      	str	r3, [sp, #8]
 23fd6f0:	bd09      	pop	{r0, r3, pc}
 23fd6f2:	0000      	.short	0x0000
 23fd6f4:	1007adc0 	.word	0x1007adc0
 23fd6f8:	00000008 	.word	0x00000008

023fd6fc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fd6fc:	b509      	push	{r0, r3, lr}
 23fd6fe:	4804      	ldr	r0, [pc, #16]	; (23fd710 <system_thread_set_state+0x14>)
 23fd700:	6800      	ldr	r0, [r0, #0]
 23fd702:	4b04      	ldr	r3, [pc, #16]	; (23fd714 <system_thread_set_state+0x18>)
 23fd704:	4403      	add	r3, r0
 23fd706:	681b      	ldr	r3, [r3, #0]
 23fd708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd70a:	9302      	str	r3, [sp, #8]
 23fd70c:	bd09      	pop	{r0, r3, pc}
 23fd70e:	0000      	.short	0x0000
 23fd710:	1007adc0 	.word	0x1007adc0
 23fd714:	00000008 	.word	0x00000008

023fd718 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fd718:	b509      	push	{r0, r3, lr}
 23fd71a:	4804      	ldr	r0, [pc, #16]	; (23fd72c <system_ctrl_set_app_request_handler+0x14>)
 23fd71c:	6800      	ldr	r0, [r0, #0]
 23fd71e:	4b04      	ldr	r3, [pc, #16]	; (23fd730 <system_ctrl_set_app_request_handler+0x18>)
 23fd720:	4403      	add	r3, r0
 23fd722:	681b      	ldr	r3, [r3, #0]
 23fd724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fd728:	9302      	str	r3, [sp, #8]
 23fd72a:	bd09      	pop	{r0, r3, pc}
 23fd72c:	1007adc0 	.word	0x1007adc0
 23fd730:	00000008 	.word	0x00000008

023fd734 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fd734:	b509      	push	{r0, r3, lr}
 23fd736:	4804      	ldr	r0, [pc, #16]	; (23fd748 <system_ctrl_set_result+0x14>)
 23fd738:	6800      	ldr	r0, [r0, #0]
 23fd73a:	4b04      	ldr	r3, [pc, #16]	; (23fd74c <system_ctrl_set_result+0x18>)
 23fd73c:	4403      	add	r3, r0
 23fd73e:	681b      	ldr	r3, [r3, #0]
 23fd740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fd744:	9302      	str	r3, [sp, #8]
 23fd746:	bd09      	pop	{r0, r3, pc}
 23fd748:	1007adc0 	.word	0x1007adc0
 23fd74c:	00000008 	.word	0x00000008

023fd750 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd750:	b509      	push	{r0, r3, lr}
 23fd752:	4804      	ldr	r0, [pc, #16]	; (23fd764 <network_connect+0x14>)
 23fd754:	6800      	ldr	r0, [r0, #0]
 23fd756:	4b04      	ldr	r3, [pc, #16]	; (23fd768 <network_connect+0x18>)
 23fd758:	4403      	add	r3, r0
 23fd75a:	681b      	ldr	r3, [r3, #0]
 23fd75c:	685b      	ldr	r3, [r3, #4]
 23fd75e:	9302      	str	r3, [sp, #8]
 23fd760:	bd09      	pop	{r0, r3, pc}
 23fd762:	0000      	.short	0x0000
 23fd764:	1007adc0 	.word	0x1007adc0
 23fd768:	00000028 	.word	0x00000028

023fd76c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fd76c:	b509      	push	{r0, r3, lr}
 23fd76e:	4804      	ldr	r0, [pc, #16]	; (23fd780 <network_connecting+0x14>)
 23fd770:	6800      	ldr	r0, [r0, #0]
 23fd772:	4b04      	ldr	r3, [pc, #16]	; (23fd784 <network_connecting+0x18>)
 23fd774:	4403      	add	r3, r0
 23fd776:	681b      	ldr	r3, [r3, #0]
 23fd778:	689b      	ldr	r3, [r3, #8]
 23fd77a:	9302      	str	r3, [sp, #8]
 23fd77c:	bd09      	pop	{r0, r3, pc}
 23fd77e:	0000      	.short	0x0000
 23fd780:	1007adc0 	.word	0x1007adc0
 23fd784:	00000028 	.word	0x00000028

023fd788 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fd788:	b509      	push	{r0, r3, lr}
 23fd78a:	4804      	ldr	r0, [pc, #16]	; (23fd79c <network_disconnect+0x14>)
 23fd78c:	6800      	ldr	r0, [r0, #0]
 23fd78e:	4b04      	ldr	r3, [pc, #16]	; (23fd7a0 <network_disconnect+0x18>)
 23fd790:	4403      	add	r3, r0
 23fd792:	681b      	ldr	r3, [r3, #0]
 23fd794:	68db      	ldr	r3, [r3, #12]
 23fd796:	9302      	str	r3, [sp, #8]
 23fd798:	bd09      	pop	{r0, r3, pc}
 23fd79a:	0000      	.short	0x0000
 23fd79c:	1007adc0 	.word	0x1007adc0
 23fd7a0:	00000028 	.word	0x00000028

023fd7a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fd7a4:	b509      	push	{r0, r3, lr}
 23fd7a6:	4804      	ldr	r0, [pc, #16]	; (23fd7b8 <network_ready+0x14>)
 23fd7a8:	6800      	ldr	r0, [r0, #0]
 23fd7aa:	4b04      	ldr	r3, [pc, #16]	; (23fd7bc <network_ready+0x18>)
 23fd7ac:	4403      	add	r3, r0
 23fd7ae:	681b      	ldr	r3, [r3, #0]
 23fd7b0:	691b      	ldr	r3, [r3, #16]
 23fd7b2:	9302      	str	r3, [sp, #8]
 23fd7b4:	bd09      	pop	{r0, r3, pc}
 23fd7b6:	0000      	.short	0x0000
 23fd7b8:	1007adc0 	.word	0x1007adc0
 23fd7bc:	00000028 	.word	0x00000028

023fd7c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd7c0:	b509      	push	{r0, r3, lr}
 23fd7c2:	4804      	ldr	r0, [pc, #16]	; (23fd7d4 <network_on+0x14>)
 23fd7c4:	6800      	ldr	r0, [r0, #0]
 23fd7c6:	4b04      	ldr	r3, [pc, #16]	; (23fd7d8 <network_on+0x18>)
 23fd7c8:	4403      	add	r3, r0
 23fd7ca:	681b      	ldr	r3, [r3, #0]
 23fd7cc:	695b      	ldr	r3, [r3, #20]
 23fd7ce:	9302      	str	r3, [sp, #8]
 23fd7d0:	bd09      	pop	{r0, r3, pc}
 23fd7d2:	0000      	.short	0x0000
 23fd7d4:	1007adc0 	.word	0x1007adc0
 23fd7d8:	00000028 	.word	0x00000028

023fd7dc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd7dc:	b509      	push	{r0, r3, lr}
 23fd7de:	4804      	ldr	r0, [pc, #16]	; (23fd7f0 <network_off+0x14>)
 23fd7e0:	6800      	ldr	r0, [r0, #0]
 23fd7e2:	4b04      	ldr	r3, [pc, #16]	; (23fd7f4 <network_off+0x18>)
 23fd7e4:	4403      	add	r3, r0
 23fd7e6:	681b      	ldr	r3, [r3, #0]
 23fd7e8:	699b      	ldr	r3, [r3, #24]
 23fd7ea:	9302      	str	r3, [sp, #8]
 23fd7ec:	bd09      	pop	{r0, r3, pc}
 23fd7ee:	0000      	.short	0x0000
 23fd7f0:	1007adc0 	.word	0x1007adc0
 23fd7f4:	00000028 	.word	0x00000028

023fd7f8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fd7f8:	b509      	push	{r0, r3, lr}
 23fd7fa:	4804      	ldr	r0, [pc, #16]	; (23fd80c <network_listen+0x14>)
 23fd7fc:	6800      	ldr	r0, [r0, #0]
 23fd7fe:	4b04      	ldr	r3, [pc, #16]	; (23fd810 <network_listen+0x18>)
 23fd800:	4403      	add	r3, r0
 23fd802:	681b      	ldr	r3, [r3, #0]
 23fd804:	69db      	ldr	r3, [r3, #28]
 23fd806:	9302      	str	r3, [sp, #8]
 23fd808:	bd09      	pop	{r0, r3, pc}
 23fd80a:	0000      	.short	0x0000
 23fd80c:	1007adc0 	.word	0x1007adc0
 23fd810:	00000028 	.word	0x00000028

023fd814 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fd814:	b509      	push	{r0, r3, lr}
 23fd816:	4804      	ldr	r0, [pc, #16]	; (23fd828 <network_listening+0x14>)
 23fd818:	6800      	ldr	r0, [r0, #0]
 23fd81a:	4b04      	ldr	r3, [pc, #16]	; (23fd82c <network_listening+0x18>)
 23fd81c:	4403      	add	r3, r0
 23fd81e:	681b      	ldr	r3, [r3, #0]
 23fd820:	6a1b      	ldr	r3, [r3, #32]
 23fd822:	9302      	str	r3, [sp, #8]
 23fd824:	bd09      	pop	{r0, r3, pc}
 23fd826:	0000      	.short	0x0000
 23fd828:	1007adc0 	.word	0x1007adc0
 23fd82c:	00000028 	.word	0x00000028

023fd830 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fd830:	b509      	push	{r0, r3, lr}
 23fd832:	4804      	ldr	r0, [pc, #16]	; (23fd844 <network_set_listen_timeout+0x14>)
 23fd834:	6800      	ldr	r0, [r0, #0]
 23fd836:	4b04      	ldr	r3, [pc, #16]	; (23fd848 <network_set_listen_timeout+0x18>)
 23fd838:	4403      	add	r3, r0
 23fd83a:	681b      	ldr	r3, [r3, #0]
 23fd83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd83e:	9302      	str	r3, [sp, #8]
 23fd840:	bd09      	pop	{r0, r3, pc}
 23fd842:	0000      	.short	0x0000
 23fd844:	1007adc0 	.word	0x1007adc0
 23fd848:	00000028 	.word	0x00000028

023fd84c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fd84c:	b509      	push	{r0, r3, lr}
 23fd84e:	4804      	ldr	r0, [pc, #16]	; (23fd860 <network_get_listen_timeout+0x14>)
 23fd850:	6800      	ldr	r0, [r0, #0]
 23fd852:	4b04      	ldr	r3, [pc, #16]	; (23fd864 <network_get_listen_timeout+0x18>)
 23fd854:	4403      	add	r3, r0
 23fd856:	681b      	ldr	r3, [r3, #0]
 23fd858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd85a:	9302      	str	r3, [sp, #8]
 23fd85c:	bd09      	pop	{r0, r3, pc}
 23fd85e:	0000      	.short	0x0000
 23fd860:	1007adc0 	.word	0x1007adc0
 23fd864:	00000028 	.word	0x00000028

023fd868 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fd868:	b509      	push	{r0, r3, lr}
 23fd86a:	4804      	ldr	r0, [pc, #16]	; (23fd87c <network_is_on+0x14>)
 23fd86c:	6800      	ldr	r0, [r0, #0]
 23fd86e:	4b04      	ldr	r3, [pc, #16]	; (23fd880 <network_is_on+0x18>)
 23fd870:	4403      	add	r3, r0
 23fd872:	681b      	ldr	r3, [r3, #0]
 23fd874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd876:	9302      	str	r3, [sp, #8]
 23fd878:	bd09      	pop	{r0, r3, pc}
 23fd87a:	0000      	.short	0x0000
 23fd87c:	1007adc0 	.word	0x1007adc0
 23fd880:	00000028 	.word	0x00000028

023fd884 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fd884:	b509      	push	{r0, r3, lr}
 23fd886:	4804      	ldr	r0, [pc, #16]	; (23fd898 <network_is_off+0x14>)
 23fd888:	6800      	ldr	r0, [r0, #0]
 23fd88a:	4b04      	ldr	r3, [pc, #16]	; (23fd89c <network_is_off+0x18>)
 23fd88c:	4403      	add	r3, r0
 23fd88e:	681b      	ldr	r3, [r3, #0]
 23fd890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd892:	9302      	str	r3, [sp, #8]
 23fd894:	bd09      	pop	{r0, r3, pc}
 23fd896:	0000      	.short	0x0000
 23fd898:	1007adc0 	.word	0x1007adc0
 23fd89c:	00000028 	.word	0x00000028

023fd8a0 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23fd8a0:	b509      	push	{r0, r3, lr}
 23fd8a2:	4804      	ldr	r0, [pc, #16]	; (23fd8b4 <network_prefer+0x14>)
 23fd8a4:	6800      	ldr	r0, [r0, #0]
 23fd8a6:	4b04      	ldr	r3, [pc, #16]	; (23fd8b8 <network_prefer+0x18>)
 23fd8a8:	4403      	add	r3, r0
 23fd8aa:	681b      	ldr	r3, [r3, #0]
 23fd8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fd8ae:	9302      	str	r3, [sp, #8]
 23fd8b0:	bd09      	pop	{r0, r3, pc}
 23fd8b2:	0000      	.short	0x0000
 23fd8b4:	1007adc0 	.word	0x1007adc0
 23fd8b8:	00000028 	.word	0x00000028

023fd8bc <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23fd8bc:	b509      	push	{r0, r3, lr}
 23fd8be:	4804      	ldr	r0, [pc, #16]	; (23fd8d0 <network_is_preferred+0x14>)
 23fd8c0:	6800      	ldr	r0, [r0, #0]
 23fd8c2:	4b04      	ldr	r3, [pc, #16]	; (23fd8d4 <network_is_preferred+0x18>)
 23fd8c4:	4403      	add	r3, r0
 23fd8c6:	681b      	ldr	r3, [r3, #0]
 23fd8c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fd8ca:	9302      	str	r3, [sp, #8]
 23fd8cc:	bd09      	pop	{r0, r3, pc}
 23fd8ce:	0000      	.short	0x0000
 23fd8d0:	1007adc0 	.word	0x1007adc0
 23fd8d4:	00000028 	.word	0x00000028

023fd8d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fd8d8:	b509      	push	{r0, r3, lr}
 23fd8da:	4804      	ldr	r0, [pc, #16]	; (23fd8ec <spark_set_random_seed_from_cloud_handler+0x14>)
 23fd8dc:	6800      	ldr	r0, [r0, #0]
 23fd8de:	4b04      	ldr	r3, [pc, #16]	; (23fd8f0 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fd8e0:	4403      	add	r3, r0
 23fd8e2:	681b      	ldr	r3, [r3, #0]
 23fd8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd8e6:	9302      	str	r3, [sp, #8]
 23fd8e8:	bd09      	pop	{r0, r3, pc}
 23fd8ea:	0000      	.short	0x0000
 23fd8ec:	1007adc0 	.word	0x1007adc0
 23fd8f0:	0000002c 	.word	0x0000002c

023fd8f4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fd8f4:	b509      	push	{r0, r3, lr}
 23fd8f6:	4804      	ldr	r0, [pc, #16]	; (23fd908 <malloc+0x14>)
 23fd8f8:	6800      	ldr	r0, [r0, #0]
 23fd8fa:	4b04      	ldr	r3, [pc, #16]	; (23fd90c <malloc+0x18>)
 23fd8fc:	4403      	add	r3, r0
 23fd8fe:	681b      	ldr	r3, [r3, #0]
 23fd900:	681b      	ldr	r3, [r3, #0]
 23fd902:	9302      	str	r3, [sp, #8]
 23fd904:	bd09      	pop	{r0, r3, pc}
 23fd906:	0000      	.short	0x0000
 23fd908:	1007adc0 	.word	0x1007adc0
 23fd90c:	00000004 	.word	0x00000004

023fd910 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fd910:	b509      	push	{r0, r3, lr}
 23fd912:	4804      	ldr	r0, [pc, #16]	; (23fd924 <free+0x14>)
 23fd914:	6800      	ldr	r0, [r0, #0]
 23fd916:	4b04      	ldr	r3, [pc, #16]	; (23fd928 <free+0x18>)
 23fd918:	4403      	add	r3, r0
 23fd91a:	681b      	ldr	r3, [r3, #0]
 23fd91c:	685b      	ldr	r3, [r3, #4]
 23fd91e:	9302      	str	r3, [sp, #8]
 23fd920:	bd09      	pop	{r0, r3, pc}
 23fd922:	0000      	.short	0x0000
 23fd924:	1007adc0 	.word	0x1007adc0
 23fd928:	00000004 	.word	0x00000004

023fd92c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fd92c:	b509      	push	{r0, r3, lr}
 23fd92e:	4804      	ldr	r0, [pc, #16]	; (23fd940 <realloc+0x14>)
 23fd930:	6800      	ldr	r0, [r0, #0]
 23fd932:	4b04      	ldr	r3, [pc, #16]	; (23fd944 <realloc+0x18>)
 23fd934:	4403      	add	r3, r0
 23fd936:	681b      	ldr	r3, [r3, #0]
 23fd938:	689b      	ldr	r3, [r3, #8]
 23fd93a:	9302      	str	r3, [sp, #8]
 23fd93c:	bd09      	pop	{r0, r3, pc}
 23fd93e:	0000      	.short	0x0000
 23fd940:	1007adc0 	.word	0x1007adc0
 23fd944:	00000004 	.word	0x00000004

023fd948 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fd948:	b509      	push	{r0, r3, lr}
 23fd94a:	4804      	ldr	r0, [pc, #16]	; (23fd95c <vsnprintf+0x14>)
 23fd94c:	6800      	ldr	r0, [r0, #0]
 23fd94e:	4b04      	ldr	r3, [pc, #16]	; (23fd960 <vsnprintf+0x18>)
 23fd950:	4403      	add	r3, r0
 23fd952:	681b      	ldr	r3, [r3, #0]
 23fd954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fd956:	9302      	str	r3, [sp, #8]
 23fd958:	bd09      	pop	{r0, r3, pc}
 23fd95a:	0000      	.short	0x0000
 23fd95c:	1007adc0 	.word	0x1007adc0
 23fd960:	00000004 	.word	0x00000004

023fd964 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fd964:	b509      	push	{r0, r3, lr}
 23fd966:	4804      	ldr	r0, [pc, #16]	; (23fd978 <__errno+0x14>)
 23fd968:	6800      	ldr	r0, [r0, #0]
 23fd96a:	4b04      	ldr	r3, [pc, #16]	; (23fd97c <__errno+0x18>)
 23fd96c:	4403      	add	r3, r0
 23fd96e:	681b      	ldr	r3, [r3, #0]
 23fd970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd972:	9302      	str	r3, [sp, #8]
 23fd974:	bd09      	pop	{r0, r3, pc}
 23fd976:	0000      	.short	0x0000
 23fd978:	1007adc0 	.word	0x1007adc0
 23fd97c:	00000004 	.word	0x00000004

023fd980 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fd980:	b509      	push	{r0, r3, lr}
 23fd982:	4804      	ldr	r0, [pc, #16]	; (23fd994 <__assert_func+0x14>)
 23fd984:	6800      	ldr	r0, [r0, #0]
 23fd986:	4b04      	ldr	r3, [pc, #16]	; (23fd998 <__assert_func+0x18>)
 23fd988:	4403      	add	r3, r0
 23fd98a:	681b      	ldr	r3, [r3, #0]
 23fd98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd98e:	9302      	str	r3, [sp, #8]
 23fd990:	bd09      	pop	{r0, r3, pc}
 23fd992:	0000      	.short	0x0000
 23fd994:	1007adc0 	.word	0x1007adc0
 23fd998:	00000004 	.word	0x00000004

023fd99c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fd99c:	b509      	push	{r0, r3, lr}
 23fd99e:	4804      	ldr	r0, [pc, #16]	; (23fd9b0 <newlib_impure_ptr_callback+0x14>)
 23fd9a0:	6800      	ldr	r0, [r0, #0]
 23fd9a2:	4b04      	ldr	r3, [pc, #16]	; (23fd9b4 <newlib_impure_ptr_callback+0x18>)
 23fd9a4:	4403      	add	r3, r0
 23fd9a6:	681b      	ldr	r3, [r3, #0]
 23fd9a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd9aa:	9302      	str	r3, [sp, #8]
 23fd9ac:	bd09      	pop	{r0, r3, pc}
 23fd9ae:	0000      	.short	0x0000
 23fd9b0:	1007adc0 	.word	0x1007adc0
 23fd9b4:	00000004 	.word	0x00000004

023fd9b8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd9b8:	2200      	movs	r2, #0
 23fd9ba:	6840      	ldr	r0, [r0, #4]
 23fd9bc:	4611      	mov	r1, r2
 23fd9be:	f7ff bf29 	b.w	23fd814 <network_listening>

023fd9c2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd9c2:	2200      	movs	r2, #0
 23fd9c4:	6840      	ldr	r0, [r0, #4]
 23fd9c6:	4611      	mov	r1, r2
 23fd9c8:	f7ff bf40 	b.w	23fd84c <network_get_listen_timeout>

023fd9cc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd9cc:	2200      	movs	r2, #0
 23fd9ce:	6840      	ldr	r0, [r0, #4]
 23fd9d0:	f7ff bf2e 	b.w	23fd830 <network_set_listen_timeout>

023fd9d4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd9d4:	2200      	movs	r2, #0
 23fd9d6:	6840      	ldr	r0, [r0, #4]
 23fd9d8:	f081 0101 	eor.w	r1, r1, #1
 23fd9dc:	f7ff bf0c 	b.w	23fd7f8 <network_listen>

023fd9e0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd9e0:	2300      	movs	r3, #0
 23fd9e2:	6840      	ldr	r0, [r0, #4]
 23fd9e4:	461a      	mov	r2, r3
 23fd9e6:	4619      	mov	r1, r3
 23fd9e8:	f7ff bef8 	b.w	23fd7dc <network_off>

023fd9ec <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd9ec:	2300      	movs	r3, #0
 23fd9ee:	6840      	ldr	r0, [r0, #4]
 23fd9f0:	461a      	mov	r2, r3
 23fd9f2:	4619      	mov	r1, r3
 23fd9f4:	f7ff bee4 	b.w	23fd7c0 <network_on>

023fd9f8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd9f8:	2200      	movs	r2, #0
 23fd9fa:	6840      	ldr	r0, [r0, #4]
 23fd9fc:	4611      	mov	r1, r2
 23fd9fe:	f7ff bed1 	b.w	23fd7a4 <network_ready>

023fda02 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fda02:	2200      	movs	r2, #0
 23fda04:	6840      	ldr	r0, [r0, #4]
 23fda06:	4611      	mov	r1, r2
 23fda08:	f7ff beb0 	b.w	23fd76c <network_connecting>

023fda0c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fda0c:	2200      	movs	r2, #0
 23fda0e:	2102      	movs	r1, #2
 23fda10:	6840      	ldr	r0, [r0, #4]
 23fda12:	f7ff beb9 	b.w	23fd788 <network_disconnect>

023fda16 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fda16:	2300      	movs	r3, #0
 23fda18:	6840      	ldr	r0, [r0, #4]
 23fda1a:	461a      	mov	r2, r3
 23fda1c:	f7ff be98 	b.w	23fd750 <network_connect>

023fda20 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fda20:	2203      	movs	r2, #3
 23fda22:	4b02      	ldr	r3, [pc, #8]	; (23fda2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fda24:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fda26:	4a02      	ldr	r2, [pc, #8]	; (23fda30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fda28:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fda2a:	4770      	bx	lr
 23fda2c:	1007ae68 	.word	0x1007ae68
 23fda30:	023ffbd4 	.word	0x023ffbd4

023fda34 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fda34:	680b      	ldr	r3, [r1, #0]
 23fda36:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fda38:	684b      	ldr	r3, [r1, #4]
 23fda3a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fda3c:	b113      	cbz	r3, 23fda44 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fda3e:	685a      	ldr	r2, [r3, #4]
 23fda40:	3201      	adds	r2, #1
 23fda42:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fda44:	4770      	bx	lr

023fda46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fda46:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 23fda48:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fda4a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fda4c:	b17c      	cbz	r4, 23fda6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fda4e:	6863      	ldr	r3, [r4, #4]
 23fda50:	3b01      	subs	r3, #1
 23fda52:	6063      	str	r3, [r4, #4]
 23fda54:	b95b      	cbnz	r3, 23fda6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fda56:	6823      	ldr	r3, [r4, #0]
 23fda58:	4620      	mov	r0, r4
 23fda5a:	689b      	ldr	r3, [r3, #8]
 23fda5c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fda5e:	68a3      	ldr	r3, [r4, #8]
 23fda60:	3b01      	subs	r3, #1
 23fda62:	60a3      	str	r3, [r4, #8]
 23fda64:	b91b      	cbnz	r3, 23fda6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fda66:	6823      	ldr	r3, [r4, #0]
 23fda68:	4620      	mov	r0, r4
 23fda6a:	68db      	ldr	r3, [r3, #12]
 23fda6c:	4798      	blx	r3
      }
 23fda6e:	4628      	mov	r0, r5
 23fda70:	bd38      	pop	{r3, r4, r5, pc}
	...

023fda74 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fda74:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fda76:	2000      	movs	r0, #0
 23fda78:	4b04      	ldr	r3, [pc, #16]	; (23fda8c <_GLOBAL__sub_I_System+0x18>)
 23fda7a:	601a      	str	r2, [r3, #0]
 23fda7c:	4b04      	ldr	r3, [pc, #16]	; (23fda90 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fda7e:	4a05      	ldr	r2, [pc, #20]	; (23fda94 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fda80:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fda84:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fda86:	f7ff be2b 	b.w	23fd6e0 <set_system_mode>
 23fda8a:	bf00      	nop
 23fda8c:	1007ae7c 	.word	0x1007ae7c
 23fda90:	1007ae70 	.word	0x1007ae70
 23fda94:	ffff0000 	.word	0xffff0000

023fda98 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fda98:	b510      	push	{r4, lr}
 23fda9a:	4604      	mov	r4, r0
{
    free(buffer);
 23fda9c:	6800      	ldr	r0, [r0, #0]
 23fda9e:	f7ff ff37 	bl	23fd910 <free>
}
 23fdaa2:	4620      	mov	r0, r4
 23fdaa4:	bd10      	pop	{r4, pc}

023fdaa6 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fdaa6:	b510      	push	{r4, lr}
 23fdaa8:	4604      	mov	r4, r0
    if (buffer) {
 23fdaaa:	6800      	ldr	r0, [r0, #0]
 23fdaac:	b108      	cbz	r0, 23fdab2 <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fdaae:	f7ff ff2f 	bl	23fd910 <free>
    }
    buffer = nullptr;
 23fdab2:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23fdab4:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fdab8:	6023      	str	r3, [r4, #0]
}
 23fdaba:	bd10      	pop	{r4, pc}

023fdabc <_ZN6String12changeBufferEj>:
    len = size;
    return true;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fdabc:	b538      	push	{r3, r4, r5, lr}
 23fdabe:	4604      	mov	r4, r0
 23fdac0:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fdac2:	6800      	ldr	r0, [r0, #0]
 23fdac4:	3101      	adds	r1, #1
 23fdac6:	f7ff ff31 	bl	23fd92c <realloc>
    if (newbuffer) {
 23fdaca:	b110      	cbz	r0, 23fdad2 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23fdacc:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fdad0:	2001      	movs	r0, #1
    }
    return 0;
}
 23fdad2:	bd38      	pop	{r3, r4, r5, pc}

023fdad4 <_ZN6String7reserveEj>:
{
 23fdad4:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23fdad6:	6803      	ldr	r3, [r0, #0]
{
 23fdad8:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23fdada:	b123      	cbz	r3, 23fdae6 <_ZN6String7reserveEj+0x12>
 23fdadc:	6843      	ldr	r3, [r0, #4]
 23fdade:	428b      	cmp	r3, r1
 23fdae0:	d301      	bcc.n	23fdae6 <_ZN6String7reserveEj+0x12>
 23fdae2:	2001      	movs	r0, #1
}
 23fdae4:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fdae6:	4620      	mov	r0, r4
 23fdae8:	f7ff ffe8 	bl	23fdabc <_ZN6String12changeBufferEj>
 23fdaec:	2800      	cmp	r0, #0
 23fdaee:	d0f9      	beq.n	23fdae4 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fdaf0:	68a3      	ldr	r3, [r4, #8]
 23fdaf2:	2b00      	cmp	r3, #0
 23fdaf4:	d1f5      	bne.n	23fdae2 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fdaf6:	6822      	ldr	r2, [r4, #0]
 23fdaf8:	7013      	strb	r3, [r2, #0]
 23fdafa:	e7f2      	b.n	23fdae2 <_ZN6String7reserveEj+0xe>

023fdafc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fdafc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdafe:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fdb00:	4611      	mov	r1, r2
 23fdb02:	9201      	str	r2, [sp, #4]
{
 23fdb04:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fdb06:	f7ff ffe5 	bl	23fdad4 <_ZN6String7reserveEj>
 23fdb0a:	9a01      	ldr	r2, [sp, #4]
 23fdb0c:	b928      	cbnz	r0, 23fdb1a <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fdb0e:	4620      	mov	r0, r4
 23fdb10:	f7ff ffc9 	bl	23fdaa6 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fdb14:	4620      	mov	r0, r4
 23fdb16:	b003      	add	sp, #12
 23fdb18:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fdb1a:	4629      	mov	r1, r5
    len = length;
 23fdb1c:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fdb1e:	6820      	ldr	r0, [r4, #0]
 23fdb20:	f001 fe8e 	bl	23ff840 <memcpy>
    buffer[len] = 0;
 23fdb24:	2100      	movs	r1, #0
 23fdb26:	6822      	ldr	r2, [r4, #0]
 23fdb28:	68a3      	ldr	r3, [r4, #8]
 23fdb2a:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fdb2c:	e7f2      	b.n	23fdb14 <_ZN6String4copyEPKcj+0x18>

023fdb2e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fdb2e:	b538      	push	{r3, r4, r5, lr}
 23fdb30:	4605      	mov	r5, r0
    if (buffer) {
 23fdb32:	6800      	ldr	r0, [r0, #0]
{
 23fdb34:	460c      	mov	r4, r1
    if (buffer) {
 23fdb36:	b170      	cbz	r0, 23fdb56 <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
 23fdb38:	686a      	ldr	r2, [r5, #4]
 23fdb3a:	688b      	ldr	r3, [r1, #8]
 23fdb3c:	429a      	cmp	r2, r3
 23fdb3e:	d308      	bcc.n	23fdb52 <_ZN6String4moveERS_+0x24>
 23fdb40:	6809      	ldr	r1, [r1, #0]
 23fdb42:	b131      	cbz	r1, 23fdb52 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
 23fdb44:	f001 fef1 	bl	23ff92a <strcpy>
            len = rhs.len;
 23fdb48:	68a3      	ldr	r3, [r4, #8]
 23fdb4a:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
 23fdb4c:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
 23fdb4e:	60a3      	str	r3, [r4, #8]
}
 23fdb50:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
 23fdb52:	f7ff fedd 	bl	23fd910 <free>
    buffer = rhs.buffer;
 23fdb56:	6823      	ldr	r3, [r4, #0]
 23fdb58:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
 23fdb5a:	6863      	ldr	r3, [r4, #4]
 23fdb5c:	606b      	str	r3, [r5, #4]
    len = rhs.len;
 23fdb5e:	68a3      	ldr	r3, [r4, #8]
 23fdb60:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
 23fdb62:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
 23fdb64:	e9c4 3300 	strd	r3, r3, [r4]
 23fdb68:	e7f1      	b.n	23fdb4e <_ZN6String4moveERS_+0x20>

023fdb6a <_ZN6StringC1EOS_>:
    buffer = nullptr;
 23fdb6a:	2300      	movs	r3, #0
String::String(String &&rval)
 23fdb6c:	b510      	push	{r4, lr}
 23fdb6e:	4604      	mov	r4, r0
    capacity_ = 0;
 23fdb70:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fdb74:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fdb76:	7303      	strb	r3, [r0, #12]
    move(rval);
 23fdb78:	f7ff ffd9 	bl	23fdb2e <_ZN6String4moveERS_>
}
 23fdb7c:	4620      	mov	r0, r4
 23fdb7e:	bd10      	pop	{r4, pc}

023fdb80 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23fdb80:	4288      	cmp	r0, r1
{
 23fdb82:	b510      	push	{r4, lr}
 23fdb84:	4604      	mov	r4, r0
    if (this == &rhs) {
 23fdb86:	d005      	beq.n	23fdb94 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23fdb88:	680b      	ldr	r3, [r1, #0]
 23fdb8a:	b12b      	cbz	r3, 23fdb98 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23fdb8c:	688a      	ldr	r2, [r1, #8]
 23fdb8e:	4619      	mov	r1, r3
 23fdb90:	f7ff ffb4 	bl	23fdafc <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fdb94:	4620      	mov	r0, r4
 23fdb96:	bd10      	pop	{r4, pc}
        invalidate();
 23fdb98:	f7ff ff85 	bl	23fdaa6 <_ZN6String10invalidateEv>
 23fdb9c:	e7fa      	b.n	23fdb94 <_ZN6StringaSERKS_+0x14>

023fdb9e <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23fdb9e:	2300      	movs	r3, #0
String::String(const String &value)
 23fdba0:	b510      	push	{r4, lr}
 23fdba2:	4604      	mov	r4, r0
    capacity_ = 0;
 23fdba4:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fdba8:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fdbaa:	7303      	strb	r3, [r0, #12]
    *this = value;
 23fdbac:	f7ff ffe8 	bl	23fdb80 <_ZN6StringaSERKS_>
}
 23fdbb0:	4620      	mov	r0, r4
 23fdbb2:	bd10      	pop	{r4, pc}

023fdbb4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fdbb4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fdbb6:	6843      	ldr	r3, [r0, #4]
    {
 23fdbb8:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fdbba:	3b01      	subs	r3, #1
 23fdbbc:	6043      	str	r3, [r0, #4]
 23fdbbe:	b963      	cbnz	r3, 23fdbda <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fdbc0:	6803      	ldr	r3, [r0, #0]
 23fdbc2:	689b      	ldr	r3, [r3, #8]
 23fdbc4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fdbc6:	68a3      	ldr	r3, [r4, #8]
 23fdbc8:	3b01      	subs	r3, #1
 23fdbca:	60a3      	str	r3, [r4, #8]
 23fdbcc:	b92b      	cbnz	r3, 23fdbda <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fdbce:	6823      	ldr	r3, [r4, #0]
 23fdbd0:	4620      	mov	r0, r4
    }
 23fdbd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fdbd6:	68db      	ldr	r3, [r3, #12]
 23fdbd8:	4718      	bx	r3
    }
 23fdbda:	bd10      	pop	{r4, pc}

023fdbdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fdbdc:	b570      	push	{r4, r5, r6, lr}
 23fdbde:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fdbe0:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fdbe4:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fdbe8:	42ae      	cmp	r6, r5
 23fdbea:	d004      	beq.n	23fdbf6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fdbec:	4628      	mov	r0, r5
 23fdbee:	f7ff ff53 	bl	23fda98 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fdbf2:	3510      	adds	r5, #16
 23fdbf4:	e7f8      	b.n	23fdbe8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fdbf6:	6820      	ldr	r0, [r4, #0]
 23fdbf8:	f7ff fe8a 	bl	23fd910 <free>
    AllocatorT::free(data_);
}
 23fdbfc:	4620      	mov	r0, r4
 23fdbfe:	bd70      	pop	{r4, r5, r6, pc}

023fdc00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fdc00:	2300      	movs	r3, #0
 23fdc02:	4802      	ldr	r0, [pc, #8]	; (23fdc0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fdc04:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fdc06:	f7ff bbff 	b.w	23fd408 <os_mutex_recursive_create>
 23fdc0a:	bf00      	nop
 23fdc0c:	1007ae80 	.word	0x1007ae80

023fdc10 <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
 23fdc10:	b510      	push	{r4, lr}
 23fdc12:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
 23fdc14:	6880      	ldr	r0, [r0, #8]
 23fdc16:	6803      	ldr	r3, [r0, #0]
 23fdc18:	68db      	ldr	r3, [r3, #12]
 23fdc1a:	4798      	blx	r3
 23fdc1c:	68e3      	ldr	r3, [r4, #12]
 23fdc1e:	4418      	add	r0, r3
 23fdc20:	60e0      	str	r0, [r4, #12]
}
 23fdc22:	bd10      	pop	{r4, pc}

023fdc24 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fdc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fdc26:	4606      	mov	r6, r0
 23fdc28:	460d      	mov	r5, r1
  size_t n = 0;
 23fdc2a:	2400      	movs	r4, #0
 23fdc2c:	188f      	adds	r7, r1, r2
  while (size--) {
 23fdc2e:	42bd      	cmp	r5, r7
 23fdc30:	d00c      	beq.n	23fdc4c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fdc32:	6833      	ldr	r3, [r6, #0]
 23fdc34:	4630      	mov	r0, r6
 23fdc36:	689b      	ldr	r3, [r3, #8]
 23fdc38:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fdc3c:	4798      	blx	r3
     if (chunk>=0)
 23fdc3e:	1e03      	subs	r3, r0, #0
 23fdc40:	db01      	blt.n	23fdc46 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fdc42:	441c      	add	r4, r3
  while (size--) {
 23fdc44:	e7f3      	b.n	23fdc2e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fdc46:	2c00      	cmp	r4, #0
 23fdc48:	bf08      	it	eq
 23fdc4a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fdc4c:	4620      	mov	r0, r4
 23fdc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fdc50 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fdc50:	4770      	bx	lr

023fdc52 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fdc52:	b510      	push	{r4, lr}
 23fdc54:	4604      	mov	r4, r0
 23fdc56:	2110      	movs	r1, #16
 23fdc58:	f7ff fa05 	bl	23fd066 <_ZdlPvj>
 23fdc5c:	4620      	mov	r0, r4
 23fdc5e:	bd10      	pop	{r4, pc}

023fdc60 <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 23fdc60:	b513      	push	{r0, r1, r4, lr}
 23fdc62:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
 23fdc64:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fdc66:	b159      	cbz	r1, 23fdc80 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fdc68:	9101      	str	r1, [sp, #4]
 23fdc6a:	f7ff f9d3 	bl	23fd014 <strlen>
 23fdc6e:	4602      	mov	r2, r0
 23fdc70:	4620      	mov	r0, r4
 23fdc72:	6823      	ldr	r3, [r4, #0]
 23fdc74:	9901      	ldr	r1, [sp, #4]
 23fdc76:	68db      	ldr	r3, [r3, #12]
    }
 23fdc78:	b002      	add	sp, #8
 23fdc7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fdc7e:	4718      	bx	r3
    }
 23fdc80:	b002      	add	sp, #8
 23fdc82:	bd10      	pop	{r4, pc}

023fdc84 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fdc84:	6803      	ldr	r3, [r0, #0]
 23fdc86:	689b      	ldr	r3, [r3, #8]
 23fdc88:	4718      	bx	r3

023fdc8a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fdc8a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fdc8c:	2a01      	cmp	r2, #1
 23fdc8e:	bf98      	it	ls
 23fdc90:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fdc92:	b530      	push	{r4, r5, lr}
 23fdc94:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fdc96:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fdc9a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fdc9c:	460d      	mov	r5, r1
 23fdc9e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fdca2:	fb01 5312 	mls	r3, r1, r2, r5
 23fdca6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fdcaa:	2b09      	cmp	r3, #9
 23fdcac:	bf94      	ite	ls
 23fdcae:	3330      	addls	r3, #48	; 0x30
 23fdcb0:	3337      	addhi	r3, #55	; 0x37
 23fdcb2:	b2db      	uxtb	r3, r3
  } while(n);
 23fdcb4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fdcb6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fdcba:	d9ef      	bls.n	23fdc9c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fdcbc:	4621      	mov	r1, r4
 23fdcbe:	f7ff ffcf 	bl	23fdc60 <_ZN5Print5writeEPKc>
}
 23fdcc2:	b00b      	add	sp, #44	; 0x2c
 23fdcc4:	bd30      	pop	{r4, r5, pc}

023fdcc6 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23fdcc6:	b510      	push	{r4, lr}
 23fdcc8:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fdcca:	f7ff fb73 	bl	23fd3b4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23fdcce:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23fdcd0:	6823      	ldr	r3, [r4, #0]
 23fdcd2:	4620      	mov	r0, r4
 23fdcd4:	695b      	ldr	r3, [r3, #20]
 23fdcd6:	4798      	blx	r3
    if (c >= 0) return c;
 23fdcd8:	2800      	cmp	r0, #0
 23fdcda:	da08      	bge.n	23fdcee <_ZN6Stream9timedReadEv+0x28>
 23fdcdc:	f7ff fb6a 	bl	23fd3b4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23fdce0:	68e3      	ldr	r3, [r4, #12]
 23fdce2:	1ac0      	subs	r0, r0, r3
 23fdce4:	68a3      	ldr	r3, [r4, #8]
 23fdce6:	4298      	cmp	r0, r3
 23fdce8:	d3f2      	bcc.n	23fdcd0 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23fdcea:	f04f 30ff 	mov.w	r0, #4294967295
}
 23fdcee:	bd10      	pop	{r4, pc}

023fdcf0 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23fdcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fdcf4:	4607      	mov	r7, r0
 23fdcf6:	460c      	mov	r4, r1
 23fdcf8:	460d      	mov	r5, r1
 23fdcfa:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23fdcfc:	42b5      	cmp	r5, r6
 23fdcfe:	eba5 0804 	sub.w	r8, r5, r4
 23fdd02:	d007      	beq.n	23fdd14 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23fdd04:	4638      	mov	r0, r7
 23fdd06:	f7ff ffde 	bl	23fdcc6 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23fdd0a:	1e03      	subs	r3, r0, #0
 23fdd0c:	db02      	blt.n	23fdd14 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23fdd0e:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23fdd12:	e7f3      	b.n	23fdcfc <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23fdd14:	4640      	mov	r0, r8
 23fdd16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fdd1a <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fdd1a:	4770      	bx	lr

023fdd1c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fdd1c:	4608      	mov	r0, r1
 23fdd1e:	b111      	cbz	r1, 23fdd26 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fdd20:	680b      	ldr	r3, [r1, #0]
 23fdd22:	685b      	ldr	r3, [r3, #4]
 23fdd24:	4718      	bx	r3
}
 23fdd26:	4770      	bx	lr

023fdd28 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fdd28:	4770      	bx	lr

023fdd2a <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fdd2a:	4770      	bx	lr

023fdd2c <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fdd2c:	4770      	bx	lr

023fdd2e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fdd2e:	b538      	push	{r3, r4, r5, lr}
 23fdd30:	4604      	mov	r4, r0
 23fdd32:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fdd34:	6800      	ldr	r0, [r0, #0]
 23fdd36:	212e      	movs	r1, #46	; 0x2e
 23fdd38:	f001 fded 	bl	23ff916 <strchrnul>
    size = s - category;
 23fdd3c:	6823      	ldr	r3, [r4, #0]
 23fdd3e:	1ac3      	subs	r3, r0, r3
 23fdd40:	602b      	str	r3, [r5, #0]
    if (size) {
 23fdd42:	b123      	cbz	r3, 23fdd4e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fdd44:	7803      	ldrb	r3, [r0, #0]
 23fdd46:	b103      	cbz	r3, 23fdd4a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fdd48:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23fdd4a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdd4c:	6020      	str	r0, [r4, #0]
}
 23fdd4e:	4618      	mov	r0, r3
 23fdd50:	bd38      	pop	{r3, r4, r5, pc}

023fdd52 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fdd52:	b510      	push	{r4, lr}
 23fdd54:	4604      	mov	r4, r0
 23fdd56:	2104      	movs	r1, #4
 23fdd58:	f7ff f985 	bl	23fd066 <_ZdlPvj>
 23fdd5c:	4620      	mov	r0, r4
 23fdd5e:	bd10      	pop	{r4, pc}

023fdd60 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fdd60:	b510      	push	{r4, lr}
 23fdd62:	4604      	mov	r4, r0
 23fdd64:	2104      	movs	r1, #4
 23fdd66:	f7ff f97e 	bl	23fd066 <_ZdlPvj>
 23fdd6a:	4620      	mov	r0, r4
 23fdd6c:	bd10      	pop	{r4, pc}

023fdd6e <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fdd6e:	f7ff bb67 	b.w	23fd440 <os_mutex_recursive_lock>

023fdd72 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fdd72:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fdd74:	f7ff f944 	bl	23fd000 <strcmp>
}
 23fdd78:	fab0 f080 	clz	r0, r0
 23fdd7c:	0940      	lsrs	r0, r0, #5
 23fdd7e:	bd08      	pop	{r3, pc}

023fdd80 <__tcf_1>:
 23fdd80:	4770      	bx	lr

023fdd82 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fdd82:	b510      	push	{r4, lr}
 23fdd84:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fdd86:	f001 f8ff 	bl	23fef88 <_Z16_fetch_usbserialv>
 23fdd8a:	4284      	cmp	r4, r0
 23fdd8c:	d105      	bne.n	23fdd9a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fdd8e:	f001 f8fb 	bl	23fef88 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fdd92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fdd96:	f001 b8eb 	b.w	23fef70 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fdd9a:	f001 fc99 	bl	23ff6d0 <_Z22__fetch_global_Serial1v>
 23fdd9e:	4284      	cmp	r4, r0
 23fdda0:	d105      	bne.n	23fddae <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fdda2:	f001 fc95 	bl	23ff6d0 <_Z22__fetch_global_Serial1v>
}
 23fdda6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fddaa:	f001 bb42 	b.w	23ff432 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fddae:	b12c      	cbz	r4, 23fddbc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fddb0:	6823      	ldr	r3, [r4, #0]
 23fddb2:	4620      	mov	r0, r4
}
 23fddb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fddb8:	685b      	ldr	r3, [r3, #4]
 23fddba:	4718      	bx	r3
 23fddbc:	bd10      	pop	{r4, pc}

023fddbe <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fddbe:	b513      	push	{r0, r1, r4, lr}
 23fddc0:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fddc2:	4608      	mov	r0, r1
 23fddc4:	9101      	str	r1, [sp, #4]
 23fddc6:	f7ff f925 	bl	23fd014 <strlen>
 23fddca:	4602      	mov	r2, r0
 23fddcc:	4620      	mov	r0, r4
 23fddce:	9901      	ldr	r1, [sp, #4]
}
 23fddd0:	b002      	add	sp, #8
 23fddd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fddd6:	f001 bac3 	b.w	23ff360 <_ZN5spark10JSONWriter5valueEPKcj>

023fddda <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fddda:	b513      	push	{r0, r1, r4, lr}
 23fdddc:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fddde:	4608      	mov	r0, r1
 23fdde0:	9101      	str	r1, [sp, #4]
 23fdde2:	f7ff f917 	bl	23fd014 <strlen>
 23fdde6:	4602      	mov	r2, r0
 23fdde8:	4620      	mov	r0, r4
 23fddea:	6823      	ldr	r3, [r4, #0]
 23fddec:	9901      	ldr	r1, [sp, #4]
 23fddee:	68db      	ldr	r3, [r3, #12]
}
 23fddf0:	b002      	add	sp, #8
 23fddf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fddf6:	4718      	bx	r3

023fddf8 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fddf8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fddfa:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fddfc:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fde00:	2201      	movs	r2, #1
 23fde02:	68db      	ldr	r3, [r3, #12]
 23fde04:	f10d 0107 	add.w	r1, sp, #7
 23fde08:	4798      	blx	r3
}
 23fde0a:	b003      	add	sp, #12
 23fde0c:	f85d fb04 	ldr.w	pc, [sp], #4

023fde10 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fde10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fde14:	f04f 0a14 	mov.w	sl, #20
 23fde18:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fde1c:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fde1e:	4645      	mov	r5, r8
 23fde20:	fb0a f404 	mul.w	r4, sl, r4
 23fde24:	9300      	str	r3, [sp, #0]
 23fde26:	4b17      	ldr	r3, [pc, #92]	; (23fde84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fde28:	10a4      	asrs	r4, r4, #2
 23fde2a:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fde2c:	2c00      	cmp	r4, #0
 23fde2e:	dd21      	ble.n	23fde74 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fde30:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fde32:	fb0a f006 	mul.w	r0, sl, r6
 23fde36:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fde3a:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fde3e:	463a      	mov	r2, r7
 23fde40:	455f      	cmp	r7, fp
 23fde42:	bf28      	it	cs
 23fde44:	465a      	movcs	r2, fp
 23fde46:	5828      	ldr	r0, [r5, r0]
 23fde48:	9101      	str	r1, [sp, #4]
 23fde4a:	f001 fd76 	bl	23ff93a <strncmp>
                if (cmp == 0) {
 23fde4e:	2800      	cmp	r0, #0
 23fde50:	f04f 0301 	mov.w	r3, #1
 23fde54:	9901      	ldr	r1, [sp, #4]
 23fde56:	d10b      	bne.n	23fde70 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fde58:	455f      	cmp	r7, fp
 23fde5a:	d103      	bne.n	23fde64 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fde5c:	9a00      	ldr	r2, [sp, #0]
 23fde5e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fde60:	4634      	mov	r4, r6
 23fde62:	e7e3      	b.n	23fde2c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fde64:	d9fc      	bls.n	23fde60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fde66:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fde68:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fde6c:	3e01      	subs	r6, #1
 23fde6e:	e7f7      	b.n	23fde60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fde70:	dbf9      	blt.n	23fde66 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fde72:	e7f5      	b.n	23fde60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fde74:	eba5 0508 	sub.w	r5, r5, r8
}
 23fde78:	4802      	ldr	r0, [pc, #8]	; (23fde84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fde7a:	10ad      	asrs	r5, r5, #2
 23fde7c:	4368      	muls	r0, r5
 23fde7e:	b003      	add	sp, #12
 23fde80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fde84:	cccccccd 	.word	0xcccccccd

023fde88 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fde88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fde8a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fde8c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fde8e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fde90:	b303      	cbz	r3, 23fded4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fde92:	b1f9      	cbz	r1, 23fded4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fde94:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fde96:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fde9a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fde9c:	a903      	add	r1, sp, #12
 23fde9e:	a801      	add	r0, sp, #4
 23fdea0:	f7ff ff45 	bl	23fdd2e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fdea4:	4601      	mov	r1, r0
 23fdea6:	b1a8      	cbz	r0, 23fded4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdea8:	f10d 030b 	add.w	r3, sp, #11
 23fdeac:	4620      	mov	r0, r4
 23fdeae:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fdeb0:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdeb4:	f7ff ffac 	bl	23fde10 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fdeb8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fdebc:	b153      	cbz	r3, 23fded4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fdebe:	6823      	ldr	r3, [r4, #0]
 23fdec0:	2414      	movs	r4, #20
 23fdec2:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fdec6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fdeca:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fdecc:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fdece:	bfa8      	it	ge
 23fded0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fded2:	e7e3      	b.n	23fde9c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fded4:	4628      	mov	r0, r5
 23fded6:	b004      	add	sp, #16
 23fded8:	bd70      	pop	{r4, r5, r6, pc}

023fdeda <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fdeda:	b40e      	push	{r1, r2, r3}
 23fdedc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fdede:	b08c      	sub	sp, #48	; 0x30
 23fdee0:	af00      	add	r7, sp, #0
 23fdee2:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fdee6:	f855 2b04 	ldr.w	r2, [r5], #4
 23fdeea:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdeec:	462b      	mov	r3, r5
 23fdeee:	2120      	movs	r1, #32
 23fdef0:	f107 0010 	add.w	r0, r7, #16
 23fdef4:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fdef6:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdef8:	f7ff fd26 	bl	23fd948 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fdefc:	281f      	cmp	r0, #31
 23fdefe:	687a      	ldr	r2, [r7, #4]
 23fdf00:	d91a      	bls.n	23fdf38 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fdf02:	f100 0308 	add.w	r3, r0, #8
 23fdf06:	f023 0307 	bic.w	r3, r3, #7
        }
 23fdf0a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fdf0c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdf10:	1c41      	adds	r1, r0, #1
 23fdf12:	462b      	mov	r3, r5
 23fdf14:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fdf16:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdf18:	f7ff fd16 	bl	23fd948 <vsnprintf>
        if (n > 0) {
 23fdf1c:	1e02      	subs	r2, r0, #0
 23fdf1e:	dd04      	ble.n	23fdf2a <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fdf20:	6823      	ldr	r3, [r4, #0]
 23fdf22:	4669      	mov	r1, sp
 23fdf24:	4620      	mov	r0, r4
 23fdf26:	68db      	ldr	r3, [r3, #12]
 23fdf28:	4798      	blx	r3
 23fdf2a:	46b5      	mov	sp, r6
}
 23fdf2c:	3730      	adds	r7, #48	; 0x30
 23fdf2e:	46bd      	mov	sp, r7
 23fdf30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fdf34:	b003      	add	sp, #12
 23fdf36:	4770      	bx	lr
    } else if (n > 0) {
 23fdf38:	2800      	cmp	r0, #0
 23fdf3a:	d0f7      	beq.n	23fdf2c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fdf3c:	6823      	ldr	r3, [r4, #0]
 23fdf3e:	4602      	mov	r2, r0
 23fdf40:	68db      	ldr	r3, [r3, #12]
 23fdf42:	4620      	mov	r0, r4
 23fdf44:	f107 0110 	add.w	r1, r7, #16
 23fdf48:	4798      	blx	r3
}
 23fdf4a:	e7ef      	b.n	23fdf2c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fdf4c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fdf4c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fdf4e:	4c08      	ldr	r4, [pc, #32]	; (23fdf70 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fdf50:	e8d4 3f8f 	ldab	r3, [r4]
 23fdf54:	07db      	lsls	r3, r3, #31
 23fdf56:	d409      	bmi.n	23fdf6c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fdf58:	4620      	mov	r0, r4
 23fdf5a:	f7ff f893 	bl	23fd084 <__cxa_guard_acquire>
 23fdf5e:	b128      	cbz	r0, 23fdf6c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fdf60:	4620      	mov	r0, r4
 23fdf62:	f7ff f894 	bl	23fd08e <__cxa_guard_release>
 23fdf66:	4803      	ldr	r0, [pc, #12]	; (23fdf74 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fdf68:	f001 fc5c 	bl	23ff824 <atexit>
}
 23fdf6c:	4802      	ldr	r0, [pc, #8]	; (23fdf78 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fdf6e:	bd10      	pop	{r4, pc}
 23fdf70:	1007ae88 	.word	0x1007ae88
 23fdf74:	023fdd29 	.word	0x023fdd29
 23fdf78:	1007adc4 	.word	0x1007adc4

023fdf7c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fdf7c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fdf7e:	4c08      	ldr	r4, [pc, #32]	; (23fdfa0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fdf80:	e8d4 3f8f 	ldab	r3, [r4]
 23fdf84:	07db      	lsls	r3, r3, #31
 23fdf86:	d409      	bmi.n	23fdf9c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fdf88:	4620      	mov	r0, r4
 23fdf8a:	f7ff f87b 	bl	23fd084 <__cxa_guard_acquire>
 23fdf8e:	b128      	cbz	r0, 23fdf9c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fdf90:	4620      	mov	r0, r4
 23fdf92:	f7ff f87c 	bl	23fd08e <__cxa_guard_release>
 23fdf96:	4803      	ldr	r0, [pc, #12]	; (23fdfa4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fdf98:	f001 fc44 	bl	23ff824 <atexit>
    return &factory;
}
 23fdf9c:	4802      	ldr	r0, [pc, #8]	; (23fdfa8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fdf9e:	bd10      	pop	{r4, pc}
 23fdfa0:	1007ae8c 	.word	0x1007ae8c
 23fdfa4:	023fdd81 	.word	0x023fdd81
 23fdfa8:	1007adc8 	.word	0x1007adc8

023fdfac <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fdfac:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fdfae:	2500      	movs	r5, #0
 23fdfb0:	4604      	mov	r4, r0
 23fdfb2:	e9c0 5500 	strd	r5, r5, [r0]
 23fdfb6:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fdfba:	6085      	str	r5, [r0, #8]
 23fdfbc:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fdfbe:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fdfc2:	f7ff fa21 	bl	23fd408 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fdfc6:	f7ff ffc1 	bl	23fdf4c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fdfca:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fdfcc:	f7ff ffd6 	bl	23fdf7c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fdfd0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fdfd2:	6220      	str	r0, [r4, #32]
}
 23fdfd4:	4620      	mov	r0, r4
 23fdfd6:	bd38      	pop	{r3, r4, r5, pc}

023fdfd8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fdfd8:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fdfda:	4c0a      	ldr	r4, [pc, #40]	; (23fe004 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fdfdc:	e8d4 3f8f 	ldab	r3, [r4]
 23fdfe0:	07db      	lsls	r3, r3, #31
 23fdfe2:	d40c      	bmi.n	23fdffe <_ZN5spark10LogManager8instanceEv+0x26>
 23fdfe4:	4620      	mov	r0, r4
 23fdfe6:	f7ff f84d 	bl	23fd084 <__cxa_guard_acquire>
 23fdfea:	b140      	cbz	r0, 23fdffe <_ZN5spark10LogManager8instanceEv+0x26>
 23fdfec:	4806      	ldr	r0, [pc, #24]	; (23fe008 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fdfee:	f7ff ffdd 	bl	23fdfac <_ZN5spark10LogManagerC1Ev>
 23fdff2:	4620      	mov	r0, r4
 23fdff4:	f7ff f84b 	bl	23fd08e <__cxa_guard_release>
 23fdff8:	4804      	ldr	r0, [pc, #16]	; (23fe00c <_ZN5spark10LogManager8instanceEv+0x34>)
 23fdffa:	f001 fc13 	bl	23ff824 <atexit>
    return &mgr;
}
 23fdffe:	4802      	ldr	r0, [pc, #8]	; (23fe008 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fe000:	bd10      	pop	{r4, pc}
 23fe002:	bf00      	nop
 23fe004:	1007ae84 	.word	0x1007ae84
 23fe008:	1007ae94 	.word	0x1007ae94
 23fe00c:	023fe54d 	.word	0x023fe54d

023fe010 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fe010:	2300      	movs	r3, #0
 23fe012:	4a02      	ldr	r2, [pc, #8]	; (23fe01c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fe014:	4902      	ldr	r1, [pc, #8]	; (23fe020 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fe016:	4803      	ldr	r0, [pc, #12]	; (23fe024 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fe018:	f7ff bb54 	b.w	23fd6c4 <log_set_callbacks>
 23fe01c:	023fe335 	.word	0x023fe335
 23fe020:	023fe2c1 	.word	0x023fe2c1
 23fe024:	023fe241 	.word	0x023fe241

023fe028 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fe028:	2300      	movs	r3, #0
 23fe02a:	461a      	mov	r2, r3
 23fe02c:	4619      	mov	r1, r3
 23fe02e:	4618      	mov	r0, r3
 23fe030:	f7ff bb48 	b.w	23fd6c4 <log_set_callbacks>

023fe034 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fe034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe036:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fe038:	688d      	ldr	r5, [r1, #8]
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fe03a:	4668      	mov	r0, sp
 23fe03c:	f7ff fcfa 	bl	23fda34 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fe040:	466a      	mov	r2, sp
 23fe042:	4629      	mov	r1, r5
 23fe044:	4620      	mov	r0, r4
 23fe046:	f001 f8ab 	bl	23ff1a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 23fe04a:	a801      	add	r0, sp, #4
 23fe04c:	f7ff fcfb 	bl	23fda46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe050:	4620      	mov	r0, r4
 23fe052:	b003      	add	sp, #12
 23fe054:	bd30      	pop	{r4, r5, pc}

023fe056 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fe056:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe058:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fe05a:	68cd      	ldr	r5, [r1, #12]
 23fe05c:	4668      	mov	r0, sp
 23fe05e:	f7ff fce9 	bl	23fda34 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fe062:	466a      	mov	r2, sp
 23fe064:	4629      	mov	r1, r5
 23fe066:	4620      	mov	r0, r4
 23fe068:	f001 f876 	bl	23ff158 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fe06c:	a801      	add	r0, sp, #4
 23fe06e:	f7ff fcea 	bl	23fda46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe072:	4620      	mov	r0, r4
 23fe074:	b003      	add	sp, #12
 23fe076:	bd30      	pop	{r4, r5, pc}

023fe078 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fe078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe07a:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fe07c:	690d      	ldr	r5, [r1, #16]
 23fe07e:	4668      	mov	r0, sp
 23fe080:	f7ff fcd8 	bl	23fda34 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fe084:	466a      	mov	r2, sp
 23fe086:	4629      	mov	r1, r5
 23fe088:	4620      	mov	r0, r4
 23fe08a:	f001 f80e 	bl	23ff0aa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fe08e:	a801      	add	r0, sp, #4
 23fe090:	f7ff fcd9 	bl	23fda46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe094:	4620      	mov	r0, r4
 23fe096:	b003      	add	sp, #12
 23fe098:	bd30      	pop	{r4, r5, pc}
	...

023fe09c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fe09c:	b570      	push	{r4, r5, r6, lr}
 23fe09e:	b08a      	sub	sp, #40	; 0x28
 23fe0a0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fe0a2:	4601      	mov	r1, r0
 23fe0a4:	a804      	add	r0, sp, #16
 23fe0a6:	f7ff ffc5 	bl	23fe034 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fe0aa:	4e14      	ldr	r6, [pc, #80]	; (23fe0fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fe0ac:	a804      	add	r0, sp, #16
 23fe0ae:	f001 f88f 	bl	23ff1d0 <_ZN5spark18JSONObjectIterator4nextEv>
 23fe0b2:	b1e8      	cbz	r0, 23fe0f0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fe0b4:	4668      	mov	r0, sp
 23fe0b6:	a904      	add	r1, sp, #16
 23fe0b8:	f7ff ffcd 	bl	23fe056 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fe0bc:	4631      	mov	r1, r6
 23fe0be:	9802      	ldr	r0, [sp, #8]
 23fe0c0:	f7ff fe57 	bl	23fdd72 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fe0c4:	4604      	mov	r4, r0
 23fe0c6:	b110      	cbz	r0, 23fe0ce <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fe0c8:	1e2c      	subs	r4, r5, #0
 23fe0ca:	bf18      	it	ne
 23fe0cc:	2401      	movne	r4, #1
 23fe0ce:	a801      	add	r0, sp, #4
 23fe0d0:	f7ff fcb9 	bl	23fda46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe0d4:	2c00      	cmp	r4, #0
 23fe0d6:	d0e9      	beq.n	23fe0ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fe0d8:	4668      	mov	r0, sp
 23fe0da:	a904      	add	r1, sp, #16
 23fe0dc:	f7ff ffcc 	bl	23fe078 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fe0e0:	4668      	mov	r0, sp
 23fe0e2:	f001 f818 	bl	23ff116 <_ZNK5spark9JSONValue5toIntEv>
 23fe0e6:	6028      	str	r0, [r5, #0]
 23fe0e8:	a801      	add	r0, sp, #4
 23fe0ea:	f7ff fcac 	bl	23fda46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe0ee:	e7dd      	b.n	23fe0ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fe0f0:	a805      	add	r0, sp, #20
 23fe0f2:	f7ff fca8 	bl	23fda46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe0f6:	b00a      	add	sp, #40	; 0x28
 23fe0f8:	bd70      	pop	{r4, r5, r6, pc}
 23fe0fa:	bf00      	nop
 23fe0fc:	023ffc28 	.word	0x023ffc28

023fe100 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fe100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe102:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fe104:	4913      	ldr	r1, [pc, #76]	; (23fe154 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fe106:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fe108:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fe10a:	f7fe ff79 	bl	23fd000 <strcmp>
 23fe10e:	b950      	cbnz	r0, 23fe126 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fe110:	f000 ff3a 	bl	23fef88 <_Z16_fetch_usbserialv>
 23fe114:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fe118:	f000 ff26 	bl	23fef68 <_ZN9USBSerial5beginEl>
}
 23fe11c:	b003      	add	sp, #12
 23fe11e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fe122:	f000 bf31 	b.w	23fef88 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fe126:	4620      	mov	r0, r4
 23fe128:	490b      	ldr	r1, [pc, #44]	; (23fe158 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fe12a:	f7fe ff69 	bl	23fd000 <strcmp>
 23fe12e:	b978      	cbnz	r0, 23fe150 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fe130:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fe134:	a901      	add	r1, sp, #4
 23fe136:	4628      	mov	r0, r5
        int baud = 9600;
 23fe138:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fe13a:	f7ff ffaf 	bl	23fe09c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fe13e:	f001 fac7 	bl	23ff6d0 <_Z22__fetch_global_Serial1v>
 23fe142:	9901      	ldr	r1, [sp, #4]
 23fe144:	f001 f972 	bl	23ff42c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fe148:	f001 fac2 	bl	23ff6d0 <_Z22__fetch_global_Serial1v>
}
 23fe14c:	b003      	add	sp, #12
 23fe14e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fe150:	2000      	movs	r0, #0
 23fe152:	e7fb      	b.n	23fe14c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fe154:	023ffc2d 	.word	0x023ffc2d
 23fe158:	023ffc34 	.word	0x023ffc34

023fe15c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fe15c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fe15e:	2614      	movs	r6, #20
 23fe160:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fe164:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fe166:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe16a:	42ae      	cmp	r6, r5
 23fe16c:	d005      	beq.n	23fe17a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fe16e:	f105 0008 	add.w	r0, r5, #8
 23fe172:	f7ff fff3 	bl	23fe15c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe176:	3514      	adds	r5, #20
 23fe178:	e7f7      	b.n	23fe16a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fe17a:	6820      	ldr	r0, [r4, #0]
 23fe17c:	f7ff fbc8 	bl	23fd910 <free>
}
 23fe180:	4620      	mov	r0, r4
 23fe182:	bd70      	pop	{r4, r5, r6, pc}

023fe184 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fe184:	b510      	push	{r4, lr}
 23fe186:	4604      	mov	r4, r0
 23fe188:	300c      	adds	r0, #12
 23fe18a:	f7ff ffe7 	bl	23fe15c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe18e:	4620      	mov	r0, r4
 23fe190:	f7ff fd24 	bl	23fdbdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fe194:	4620      	mov	r0, r4
 23fe196:	bd10      	pop	{r4, pc}

023fe198 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fe198:	b510      	push	{r4, lr}
 23fe19a:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fe19c:	4b03      	ldr	r3, [pc, #12]	; (23fe1ac <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fe19e:	f840 3b04 	str.w	r3, [r0], #4
 23fe1a2:	f7ff ffef 	bl	23fe184 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fe1a6:	4620      	mov	r0, r4
 23fe1a8:	bd10      	pop	{r4, pc}
 23fe1aa:	bf00      	nop
 23fe1ac:	023ffba4 	.word	0x023ffba4

023fe1b0 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fe1b0:	b510      	push	{r4, lr}
 23fe1b2:	4604      	mov	r4, r0
 23fe1b4:	f7ff fff0 	bl	23fe198 <_ZN5spark16StreamLogHandlerD1Ev>
 23fe1b8:	4620      	mov	r0, r4
 23fe1ba:	2124      	movs	r1, #36	; 0x24
 23fe1bc:	f7fe ff53 	bl	23fd066 <_ZdlPvj>
 23fe1c0:	4620      	mov	r0, r4
 23fe1c2:	bd10      	pop	{r4, pc}

023fe1c4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fe1c4:	b510      	push	{r4, lr}
 23fe1c6:	4604      	mov	r4, r0
 23fe1c8:	4b02      	ldr	r3, [pc, #8]	; (23fe1d4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fe1ca:	6003      	str	r3, [r0, #0]
 23fe1cc:	f7ff ffe4 	bl	23fe198 <_ZN5spark16StreamLogHandlerD1Ev>
 23fe1d0:	4620      	mov	r0, r4
 23fe1d2:	bd10      	pop	{r4, pc}
 23fe1d4:	023ffcc0 	.word	0x023ffcc0

023fe1d8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fe1d8:	b510      	push	{r4, lr}
 23fe1da:	4604      	mov	r4, r0
 23fe1dc:	f7ff fff2 	bl	23fe1c4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fe1e0:	4620      	mov	r0, r4
 23fe1e2:	2124      	movs	r1, #36	; 0x24
 23fe1e4:	f7fe ff3f 	bl	23fd066 <_ZdlPvj>
 23fe1e8:	4620      	mov	r0, r4
 23fe1ea:	bd10      	pop	{r4, pc}

023fe1ec <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fe1ec:	680a      	ldr	r2, [r1, #0]
 23fe1ee:	b510      	push	{r4, lr}
 23fe1f0:	6002      	str	r2, [r0, #0]
 23fe1f2:	684a      	ldr	r2, [r1, #4]
 23fe1f4:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fe1f6:	2200      	movs	r2, #0
 23fe1f8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fe1fc:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe1fe:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe200:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fe202:	6084      	str	r4, [r0, #8]
 23fe204:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe206:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe208:	60c4      	str	r4, [r0, #12]
 23fe20a:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe20c:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe20e:	6104      	str	r4, [r0, #16]
 23fe210:	bd10      	pop	{r4, pc}

023fe212 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
 23fe212:	2200      	movs	r2, #0
 23fe214:	e9c0 2200 	strd	r2, r2, [r0]
 23fe218:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fe21a:	b510      	push	{r4, lr}
 23fe21c:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe21e:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe220:	6004      	str	r4, [r0, #0]
 23fe222:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe224:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe226:	6044      	str	r4, [r0, #4]
 23fe228:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe22a:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fe22c:	6084      	str	r4, [r0, #8]
}
 23fe22e:	bd10      	pop	{r4, pc}

023fe230 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fe230:	b510      	push	{r4, lr}
 23fe232:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fe234:	6803      	ldr	r3, [r0, #0]
 23fe236:	6818      	ldr	r0, [r3, #0]
 23fe238:	f7ff f910 	bl	23fd45c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fe23c:	4620      	mov	r0, r4
 23fe23e:	bd10      	pop	{r4, pc}

023fe240 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fe240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe244:	b087      	sub	sp, #28
 23fe246:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fe248:	4b1c      	ldr	r3, [pc, #112]	; (23fe2bc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fe24a:	4680      	mov	r8, r0
 23fe24c:	685b      	ldr	r3, [r3, #4]
 23fe24e:	4689      	mov	r9, r1
 23fe250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fe254:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fe256:	b96b      	cbnz	r3, 23fe274 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fe258:	f7ff febe 	bl	23fdfd8 <_ZN5spark10LogManager8instanceEv>
 23fe25c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fe25e:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fe262:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe264:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fe266:	f7ff fd82 	bl	23fdd6e <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fe26a:	7b23      	ldrb	r3, [r4, #12]
 23fe26c:	b12b      	cbz	r3, 23fe27a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fe26e:	a805      	add	r0, sp, #20
 23fe270:	f7ff ffde 	bl	23fe230 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fe274:	b007      	add	sp, #28
 23fe276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fe27a:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fe27c:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fe280:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fe282:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fe286:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fe28a:	45aa      	cmp	sl, r5
 23fe28c:	d012      	beq.n	23fe2b4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fe28e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fe292:	4631      	mov	r1, r6
 23fe294:	1d38      	adds	r0, r7, #4
 23fe296:	f7ff fdf7 	bl	23fde88 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fe29a:	4581      	cmp	r9, r0
 23fe29c:	d3f5      	bcc.n	23fe28a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fe29e:	9a03      	ldr	r2, [sp, #12]
 23fe2a0:	683b      	ldr	r3, [r7, #0]
 23fe2a2:	9200      	str	r2, [sp, #0]
 23fe2a4:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fe2a8:	464a      	mov	r2, r9
 23fe2aa:	4633      	mov	r3, r6
 23fe2ac:	4641      	mov	r1, r8
 23fe2ae:	4638      	mov	r0, r7
 23fe2b0:	47d8      	blx	fp
 23fe2b2:	e7ea      	b.n	23fe28a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fe2b4:	2300      	movs	r3, #0
 23fe2b6:	7323      	strb	r3, [r4, #12]
 23fe2b8:	e7d9      	b.n	23fe26e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fe2ba:	bf00      	nop
 23fe2bc:	e000ed00 	.word	0xe000ed00

023fe2c0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fe2c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe2c4:	469b      	mov	fp, r3
 23fe2c6:	4b1a      	ldr	r3, [pc, #104]	; (23fe330 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fe2c8:	4680      	mov	r8, r0
 23fe2ca:	685b      	ldr	r3, [r3, #4]
 23fe2cc:	4689      	mov	r9, r1
 23fe2ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fe2d2:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fe2d4:	b96b      	cbnz	r3, 23fe2f2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fe2d6:	f7ff fe7f 	bl	23fdfd8 <_ZN5spark10LogManager8instanceEv>
 23fe2da:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fe2dc:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe2e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe2e2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe2e4:	f7ff fd43 	bl	23fdd6e <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fe2e8:	7b23      	ldrb	r3, [r4, #12]
 23fe2ea:	b12b      	cbz	r3, 23fe2f8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fe2ec:	a801      	add	r0, sp, #4
 23fe2ee:	f7ff ff9f 	bl	23fe230 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fe2f2:	b003      	add	sp, #12
 23fe2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fe2f8:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fe2fa:	b2f6      	uxtb	r6, r6
 23fe2fc:	7323      	strb	r3, [r4, #12]
 23fe2fe:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fe302:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fe306:	4555      	cmp	r5, sl
 23fe308:	d00e      	beq.n	23fe328 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fe30a:	f855 7b04 	ldr.w	r7, [r5], #4
 23fe30e:	4659      	mov	r1, fp
 23fe310:	1d38      	adds	r0, r7, #4
 23fe312:	f7ff fdb9 	bl	23fde88 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fe316:	4286      	cmp	r6, r0
 23fe318:	d3f5      	bcc.n	23fe306 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fe31a:	683b      	ldr	r3, [r7, #0]
 23fe31c:	464a      	mov	r2, r9
 23fe31e:	4641      	mov	r1, r8
 23fe320:	4638      	mov	r0, r7
 23fe322:	68db      	ldr	r3, [r3, #12]
 23fe324:	4798      	blx	r3
 23fe326:	e7ee      	b.n	23fe306 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fe328:	2300      	movs	r3, #0
 23fe32a:	7323      	strb	r3, [r4, #12]
 23fe32c:	e7de      	b.n	23fe2ec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fe32e:	bf00      	nop
 23fe330:	e000ed00 	.word	0xe000ed00

023fe334 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fe334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fe338:	4b16      	ldr	r3, [pc, #88]	; (23fe394 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fe33a:	4605      	mov	r5, r0
 23fe33c:	685b      	ldr	r3, [r3, #4]
 23fe33e:	460f      	mov	r7, r1
 23fe340:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fe344:	bb1b      	cbnz	r3, 23fe38e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fe346:	f7ff fe47 	bl	23fdfd8 <_ZN5spark10LogManager8instanceEv>
 23fe34a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fe34c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe350:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe352:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe354:	f7ff fd0b 	bl	23fdd6e <_ZN14RecursiveMutex4lockEv.isra.0>
 23fe358:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fe35c:	2446      	movs	r4, #70	; 0x46
 23fe35e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fe362:	45b0      	cmp	r8, r6
 23fe364:	d109      	bne.n	23fe37a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fe366:	a801      	add	r0, sp, #4
 23fe368:	f7ff ff62 	bl	23fe230 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fe36c:	42a5      	cmp	r5, r4
 23fe36e:	bfb4      	ite	lt
 23fe370:	2000      	movlt	r0, #0
 23fe372:	2001      	movge	r0, #1
}
 23fe374:	b002      	add	sp, #8
 23fe376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fe37a:	f856 0b04 	ldr.w	r0, [r6], #4
 23fe37e:	4639      	mov	r1, r7
 23fe380:	3004      	adds	r0, #4
 23fe382:	f7ff fd81 	bl	23fde88 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fe386:	4284      	cmp	r4, r0
 23fe388:	bfa8      	it	ge
 23fe38a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fe38c:	e7e9      	b.n	23fe362 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fe38e:	2000      	movs	r0, #0
 23fe390:	e7f0      	b.n	23fe374 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fe392:	bf00      	nop
 23fe394:	e000ed00 	.word	0xe000ed00

023fe398 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe39a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fe39e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe3a0:	4604      	mov	r4, r0
 23fe3a2:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe3a4:	db0d      	blt.n	23fe3c2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fe3a6:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fe3a8:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fe3aa:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fe3ac:	dd04      	ble.n	23fe3b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fe3ae:	00b9      	lsls	r1, r7, #2
 23fe3b0:	f7ff fabc 	bl	23fd92c <realloc>
            if (!d) {
 23fe3b4:	b918      	cbnz	r0, 23fe3be <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fe3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fe3b8:	f7ff faaa 	bl	23fd910 <free>
        T* d = nullptr;
 23fe3bc:	2000      	movs	r0, #0
        data_ = d;
 23fe3be:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fe3c0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fe3c2:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fe3c4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe3c6:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fe3ca:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe3cc:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fe3d0:	1d08      	adds	r0, r1, #4
 23fe3d2:	f001 fa42 	bl	23ff85a <memmove>
    new(p) T(std::move(value));
 23fe3d6:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fe3da:	6863      	ldr	r3, [r4, #4]
    return true;
 23fe3dc:	2001      	movs	r0, #1
    ++size_;
 23fe3de:	3301      	adds	r3, #1
 23fe3e0:	6063      	str	r3, [r4, #4]
    return true;
 23fe3e2:	e7e8      	b.n	23fe3b6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fe3e4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fe3e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe3e6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fe3e8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe3ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe3ee:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fe3f0:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fe3f2:	f7ff fcbc 	bl	23fdd6e <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fe3f6:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fe3fa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fe3fe:	4293      	cmp	r3, r2
 23fe400:	4619      	mov	r1, r3
 23fe402:	d00a      	beq.n	23fe41a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fe404:	6809      	ldr	r1, [r1, #0]
 23fe406:	3304      	adds	r3, #4
 23fe408:	42a9      	cmp	r1, r5
 23fe40a:	d1f8      	bne.n	23fe3fe <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fe40c:	a801      	add	r0, sp, #4
 23fe40e:	f7ff ff0f 	bl	23fe230 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fe412:	2500      	movs	r5, #0
}
 23fe414:	4628      	mov	r0, r5
 23fe416:	b003      	add	sp, #12
 23fe418:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fe41a:	4629      	mov	r1, r5
 23fe41c:	4620      	mov	r0, r4
 23fe41e:	f7ff ffbb 	bl	23fe398 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fe422:	4605      	mov	r5, r0
 23fe424:	2800      	cmp	r0, #0
 23fe426:	d0f1      	beq.n	23fe40c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fe428:	6863      	ldr	r3, [r4, #4]
 23fe42a:	2b01      	cmp	r3, #1
 23fe42c:	d101      	bne.n	23fe432 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fe42e:	f7ff fdef 	bl	23fe010 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe432:	a801      	add	r0, sp, #4
 23fe434:	f7ff fefc 	bl	23fe230 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fe438:	e7ec      	b.n	23fe414 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fe43a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fe43a:	460b      	mov	r3, r1
 23fe43c:	b570      	push	{r4, r5, r6, lr}
 23fe43e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fe440:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fe444:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fe448:	4282      	cmp	r2, r0
 23fe44a:	d00f      	beq.n	23fe46c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fe44c:	4601      	mov	r1, r0
            if (*p == value) {
 23fe44e:	681d      	ldr	r5, [r3, #0]
 23fe450:	f851 6b04 	ldr.w	r6, [r1], #4
 23fe454:	42ae      	cmp	r6, r5
 23fe456:	d107      	bne.n	23fe468 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe458:	1a52      	subs	r2, r2, r1
 23fe45a:	f001 f9fe 	bl	23ff85a <memmove>
    return true;
 23fe45e:	2001      	movs	r0, #1
    --size_;
 23fe460:	6863      	ldr	r3, [r4, #4]
 23fe462:	3b01      	subs	r3, #1
 23fe464:	6063      	str	r3, [r4, #4]
}
 23fe466:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fe468:	4608      	mov	r0, r1
 23fe46a:	e7ed      	b.n	23fe448 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fe46c:	2000      	movs	r0, #0
 23fe46e:	e7fa      	b.n	23fe466 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fe470 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fe470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fe472:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fe474:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe478:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fe47a:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe47c:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fe47e:	f7ff fc76 	bl	23fdd6e <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fe482:	4620      	mov	r0, r4
 23fe484:	a901      	add	r1, sp, #4
 23fe486:	f7ff ffd8 	bl	23fe43a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fe48a:	b118      	cbz	r0, 23fe494 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fe48c:	6863      	ldr	r3, [r4, #4]
 23fe48e:	b90b      	cbnz	r3, 23fe494 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fe490:	f7ff fdca 	bl	23fe028 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe494:	a803      	add	r0, sp, #12
 23fe496:	f7ff fecb 	bl	23fe230 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fe49a:	b004      	add	sp, #16
 23fe49c:	bd10      	pop	{r4, pc}

023fe49e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fe49e:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fe4a0:	b570      	push	{r4, r5, r6, lr}
 23fe4a2:	4604      	mov	r4, r0
 23fe4a4:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fe4a8:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fe4ac:	42ae      	cmp	r6, r5
 23fe4ae:	d015      	beq.n	23fe4dc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fe4b0:	4620      	mov	r0, r4
 23fe4b2:	f105 0110 	add.w	r1, r5, #16
 23fe4b6:	f7ff ffc0 	bl	23fe43a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fe4ba:	6863      	ldr	r3, [r4, #4]
 23fe4bc:	b90b      	cbnz	r3, 23fe4c2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fe4be:	f7ff fdb3 	bl	23fe028 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fe4c2:	69e0      	ldr	r0, [r4, #28]
 23fe4c4:	6929      	ldr	r1, [r5, #16]
 23fe4c6:	6803      	ldr	r3, [r0, #0]
 23fe4c8:	68db      	ldr	r3, [r3, #12]
 23fe4ca:	4798      	blx	r3
        if (h.stream) {
 23fe4cc:	6969      	ldr	r1, [r5, #20]
 23fe4ce:	b119      	cbz	r1, 23fe4d8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fe4d0:	6a20      	ldr	r0, [r4, #32]
 23fe4d2:	6803      	ldr	r3, [r0, #0]
 23fe4d4:	68db      	ldr	r3, [r3, #12]
 23fe4d6:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fe4d8:	3518      	adds	r5, #24
 23fe4da:	e7e7      	b.n	23fe4ac <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fe4dc:	2618      	movs	r6, #24
 23fe4de:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fe4e2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe4e6:	42ae      	cmp	r6, r5
 23fe4e8:	d004      	beq.n	23fe4f4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fe4ea:	4628      	mov	r0, r5
 23fe4ec:	f7ff fad4 	bl	23fda98 <_ZN6StringD1Ev>
 23fe4f0:	3518      	adds	r5, #24
 23fe4f2:	e7f8      	b.n	23fe4e6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fe4f4:	2300      	movs	r3, #0
 23fe4f6:	6163      	str	r3, [r4, #20]
}
 23fe4f8:	bd70      	pop	{r4, r5, r6, pc}

023fe4fa <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fe4fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe4fc:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fe4fe:	f7ff fd93 	bl	23fe028 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe502:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fe506:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe508:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe50a:	f7ff fc30 	bl	23fdd6e <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fe50e:	4620      	mov	r0, r4
 23fe510:	f7ff ffc5 	bl	23fe49e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fe514:	a801      	add	r0, sp, #4
 23fe516:	f7ff fe8b 	bl	23fe230 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fe51a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fe51c:	b108      	cbz	r0, 23fe522 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fe51e:	f7fe ff81 	bl	23fd424 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fe522:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fe526:	2618      	movs	r6, #24
 23fe528:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe52c:	42ae      	cmp	r6, r5
 23fe52e:	d004      	beq.n	23fe53a <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fe530:	4628      	mov	r0, r5
 23fe532:	f7ff fab1 	bl	23fda98 <_ZN6StringD1Ev>
 23fe536:	3518      	adds	r5, #24
 23fe538:	e7f8      	b.n	23fe52c <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fe53a:	6920      	ldr	r0, [r4, #16]
 23fe53c:	f7ff f9e8 	bl	23fd910 <free>
 23fe540:	6820      	ldr	r0, [r4, #0]
 23fe542:	f7ff f9e5 	bl	23fd910 <free>
}
 23fe546:	4620      	mov	r0, r4
 23fe548:	b002      	add	sp, #8
 23fe54a:	bd70      	pop	{r4, r5, r6, pc}

023fe54c <__tcf_2>:
    static LogManager mgr;
 23fe54c:	4801      	ldr	r0, [pc, #4]	; (23fe554 <__tcf_2+0x8>)
 23fe54e:	f7ff bfd4 	b.w	23fe4fa <_ZN5spark10LogManagerD1Ev>
 23fe552:	bf00      	nop
 23fe554:	1007ae94 	.word	0x1007ae94

023fe558 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fe558:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe55a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe55c:	4604      	mov	r4, r0
 23fe55e:	460d      	mov	r5, r1
 23fe560:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe562:	d915      	bls.n	23fe590 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fe564:	4290      	cmp	r0, r2
 23fe566:	d214      	bcs.n	23fe592 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fe568:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fe56c:	1a75      	subs	r5, r6, r1
 23fe56e:	f1a1 0714 	sub.w	r7, r1, #20
 23fe572:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe574:	42b7      	cmp	r7, r6
 23fe576:	d01a      	beq.n	23fe5ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fe578:	b11c      	cbz	r4, 23fe582 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fe57a:	4631      	mov	r1, r6
 23fe57c:	4620      	mov	r0, r4
 23fe57e:	f7ff fe35 	bl	23fe1ec <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fe582:	f106 0008 	add.w	r0, r6, #8
 23fe586:	f7ff fde9 	bl	23fe15c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fe58a:	3e14      	subs	r6, #20
 23fe58c:	3c14      	subs	r4, #20
 23fe58e:	e7f1      	b.n	23fe574 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fe590:	d00d      	beq.n	23fe5ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fe592:	42b5      	cmp	r5, r6
 23fe594:	d00b      	beq.n	23fe5ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fe596:	b11c      	cbz	r4, 23fe5a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fe598:	4629      	mov	r1, r5
 23fe59a:	4620      	mov	r0, r4
 23fe59c:	f7ff fe26 	bl	23fe1ec <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fe5a0:	f105 0008 	add.w	r0, r5, #8
 23fe5a4:	f7ff fdda 	bl	23fe15c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fe5a8:	3514      	adds	r5, #20
 23fe5aa:	3414      	adds	r4, #20
 23fe5ac:	e7f1      	b.n	23fe592 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fe5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe5b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fe5b0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe5b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe5b4:	4604      	mov	r4, r0
 23fe5b6:	460d      	mov	r5, r1
 23fe5b8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe5ba:	d914      	bls.n	23fe5e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fe5bc:	4290      	cmp	r0, r2
 23fe5be:	d213      	bcs.n	23fe5e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fe5c0:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fe5c4:	1a75      	subs	r5, r6, r1
 23fe5c6:	f1a1 0710 	sub.w	r7, r1, #16
 23fe5ca:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe5cc:	42b7      	cmp	r7, r6
 23fe5ce:	d018      	beq.n	23fe602 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fe5d0:	b11c      	cbz	r4, 23fe5da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fe5d2:	4631      	mov	r1, r6
 23fe5d4:	4620      	mov	r0, r4
 23fe5d6:	f7ff fac8 	bl	23fdb6a <_ZN6StringC1EOS_>
                end->~T();
 23fe5da:	4630      	mov	r0, r6
 23fe5dc:	f7ff fa5c 	bl	23fda98 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fe5e0:	3e10      	subs	r6, #16
 23fe5e2:	3c10      	subs	r4, #16
 23fe5e4:	e7f2      	b.n	23fe5cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fe5e6:	d00c      	beq.n	23fe602 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fe5e8:	42b5      	cmp	r5, r6
 23fe5ea:	d00a      	beq.n	23fe602 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fe5ec:	b11c      	cbz	r4, 23fe5f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fe5ee:	4629      	mov	r1, r5
 23fe5f0:	4620      	mov	r0, r4
 23fe5f2:	f7ff faba 	bl	23fdb6a <_ZN6StringC1EOS_>
                p->~T();
 23fe5f6:	4628      	mov	r0, r5
 23fe5f8:	f7ff fa4e 	bl	23fda98 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fe5fc:	3510      	adds	r5, #16
 23fe5fe:	3410      	adds	r4, #16
 23fe600:	e7f2      	b.n	23fe5e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fe602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe604 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fe604:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fe606:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fe608:	4605      	mov	r5, r0
        if (n > 0) {
 23fe60a:	dd11      	ble.n	23fe630 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fe60c:	0130      	lsls	r0, r6, #4
 23fe60e:	f7ff f971 	bl	23fd8f4 <malloc>
            if (!d) {
 23fe612:	4604      	mov	r4, r0
 23fe614:	b158      	cbz	r0, 23fe62e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fe616:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe61a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fe61e:	f7ff ffc7 	bl	23fe5b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fe622:	6828      	ldr	r0, [r5, #0]
 23fe624:	f7ff f974 	bl	23fd910 <free>
        return true;
 23fe628:	2001      	movs	r0, #1
        data_ = d;
 23fe62a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fe62c:	60ae      	str	r6, [r5, #8]
    }
 23fe62e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fe630:	2400      	movs	r4, #0
 23fe632:	e7f6      	b.n	23fe622 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fe634 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fe634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe638:	4690      	mov	r8, r2
        capacity_(0) {
 23fe63a:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fe63c:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fe63e:	b095      	sub	sp, #84	; 0x54
 23fe640:	9103      	str	r1, [sp, #12]
    return size_;
 23fe642:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fe646:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fe648:	4299      	cmp	r1, r3
        capacity_(0) {
 23fe64a:	e9c0 3300 	strd	r3, r3, [r0]
 23fe64e:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fe652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fe656:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fe65a:	7602      	strb	r2, [r0, #24]
 23fe65c:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fe65e:	dc23      	bgt.n	23fe6a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fe660:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fe664:	2314      	movs	r3, #20
 23fe666:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fe66a:	42af      	cmp	r7, r5
 23fe66c:	d03b      	beq.n	23fe6e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fe66e:	4629      	mov	r1, r5
 23fe670:	a80b      	add	r0, sp, #44	; 0x2c
 23fe672:	f7ff fa7a 	bl	23fdb6a <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fe676:	a90b      	add	r1, sp, #44	; 0x2c
 23fe678:	a80f      	add	r0, sp, #60	; 0x3c
 23fe67a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fe67c:	f7ff fa75 	bl	23fdb6a <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe680:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fe684:	4299      	cmp	r1, r3
 23fe686:	da1b      	bge.n	23fe6c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fe688:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fe68a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fe68c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fe690:	4631      	mov	r1, r6
 23fe692:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fe696:	f106 0010 	add.w	r0, r6, #16
 23fe69a:	f7ff ff89 	bl	23fe5b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fe69e:	b9ee      	cbnz	r6, 23fe6dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fe6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fe6a2:	3301      	adds	r3, #1
 23fe6a4:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fe6a6:	e011      	b.n	23fe6cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fe6a8:	a808      	add	r0, sp, #32
 23fe6aa:	f7ff ffab 	bl	23fe604 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fe6ae:	2800      	cmp	r0, #0
 23fe6b0:	d1d6      	bne.n	23fe660 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fe6b2:	a808      	add	r0, sp, #32
 23fe6b4:	f7ff fa92 	bl	23fdbdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fe6b8:	4620      	mov	r0, r4
 23fe6ba:	b015      	add	sp, #84	; 0x54
 23fe6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe6c0:	3101      	adds	r1, #1
 23fe6c2:	a808      	add	r0, sp, #32
 23fe6c4:	f7ff ff9e 	bl	23fe604 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fe6c8:	2800      	cmp	r0, #0
 23fe6ca:	d1dd      	bne.n	23fe688 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fe6cc:	a80f      	add	r0, sp, #60	; 0x3c
 23fe6ce:	f7ff f9e3 	bl	23fda98 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fe6d2:	a80b      	add	r0, sp, #44	; 0x2c
 23fe6d4:	f7ff f9e0 	bl	23fda98 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fe6d8:	3514      	adds	r5, #20
 23fe6da:	e7c6      	b.n	23fe66a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fe6dc:	4630      	mov	r0, r6
 23fe6de:	a90f      	add	r1, sp, #60	; 0x3c
 23fe6e0:	f7ff fa43 	bl	23fdb6a <_ZN6StringC1EOS_>
 23fe6e4:	e7dc      	b.n	23fe6a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fe6e6:	2600      	movs	r6, #0
 23fe6e8:	f04f 0914 	mov.w	r9, #20
 23fe6ec:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fe6f0:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fe6f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fe6f6:	429e      	cmp	r6, r3
 23fe6f8:	da7c      	bge.n	23fe7f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23fe6fa:	0133      	lsls	r3, r6, #4
 23fe6fc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fe6fe:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fe700:	b90b      	cbnz	r3, 23fe706 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fe702:	3601      	adds	r6, #1
 23fe704:	e7f5      	b.n	23fe6f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fe706:	2300      	movs	r3, #0
 23fe708:	9307      	str	r3, [sp, #28]
 23fe70a:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fe70e:	ad0b      	add	r5, sp, #44	; 0x2c
 23fe710:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fe712:	a907      	add	r1, sp, #28
 23fe714:	a806      	add	r0, sp, #24
 23fe716:	f7ff fb0a 	bl	23fdd2e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fe71a:	4682      	mov	sl, r0
 23fe71c:	2800      	cmp	r0, #0
 23fe71e:	d0f0      	beq.n	23fe702 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fe720:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe724:	4601      	mov	r1, r0
            bool found = false;
 23fe726:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe72a:	4628      	mov	r0, r5
 23fe72c:	9a07      	ldr	r2, [sp, #28]
 23fe72e:	f10d 0317 	add.w	r3, sp, #23
 23fe732:	f7ff fb6d 	bl	23fde10 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe736:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe73a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe73c:	2f00      	cmp	r7, #0
 23fe73e:	d14a      	bne.n	23fe7d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fe740:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fe744:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fe748:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fe74c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fe750:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fe754:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fe758:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe75a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fe75e:	4293      	cmp	r3, r2
 23fe760:	db17      	blt.n	23fe792 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fe762:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fe766:	f1ba 0f00 	cmp.w	sl, #0
 23fe76a:	dd30      	ble.n	23fe7ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fe76c:	fb09 f00a 	mul.w	r0, r9, sl
 23fe770:	f7ff f8c0 	bl	23fd8f4 <malloc>
            if (!d) {
 23fe774:	4683      	mov	fp, r0
 23fe776:	b360      	cbz	r0, 23fe7d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fe778:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe77c:	fb09 1202 	mla	r2, r9, r2, r1
 23fe780:	f7ff feea 	bl	23fe558 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fe784:	6828      	ldr	r0, [r5, #0]
 23fe786:	f7ff f8c3 	bl	23fd910 <free>
        data_ = d;
 23fe78a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fe78e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fe792:	682b      	ldr	r3, [r5, #0]
 23fe794:	9a01      	ldr	r2, [sp, #4]
 23fe796:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fe79a:	686a      	ldr	r2, [r5, #4]
 23fe79c:	4651      	mov	r1, sl
 23fe79e:	fb09 3202 	mla	r2, r9, r2, r3
 23fe7a2:	f10a 0014 	add.w	r0, sl, #20
 23fe7a6:	f7ff fed7 	bl	23fe558 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fe7aa:	f1ba 0f00 	cmp.w	sl, #0
 23fe7ae:	d003      	beq.n	23fe7b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fe7b0:	4650      	mov	r0, sl
 23fe7b2:	a90f      	add	r1, sp, #60	; 0x3c
 23fe7b4:	f7ff fd1a 	bl	23fe1ec <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fe7b8:	686b      	ldr	r3, [r5, #4]
 23fe7ba:	3301      	adds	r3, #1
 23fe7bc:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fe7be:	a811      	add	r0, sp, #68	; 0x44
 23fe7c0:	f7ff fccc 	bl	23fe15c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe7c4:	b13f      	cbz	r7, 23fe7d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fe7c6:	a80b      	add	r0, sp, #44	; 0x2c
 23fe7c8:	f7ff fcc8 	bl	23fe15c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe7cc:	e771      	b.n	23fe6b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fe7ce:	46bb      	mov	fp, r7
 23fe7d0:	e7d8      	b.n	23fe784 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe7d2:	2701      	movs	r7, #1
 23fe7d4:	e7f3      	b.n	23fe7be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fe7d6:	9b01      	ldr	r3, [sp, #4]
 23fe7d8:	682d      	ldr	r5, [r5, #0]
 23fe7da:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fe7de:	9b06      	ldr	r3, [sp, #24]
 23fe7e0:	781b      	ldrb	r3, [r3, #0]
 23fe7e2:	b92b      	cbnz	r3, 23fe7f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fe7e4:	f8d8 3000 	ldr.w	r3, [r8]
 23fe7e8:	9a02      	ldr	r2, [sp, #8]
 23fe7ea:	4413      	add	r3, r2
 23fe7ec:	7c1b      	ldrb	r3, [r3, #16]
 23fe7ee:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fe7f0:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fe7f2:	e78e      	b.n	23fe712 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe7f4:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe7f6:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe7f8:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe7fa:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe7fc:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe7fe:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fe800:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fe802:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe804:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe806:	60a2      	str	r2, [r4, #8]
 23fe808:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fe80a:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe80c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe80e:	60e2      	str	r2, [r4, #12]
 23fe810:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fe812:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe814:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe816:	6122      	str	r2, [r4, #16]
 23fe818:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fe81a:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fe81c:	9b03      	ldr	r3, [sp, #12]
 23fe81e:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fe820:	6162      	str	r2, [r4, #20]
 23fe822:	7623      	strb	r3, [r4, #24]
 23fe824:	e7cf      	b.n	23fe7c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fe828 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe828:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe82a:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fe82c:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe82e:	4617      	mov	r7, r2
 23fe830:	b087      	sub	sp, #28
 23fe832:	460d      	mov	r5, r1
        stream_(&stream) {
 23fe834:	4668      	mov	r0, sp
 23fe836:	4619      	mov	r1, r3
 23fe838:	f7fe fcfa 	bl	23fd230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fe83c:	4b0b      	ldr	r3, [pc, #44]	; (23fe86c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fe83e:	4669      	mov	r1, sp
 23fe840:	f846 3b04 	str.w	r3, [r6], #4
 23fe844:	a803      	add	r0, sp, #12
 23fe846:	f7fe fcf3 	bl	23fd230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fe84a:	4639      	mov	r1, r7
 23fe84c:	aa03      	add	r2, sp, #12
 23fe84e:	4630      	mov	r0, r6
 23fe850:	f7ff fef0 	bl	23fe634 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe854:	a803      	add	r0, sp, #12
 23fe856:	f7fe fcaa 	bl	23fd1ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fe85a:	4668      	mov	r0, sp
 23fe85c:	f7fe fca7 	bl	23fd1ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fe860:	4620      	mov	r0, r4
        stream_(&stream) {
 23fe862:	4b03      	ldr	r3, [pc, #12]	; (23fe870 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fe864:	6225      	str	r5, [r4, #32]
 23fe866:	6023      	str	r3, [r4, #0]
}
 23fe868:	b007      	add	sp, #28
 23fe86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fe86c:	023ffba4 	.word	0x023ffba4
 23fe870:	023ffca8 	.word	0x023ffca8

023fe874 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fe874:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe876:	460f      	mov	r7, r1
 23fe878:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe87a:	4638      	mov	r0, r7
 23fe87c:	491c      	ldr	r1, [pc, #112]	; (23fe8f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fe87e:	4616      	mov	r6, r2
 23fe880:	461d      	mov	r5, r3
 23fe882:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe884:	f7fe fbbc 	bl	23fd000 <strcmp>
 23fe888:	b9c0      	cbnz	r0, 23fe8bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fe88a:	b1a4      	cbz	r4, 23fe8b6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fe88c:	4629      	mov	r1, r5
 23fe88e:	a801      	add	r0, sp, #4
 23fe890:	f7ff fcbf 	bl	23fe212 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe894:	2024      	movs	r0, #36	; 0x24
 23fe896:	4917      	ldr	r1, [pc, #92]	; (23fe8f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe898:	f000 ffc0 	bl	23ff81c <_ZnwjRKSt9nothrow_t>
 23fe89c:	4605      	mov	r5, r0
 23fe89e:	b130      	cbz	r0, 23fe8ae <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fe8a0:	ab01      	add	r3, sp, #4
 23fe8a2:	4632      	mov	r2, r6
 23fe8a4:	4621      	mov	r1, r4
 23fe8a6:	f7ff ffbf 	bl	23fe828 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe8aa:	4b13      	ldr	r3, [pc, #76]	; (23fe8f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fe8ac:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe8ae:	a801      	add	r0, sp, #4
 23fe8b0:	f7fe fc7d 	bl	23fd1ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fe8b4:	462c      	mov	r4, r5
}
 23fe8b6:	4620      	mov	r0, r4
 23fe8b8:	b005      	add	sp, #20
 23fe8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fe8bc:	4638      	mov	r0, r7
 23fe8be:	490f      	ldr	r1, [pc, #60]	; (23fe8fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fe8c0:	f7fe fb9e 	bl	23fd000 <strcmp>
 23fe8c4:	b990      	cbnz	r0, 23fe8ec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fe8c6:	2c00      	cmp	r4, #0
 23fe8c8:	d0f5      	beq.n	23fe8b6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe8ca:	4629      	mov	r1, r5
 23fe8cc:	a801      	add	r0, sp, #4
 23fe8ce:	f7ff fca0 	bl	23fe212 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe8d2:	2024      	movs	r0, #36	; 0x24
 23fe8d4:	4907      	ldr	r1, [pc, #28]	; (23fe8f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe8d6:	f000 ffa1 	bl	23ff81c <_ZnwjRKSt9nothrow_t>
 23fe8da:	4605      	mov	r5, r0
 23fe8dc:	2800      	cmp	r0, #0
 23fe8de:	d0e6      	beq.n	23fe8ae <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fe8e0:	4632      	mov	r2, r6
 23fe8e2:	4621      	mov	r1, r4
 23fe8e4:	ab01      	add	r3, sp, #4
 23fe8e6:	f7ff ff9f 	bl	23fe828 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe8ea:	e7e0      	b.n	23fe8ae <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fe8ec:	2400      	movs	r4, #0
 23fe8ee:	e7e2      	b.n	23fe8b6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fe8f0:	023ffc3c 	.word	0x023ffc3c
 23fe8f4:	023ffe38 	.word	0x023ffe38
 23fe8f8:	023ffcc0 	.word	0x023ffcc0
 23fe8fc:	023ffc40 	.word	0x023ffc40

023fe900 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fe900:	4b01      	ldr	r3, [pc, #4]	; (23fe908 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fe902:	4a02      	ldr	r2, [pc, #8]	; (23fe90c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fe904:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fe906:	4770      	bx	lr
 23fe908:	1007ae90 	.word	0x1007ae90
 23fe90c:	023ffc51 	.word	0x023ffc51

023fe910 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe914:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fe916:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe91a:	4604      	mov	r4, r0
 23fe91c:	460e      	mov	r6, r1
 23fe91e:	4617      	mov	r7, r2
 23fe920:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fe922:	f000 fb31 	bl	23fef88 <_Z16_fetch_usbserialv>
 23fe926:	4581      	cmp	r9, r0
 23fe928:	d04d      	beq.n	23fe9c6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fe92a:	792b      	ldrb	r3, [r5, #4]
 23fe92c:	0719      	lsls	r1, r3, #28
 23fe92e:	d504      	bpl.n	23fe93a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fe930:	4620      	mov	r0, r4
 23fe932:	696a      	ldr	r2, [r5, #20]
 23fe934:	4954      	ldr	r1, [pc, #336]	; (23fea88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fe936:	f7ff fad0 	bl	23fdeda <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fe93a:	f1b8 0f00 	cmp.w	r8, #0
 23fe93e:	d00d      	beq.n	23fe95c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fe940:	215b      	movs	r1, #91	; 0x5b
 23fe942:	4620      	mov	r0, r4
 23fe944:	f7ff fa58 	bl	23fddf8 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fe948:	4641      	mov	r1, r8
 23fe94a:	4620      	mov	r0, r4
 23fe94c:	f7ff fa45 	bl	23fddda <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fe950:	6823      	ldr	r3, [r4, #0]
 23fe952:	2202      	movs	r2, #2
 23fe954:	4620      	mov	r0, r4
 23fe956:	68db      	ldr	r3, [r3, #12]
 23fe958:	494c      	ldr	r1, [pc, #304]	; (23fea8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fe95a:	4798      	blx	r3
    if (attr.has_file) {
 23fe95c:	792b      	ldrb	r3, [r5, #4]
 23fe95e:	07da      	lsls	r2, r3, #31
 23fe960:	d524      	bpl.n	23fe9ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fe962:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fe966:	212f      	movs	r1, #47	; 0x2f
 23fe968:	4640      	mov	r0, r8
 23fe96a:	f000 fffa 	bl	23ff962 <strrchr>
    if (s1) {
 23fe96e:	b108      	cbz	r0, 23fe974 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fe970:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fe974:	4641      	mov	r1, r8
 23fe976:	4620      	mov	r0, r4
 23fe978:	f7ff fa2f 	bl	23fddda <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fe97c:	792b      	ldrb	r3, [r5, #4]
 23fe97e:	079b      	lsls	r3, r3, #30
 23fe980:	d508      	bpl.n	23fe994 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fe982:	213a      	movs	r1, #58	; 0x3a
 23fe984:	4620      	mov	r0, r4
 23fe986:	f7ff fa37 	bl	23fddf8 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fe98a:	4620      	mov	r0, r4
 23fe98c:	68ea      	ldr	r2, [r5, #12]
 23fe98e:	4940      	ldr	r1, [pc, #256]	; (23fea90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fe990:	f7ff faa3 	bl	23fdeda <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fe994:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fe996:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fe998:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fe99c:	4620      	mov	r0, r4
            write(", ", 2);
 23fe99e:	f04f 0202 	mov.w	r2, #2
 23fe9a2:	68db      	ldr	r3, [r3, #12]
 23fe9a4:	bf14      	ite	ne
 23fe9a6:	493b      	ldrne	r1, [pc, #236]	; (23fea94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fe9a8:	493b      	ldreq	r1, [pc, #236]	; (23fea98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe9aa:	4798      	blx	r3
    if (attr.has_function) {
 23fe9ac:	792b      	ldrb	r3, [r5, #4]
 23fe9ae:	0758      	lsls	r0, r3, #29
 23fe9b0:	d51d      	bpl.n	23fe9ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe9b2:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe9b4:	460b      	mov	r3, r1
 23fe9b6:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fe9b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe9bc:	b160      	cbz	r0, 23fe9d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fe9be:	2820      	cmp	r0, #32
 23fe9c0:	d108      	bne.n	23fe9d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fe9c2:	4619      	mov	r1, r3
 23fe9c4:	e7f7      	b.n	23fe9b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fe9c6:	4835      	ldr	r0, [pc, #212]	; (23fea9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fe9c8:	f000 fdbd 	bl	23ff546 <_ZN5spark12NetworkClass9listeningEv>
 23fe9cc:	2800      	cmp	r0, #0
 23fe9ce:	d0ac      	beq.n	23fe92a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fe9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fe9d4:	2828      	cmp	r0, #40	; 0x28
 23fe9d6:	d1ee      	bne.n	23fe9b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fe9d8:	6823      	ldr	r3, [r4, #0]
 23fe9da:	1a52      	subs	r2, r2, r1
 23fe9dc:	4620      	mov	r0, r4
 23fe9de:	68db      	ldr	r3, [r3, #12]
 23fe9e0:	4798      	blx	r3
        write("(): ", 4);
 23fe9e2:	6823      	ldr	r3, [r4, #0]
 23fe9e4:	2204      	movs	r2, #4
 23fe9e6:	4620      	mov	r0, r4
 23fe9e8:	68db      	ldr	r3, [r3, #12]
 23fe9ea:	492d      	ldr	r1, [pc, #180]	; (23feaa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fe9ec:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fe9ee:	2100      	movs	r1, #0
 23fe9f0:	4638      	mov	r0, r7
 23fe9f2:	f7fe fe59 	bl	23fd6a8 <log_level_name>
 23fe9f6:	4601      	mov	r1, r0
    write(s);
 23fe9f8:	4620      	mov	r0, r4
 23fe9fa:	f7ff f9ee 	bl	23fddda <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fe9fe:	6823      	ldr	r3, [r4, #0]
 23fea00:	2202      	movs	r2, #2
 23fea02:	4620      	mov	r0, r4
 23fea04:	68db      	ldr	r3, [r3, #12]
 23fea06:	4924      	ldr	r1, [pc, #144]	; (23fea98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fea08:	4798      	blx	r3
    if (msg) {
 23fea0a:	b11e      	cbz	r6, 23fea14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fea0c:	4631      	mov	r1, r6
 23fea0e:	4620      	mov	r0, r4
 23fea10:	f7ff f9e3 	bl	23fddda <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fea14:	792b      	ldrb	r3, [r5, #4]
 23fea16:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fea1a:	d02c      	beq.n	23fea76 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fea1c:	6823      	ldr	r3, [r4, #0]
 23fea1e:	4921      	ldr	r1, [pc, #132]	; (23feaa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fea20:	68db      	ldr	r3, [r3, #12]
 23fea22:	2202      	movs	r2, #2
 23fea24:	4620      	mov	r0, r4
 23fea26:	4798      	blx	r3
        if (attr.has_code) {
 23fea28:	792b      	ldrb	r3, [r5, #4]
 23fea2a:	06d9      	lsls	r1, r3, #27
 23fea2c:	d50a      	bpl.n	23fea44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fea2e:	6823      	ldr	r3, [r4, #0]
 23fea30:	2207      	movs	r2, #7
 23fea32:	4620      	mov	r0, r4
 23fea34:	491c      	ldr	r1, [pc, #112]	; (23feaa8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fea36:	68db      	ldr	r3, [r3, #12]
 23fea38:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fea3a:	4620      	mov	r0, r4
 23fea3c:	69aa      	ldr	r2, [r5, #24]
 23fea3e:	491b      	ldr	r1, [pc, #108]	; (23feaac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fea40:	f7ff fa4b 	bl	23fdeda <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fea44:	792b      	ldrb	r3, [r5, #4]
 23fea46:	069a      	lsls	r2, r3, #26
 23fea48:	d511      	bpl.n	23fea6e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fea4a:	06db      	lsls	r3, r3, #27
 23fea4c:	d505      	bpl.n	23fea5a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fea4e:	6823      	ldr	r3, [r4, #0]
 23fea50:	2202      	movs	r2, #2
 23fea52:	4620      	mov	r0, r4
 23fea54:	68db      	ldr	r3, [r3, #12]
 23fea56:	490f      	ldr	r1, [pc, #60]	; (23fea94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fea58:	4798      	blx	r3
            write("details = ", 10);
 23fea5a:	6823      	ldr	r3, [r4, #0]
 23fea5c:	4620      	mov	r0, r4
 23fea5e:	4914      	ldr	r1, [pc, #80]	; (23feab0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fea60:	220a      	movs	r2, #10
 23fea62:	68db      	ldr	r3, [r3, #12]
 23fea64:	4798      	blx	r3
            write(attr.details);
 23fea66:	4620      	mov	r0, r4
 23fea68:	69e9      	ldr	r1, [r5, #28]
 23fea6a:	f7ff f9b6 	bl	23fddda <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fea6e:	215d      	movs	r1, #93	; 0x5d
 23fea70:	4620      	mov	r0, r4
 23fea72:	f7ff f9c1 	bl	23fddf8 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fea76:	6823      	ldr	r3, [r4, #0]
 23fea78:	4620      	mov	r0, r4
}
 23fea7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fea7e:	2202      	movs	r2, #2
 23fea80:	68db      	ldr	r3, [r3, #12]
 23fea82:	490c      	ldr	r1, [pc, #48]	; (23feab4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fea84:	4718      	bx	r3
 23fea86:	bf00      	nop
 23fea88:	023ffc55 	.word	0x023ffc55
 23fea8c:	023ffc5c 	.word	0x023ffc5c
 23fea90:	023ffc5f 	.word	0x023ffc5f
 23fea94:	023ffc62 	.word	0x023ffc62
 23fea98:	023ffc67 	.word	0x023ffc67
 23fea9c:	1007af0c 	.word	0x1007af0c
 23feaa0:	023ffc65 	.word	0x023ffc65
 23feaa4:	023ffc6a 	.word	0x023ffc6a
 23feaa8:	023ffc6d 	.word	0x023ffc6d
 23feaac:	023ffc75 	.word	0x023ffc75
 23feab0:	023ffc78 	.word	0x023ffc78
 23feab4:	023ffc83 	.word	0x023ffc83

023feab8 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23feab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23feabc:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23feabe:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23feac0:	460d      	mov	r5, r1
 23feac2:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23feac4:	f000 fa60 	bl	23fef88 <_Z16_fetch_usbserialv>
 23feac8:	4287      	cmp	r7, r0
 23feaca:	d007      	beq.n	23feadc <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23feacc:	6a20      	ldr	r0, [r4, #32]
 23feace:	4632      	mov	r2, r6
 23fead0:	6803      	ldr	r3, [r0, #0]
 23fead2:	4629      	mov	r1, r5
}
 23fead4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fead8:	68db      	ldr	r3, [r3, #12]
 23feada:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23feadc:	4803      	ldr	r0, [pc, #12]	; (23feaec <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23feade:	f000 fd32 	bl	23ff546 <_ZN5spark12NetworkClass9listeningEv>
 23feae2:	2800      	cmp	r0, #0
 23feae4:	d0f2      	beq.n	23feacc <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23feae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23feaea:	bf00      	nop
 23feaec:	1007af0c 	.word	0x1007af0c

023feaf0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23feaf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23feaf4:	b085      	sub	sp, #20
    return stream_;
 23feaf6:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23feafa:	4605      	mov	r5, r0
 23feafc:	460f      	mov	r7, r1
 23feafe:	4690      	mov	r8, r2
 23feb00:	461e      	mov	r6, r3
 23feb02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23feb04:	f000 fa40 	bl	23fef88 <_Z16_fetch_usbserialv>
 23feb08:	4581      	cmp	r9, r0
 23feb0a:	d105      	bne.n	23feb18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23feb0c:	4849      	ldr	r0, [pc, #292]	; (23fec34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23feb0e:	f000 fd1a 	bl	23ff546 <_ZN5spark12NetworkClass9listeningEv>
 23feb12:	2800      	cmp	r0, #0
 23feb14:	f040 808a 	bne.w	23fec2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23feb18:	f04f 0900 	mov.w	r9, #0
 23feb1c:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
 23feb1e:	4a46      	ldr	r2, [pc, #280]	; (23fec38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23feb20:	4668      	mov	r0, sp
 23feb22:	e9cd 3902 	strd	r3, r9, [sp, #8]
 23feb26:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
 23feb28:	f88d 9004 	strb.w	r9, [sp, #4]
 23feb2c:	f000 fb79 	bl	23ff222 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23feb30:	4649      	mov	r1, r9
 23feb32:	4640      	mov	r0, r8
 23feb34:	f7fe fdb8 	bl	23fd6a8 <log_level_name>
 23feb38:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23feb3a:	4940      	ldr	r1, [pc, #256]	; (23fec3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23feb3c:	2201      	movs	r2, #1
 23feb3e:	4668      	mov	r0, sp
 23feb40:	f000 fbfe 	bl	23ff340 <_ZN5spark10JSONWriter4nameEPKcj>
 23feb44:	4641      	mov	r1, r8
 23feb46:	f7ff f93a 	bl	23fddbe <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23feb4a:	b13f      	cbz	r7, 23feb5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
 23feb4c:	493c      	ldr	r1, [pc, #240]	; (23fec40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23feb4e:	2201      	movs	r2, #1
 23feb50:	4668      	mov	r0, sp
 23feb52:	f000 fbf5 	bl	23ff340 <_ZN5spark10JSONWriter4nameEPKcj>
 23feb56:	4639      	mov	r1, r7
 23feb58:	f7ff f931 	bl	23fddbe <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23feb5c:	b13e      	cbz	r6, 23feb6e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
 23feb5e:	4939      	ldr	r1, [pc, #228]	; (23fec44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23feb60:	2201      	movs	r2, #1
 23feb62:	4668      	mov	r0, sp
 23feb64:	f000 fbec 	bl	23ff340 <_ZN5spark10JSONWriter4nameEPKcj>
 23feb68:	4631      	mov	r1, r6
 23feb6a:	f7ff f928 	bl	23fddbe <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23feb6e:	7923      	ldrb	r3, [r4, #4]
 23feb70:	07df      	lsls	r7, r3, #31
 23feb72:	d50e      	bpl.n	23feb92 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
 23feb74:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23feb76:	212f      	movs	r1, #47	; 0x2f
 23feb78:	4630      	mov	r0, r6
 23feb7a:	f000 fef2 	bl	23ff962 <strrchr>
    if (s1) {
 23feb7e:	b100      	cbz	r0, 23feb82 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
 23feb80:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23feb82:	4931      	ldr	r1, [pc, #196]	; (23fec48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23feb84:	2201      	movs	r2, #1
 23feb86:	4668      	mov	r0, sp
 23feb88:	f000 fbda 	bl	23ff340 <_ZN5spark10JSONWriter4nameEPKcj>
 23feb8c:	4631      	mov	r1, r6
 23feb8e:	f7ff f916 	bl	23fddbe <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23feb92:	7923      	ldrb	r3, [r4, #4]
 23feb94:	079e      	lsls	r6, r3, #30
 23feb96:	d507      	bpl.n	23feba8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
 23feb98:	492c      	ldr	r1, [pc, #176]	; (23fec4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23feb9a:	2202      	movs	r2, #2
 23feb9c:	4668      	mov	r0, sp
 23feb9e:	f000 fbcf 	bl	23ff340 <_ZN5spark10JSONWriter4nameEPKcj>
 23feba2:	68e1      	ldr	r1, [r4, #12]
 23feba4:	f000 fb4a 	bl	23ff23c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23feba8:	7923      	ldrb	r3, [r4, #4]
 23febaa:	0758      	lsls	r0, r3, #29
 23febac:	d514      	bpl.n	23febd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23febae:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23febb0:	4633      	mov	r3, r6
 23febb2:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23febb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 23febb8:	b12a      	cbz	r2, 23febc6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
 23febba:	2a20      	cmp	r2, #32
 23febbc:	d101      	bne.n	23febc2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
 23febbe:	461e      	mov	r6, r3
 23febc0:	e7f7      	b.n	23febb2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
 23febc2:	2a28      	cmp	r2, #40	; 0x28
 23febc4:	d1f5      	bne.n	23febb2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
 23febc6:	2202      	movs	r2, #2
 23febc8:	4921      	ldr	r1, [pc, #132]	; (23fec50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23febca:	4668      	mov	r0, sp
 23febcc:	f000 fbb8 	bl	23ff340 <_ZN5spark10JSONWriter4nameEPKcj>
 23febd0:	4631      	mov	r1, r6
 23febd2:	1bba      	subs	r2, r7, r6
 23febd4:	f000 fbc4 	bl	23ff360 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23febd8:	7923      	ldrb	r3, [r4, #4]
 23febda:	0719      	lsls	r1, r3, #28
 23febdc:	d507      	bpl.n	23febee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
 23febde:	491d      	ldr	r1, [pc, #116]	; (23fec54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23febe0:	2201      	movs	r2, #1
 23febe2:	4668      	mov	r0, sp
 23febe4:	f000 fbac 	bl	23ff340 <_ZN5spark10JSONWriter4nameEPKcj>
 23febe8:	6961      	ldr	r1, [r4, #20]
 23febea:	f000 fb39 	bl	23ff260 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23febee:	7923      	ldrb	r3, [r4, #4]
 23febf0:	06da      	lsls	r2, r3, #27
 23febf2:	d507      	bpl.n	23fec04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23febf4:	4918      	ldr	r1, [pc, #96]	; (23fec58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23febf6:	2204      	movs	r2, #4
 23febf8:	4668      	mov	r0, sp
 23febfa:	f000 fba1 	bl	23ff340 <_ZN5spark10JSONWriter4nameEPKcj>
 23febfe:	69a1      	ldr	r1, [r4, #24]
 23fec00:	f000 fb1c 	bl	23ff23c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fec04:	7923      	ldrb	r3, [r4, #4]
 23fec06:	069b      	lsls	r3, r3, #26
 23fec08:	d507      	bpl.n	23fec1a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fec0a:	4914      	ldr	r1, [pc, #80]	; (23fec5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fec0c:	2206      	movs	r2, #6
 23fec0e:	4668      	mov	r0, sp
 23fec10:	f000 fb96 	bl	23ff340 <_ZN5spark10JSONWriter4nameEPKcj>
 23fec14:	69e1      	ldr	r1, [r4, #28]
 23fec16:	f7ff f8d2 	bl	23fddbe <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fec1a:	4668      	mov	r0, sp
 23fec1c:	f000 faeb 	bl	23ff1f6 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fec20:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fec22:	2202      	movs	r2, #2
 23fec24:	6803      	ldr	r3, [r0, #0]
 23fec26:	490e      	ldr	r1, [pc, #56]	; (23fec60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fec28:	68db      	ldr	r3, [r3, #12]
 23fec2a:	4798      	blx	r3
}
 23fec2c:	b005      	add	sp, #20
 23fec2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fec32:	bf00      	nop
 23fec34:	1007af0c 	.word	0x1007af0c
 23fec38:	023ffc18 	.word	0x023ffc18
 23fec3c:	023ffc32 	.word	0x023ffc32
 23fec40:	023ffc86 	.word	0x023ffc86
 23fec44:	023ffecb 	.word	0x023ffecb
 23fec48:	023ffc88 	.word	0x023ffc88
 23fec4c:	023ffc8a 	.word	0x023ffc8a
 23fec50:	023ffc8d 	.word	0x023ffc8d
 23fec54:	023ffc90 	.word	0x023ffc90
 23fec58:	023ffc92 	.word	0x023ffc92
 23fec5c:	023ffc97 	.word	0x023ffc97
 23fec60:	023ffc83 	.word	0x023ffc83

023fec64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fec64:	4b02      	ldr	r3, [pc, #8]	; (23fec70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fec66:	681a      	ldr	r2, [r3, #0]
 23fec68:	4b02      	ldr	r3, [pc, #8]	; (23fec74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fec6a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fec6c:	4770      	bx	lr
 23fec6e:	bf00      	nop
 23fec70:	1007adcc 	.word	0x1007adcc
 23fec74:	1007aebc 	.word	0x1007aebc

023fec78 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23fec78:	2200      	movs	r2, #0
 23fec7a:	4b01      	ldr	r3, [pc, #4]	; (23fec80 <_GLOBAL__sub_I_RGB+0x8>)
 23fec7c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fec7e:	4770      	bx	lr
 23fec80:	1007aec0 	.word	0x1007aec0

023fec84 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fec84:	4b01      	ldr	r3, [pc, #4]	; (23fec8c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fec86:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fec88:	4770      	bx	lr
 23fec8a:	bf00      	nop
 23fec8c:	1007add0 	.word	0x1007add0

023fec90 <serialEventRun>:
{
 23fec90:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fec92:	4b0f      	ldr	r3, [pc, #60]	; (23fecd0 <serialEventRun+0x40>)
 23fec94:	b143      	cbz	r3, 23feca8 <serialEventRun+0x18>
 23fec96:	f000 f977 	bl	23fef88 <_Z16_fetch_usbserialv>
 23fec9a:	6803      	ldr	r3, [r0, #0]
 23fec9c:	691b      	ldr	r3, [r3, #16]
 23fec9e:	4798      	blx	r3
 23feca0:	2800      	cmp	r0, #0
 23feca2:	dd01      	ble.n	23feca8 <serialEventRun+0x18>
        serialEvent();
 23feca4:	e000      	b.n	23feca8 <serialEventRun+0x18>
 23feca6:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23feca8:	4b0a      	ldr	r3, [pc, #40]	; (23fecd4 <serialEventRun+0x44>)
 23fecaa:	b143      	cbz	r3, 23fecbe <serialEventRun+0x2e>
 23fecac:	f000 fd10 	bl	23ff6d0 <_Z22__fetch_global_Serial1v>
 23fecb0:	6803      	ldr	r3, [r0, #0]
 23fecb2:	691b      	ldr	r3, [r3, #16]
 23fecb4:	4798      	blx	r3
 23fecb6:	2800      	cmp	r0, #0
 23fecb8:	dd01      	ble.n	23fecbe <serialEventRun+0x2e>
        serialEvent1();
 23fecba:	e000      	b.n	23fecbe <serialEventRun+0x2e>
 23fecbc:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fecbe:	4b06      	ldr	r3, [pc, #24]	; (23fecd8 <serialEventRun+0x48>)
 23fecc0:	b10b      	cbz	r3, 23fecc6 <serialEventRun+0x36>
 23fecc2:	f000 fd4b 	bl	23ff75c <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fecc6:	4b05      	ldr	r3, [pc, #20]	; (23fecdc <serialEventRun+0x4c>)
 23fecc8:	b10b      	cbz	r3, 23fecce <serialEventRun+0x3e>
 23fecca:	f000 fd7d 	bl	23ff7c8 <_Z15serialEventRun3v>
}
 23fecce:	bd08      	pop	{r3, pc}
	...

023fece0 <_post_loop>:
{
 23fece0:	b508      	push	{r3, lr}
	serialEventRun();
 23fece2:	f7ff ffd5 	bl	23fec90 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fece6:	f7fe fb65 	bl	23fd3b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fecea:	4b01      	ldr	r3, [pc, #4]	; (23fecf0 <_post_loop+0x10>)
 23fecec:	6018      	str	r0, [r3, #0]
}
 23fecee:	bd08      	pop	{r3, pc}
 23fecf0:	1007af5c 	.word	0x1007af5c

023fecf4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fecf4:	4805      	ldr	r0, [pc, #20]	; (23fed0c <_Z33system_initialize_user_backup_ramv+0x18>)
 23fecf6:	4a06      	ldr	r2, [pc, #24]	; (23fed10 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fecf8:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fecfa:	1a12      	subs	r2, r2, r0
 23fecfc:	4905      	ldr	r1, [pc, #20]	; (23fed14 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fecfe:	f000 fd9f 	bl	23ff840 <memcpy>
    __backup_sram_signature = signature;
 23fed02:	4b05      	ldr	r3, [pc, #20]	; (23fed18 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fed04:	4a05      	ldr	r2, [pc, #20]	; (23fed1c <_Z33system_initialize_user_backup_ramv+0x28>)
 23fed06:	601a      	str	r2, [r3, #0]
}
 23fed08:	bd08      	pop	{r3, pc}
 23fed0a:	bf00      	nop
 23fed0c:	1007b400 	.word	0x1007b400
 23fed10:	1007b404 	.word	0x1007b404
 23fed14:	085ff120 	.word	0x085ff120
 23fed18:	1007b400 	.word	0x1007b400
 23fed1c:	9a271c1e 	.word	0x9a271c1e

023fed20 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fed20:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fed22:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fed24:	461a      	mov	r2, r3
 23fed26:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fed2a:	9300      	str	r3, [sp, #0]
 23fed2c:	f7fe fd02 	bl	23fd734 <system_ctrl_set_result>
}
 23fed30:	b003      	add	sp, #12
 23fed32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fed38 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fed38:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fed3a:	8843      	ldrh	r3, [r0, #2]
 23fed3c:	2b0a      	cmp	r3, #10
 23fed3e:	d008      	beq.n	23fed52 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fed40:	2b50      	cmp	r3, #80	; 0x50
 23fed42:	d10b      	bne.n	23fed5c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fed44:	4b09      	ldr	r3, [pc, #36]	; (23fed6c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fed46:	681b      	ldr	r3, [r3, #0]
 23fed48:	b14b      	cbz	r3, 23fed5e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fed4a:	b003      	add	sp, #12
 23fed4c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fed50:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fed52:	f7ff ffe5 	bl	23fed20 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fed56:	b003      	add	sp, #12
 23fed58:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fed5c:	2300      	movs	r3, #0
 23fed5e:	461a      	mov	r2, r3
 23fed60:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fed64:	9300      	str	r3, [sp, #0]
 23fed66:	f7fe fce5 	bl	23fd734 <system_ctrl_set_result>
}
 23fed6a:	e7f4      	b.n	23fed56 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fed6c:	1007aed4 	.word	0x1007aed4

023fed70 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fed70:	2100      	movs	r1, #0
{
 23fed72:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fed74:	4811      	ldr	r0, [pc, #68]	; (23fedbc <module_user_init_hook+0x4c>)
 23fed76:	f7fe fe11 	bl	23fd99c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fed7a:	4b11      	ldr	r3, [pc, #68]	; (23fedc0 <module_user_init_hook+0x50>)
 23fed7c:	681a      	ldr	r2, [r3, #0]
 23fed7e:	4b11      	ldr	r3, [pc, #68]	; (23fedc4 <module_user_init_hook+0x54>)
 23fed80:	429a      	cmp	r2, r3
 23fed82:	bf0c      	ite	eq
 23fed84:	2201      	moveq	r2, #1
 23fed86:	2200      	movne	r2, #0
 23fed88:	4b0f      	ldr	r3, [pc, #60]	; (23fedc8 <module_user_init_hook+0x58>)
 23fed8a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fed8c:	d001      	beq.n	23fed92 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fed8e:	f7ff ffb1 	bl	23fecf4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fed92:	f7fe faf3 	bl	23fd37c <HAL_RNG_GetRandomNumber>
 23fed96:	4604      	mov	r4, r0
    srand(seed);
 23fed98:	f000 fd82 	bl	23ff8a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fed9c:	4b0b      	ldr	r3, [pc, #44]	; (23fedcc <module_user_init_hook+0x5c>)
 23fed9e:	b113      	cbz	r3, 23feda6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23feda0:	4620      	mov	r0, r4
 23feda2:	e000      	b.n	23feda6 <module_user_init_hook+0x36>
 23feda4:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23feda6:	2100      	movs	r1, #0
 23feda8:	4808      	ldr	r0, [pc, #32]	; (23fedcc <module_user_init_hook+0x5c>)
 23fedaa:	f7fe fd95 	bl	23fd8d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fedae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fedb2:	2100      	movs	r1, #0
 23fedb4:	4806      	ldr	r0, [pc, #24]	; (23fedd0 <module_user_init_hook+0x60>)
 23fedb6:	f7fe bcaf 	b.w	23fd718 <system_ctrl_set_app_request_handler>
 23fedba:	bf00      	nop
 23fedbc:	023fec85 	.word	0x023fec85
 23fedc0:	1007b400 	.word	0x1007b400
 23fedc4:	9a271c1e 	.word	0x9a271c1e
 23fedc8:	1007aed0 	.word	0x1007aed0
 23fedcc:	00000000 	.word	0x00000000
 23fedd0:	023fed39 	.word	0x023fed39

023fedd4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fedd4:	4770      	bx	lr

023fedd6 <_ZN9IPAddressD0Ev>:
 23fedd6:	b510      	push	{r4, lr}
 23fedd8:	4604      	mov	r4, r0
 23fedda:	2118      	movs	r1, #24
 23feddc:	f7fe f943 	bl	23fd066 <_ZdlPvj>
 23fede0:	4620      	mov	r0, r4
 23fede2:	bd10      	pop	{r4, pc}

023fede4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fede4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fede6:	7d03      	ldrb	r3, [r0, #20]
{
 23fede8:	460e      	mov	r6, r1
	if (address.v==6) {
 23fedea:	2b06      	cmp	r3, #6
 23fedec:	f04f 0400 	mov.w	r4, #0
{
 23fedf0:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fedf2:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fedf6:	d012      	beq.n	23fee1e <_ZNK9IPAddress7printToER5Print+0x3a>
 23fedf8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fedfc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fee00:	220a      	movs	r2, #10
 23fee02:	4630      	mov	r0, r6
 23fee04:	f7fe ff41 	bl	23fdc8a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fee08:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fee0a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fee0c:	d019      	beq.n	23fee42 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fee0e:	2c00      	cmp	r4, #0
 23fee10:	d0f4      	beq.n	23fedfc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fee12:	212e      	movs	r1, #46	; 0x2e
 23fee14:	4630      	mov	r0, r6
 23fee16:	f7fe ff35 	bl	23fdc84 <_ZN5Print5printEc>
 23fee1a:	4404      	add	r4, r0
 23fee1c:	e7ee      	b.n	23fedfc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fee1e:	232f      	movs	r3, #47	; 0x2f
 23fee20:	466a      	mov	r2, sp
 23fee22:	4639      	mov	r1, r7
 23fee24:	200a      	movs	r0, #10
		buf[0] = 0;
 23fee26:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fee2a:	f7fe fb25 	bl	23fd478 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fee2e:	4668      	mov	r0, sp
 23fee30:	f7fe f8f0 	bl	23fd014 <strlen>
 23fee34:	6833      	ldr	r3, [r6, #0]
 23fee36:	4602      	mov	r2, r0
 23fee38:	4669      	mov	r1, sp
 23fee3a:	4630      	mov	r0, r6
 23fee3c:	68db      	ldr	r3, [r3, #12]
 23fee3e:	4798      	blx	r3
 23fee40:	4604      	mov	r4, r0
    }
    return n;
}
 23fee42:	4620      	mov	r0, r4
 23fee44:	b00d      	add	sp, #52	; 0x34
 23fee46:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fee48 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fee48:	b510      	push	{r4, lr}
 23fee4a:	4604      	mov	r4, r0
 23fee4c:	4b04      	ldr	r3, [pc, #16]	; (23fee60 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fee4e:	2211      	movs	r2, #17
 23fee50:	2100      	movs	r1, #0
 23fee52:	f840 3b04 	str.w	r3, [r0], #4
 23fee56:	f000 fd1a 	bl	23ff88e <memset>
}
 23fee5a:	4620      	mov	r0, r4
 23fee5c:	bd10      	pop	{r4, pc}
 23fee5e:	bf00      	nop
 23fee60:	023ffd24 	.word	0x023ffd24

023fee64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fee64:	4603      	mov	r3, r0
 23fee66:	4a07      	ldr	r2, [pc, #28]	; (23fee84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fee68:	b510      	push	{r4, lr}
 23fee6a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fee6e:	f101 0210 	add.w	r2, r1, #16
 23fee72:	f851 4b04 	ldr.w	r4, [r1], #4
 23fee76:	4291      	cmp	r1, r2
 23fee78:	f843 4b04 	str.w	r4, [r3], #4
 23fee7c:	d1f9      	bne.n	23fee72 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fee7e:	780a      	ldrb	r2, [r1, #0]
 23fee80:	701a      	strb	r2, [r3, #0]
}
 23fee82:	bd10      	pop	{r4, pc}
 23fee84:	023ffd24 	.word	0x023ffd24

023fee88 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fee88:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fee8a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fee8e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fee92:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fee96:	2304      	movs	r3, #4
 23fee98:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fee9c:	6041      	str	r1, [r0, #4]
 23fee9e:	7503      	strb	r3, [r0, #20]
}
 23feea0:	bd10      	pop	{r4, pc}
	...

023feea4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23feea4:	b507      	push	{r0, r1, r2, lr}
 23feea6:	4b06      	ldr	r3, [pc, #24]	; (23feec0 <_ZN9IPAddressC1EPKh+0x1c>)
 23feea8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23feeaa:	78cb      	ldrb	r3, [r1, #3]
 23feeac:	9300      	str	r3, [sp, #0]
 23feeae:	788b      	ldrb	r3, [r1, #2]
 23feeb0:	784a      	ldrb	r2, [r1, #1]
 23feeb2:	7809      	ldrb	r1, [r1, #0]
 23feeb4:	f7ff ffe8 	bl	23fee88 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23feeb8:	b003      	add	sp, #12
 23feeba:	f85d fb04 	ldr.w	pc, [sp], #4
 23feebe:	bf00      	nop
 23feec0:	023ffd24 	.word	0x023ffd24

023feec4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23feec4:	7441      	strb	r1, [r0, #17]
}
 23feec6:	4770      	bx	lr

023feec8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23feec8:	4770      	bx	lr

023feeca <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23feeca:	4770      	bx	lr

023feecc <_ZN9USBSerial4readEv>:
{
 23feecc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23feece:	2100      	movs	r1, #0
 23feed0:	7c00      	ldrb	r0, [r0, #16]
 23feed2:	f7fe fbb1 	bl	23fd638 <HAL_USB_USART_Receive_Data>
}
 23feed6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23feeda:	bd08      	pop	{r3, pc}

023feedc <_ZN9USBSerial4peekEv>:
{
 23feedc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23feede:	2101      	movs	r1, #1
 23feee0:	7c00      	ldrb	r0, [r0, #16]
 23feee2:	f7fe fba9 	bl	23fd638 <HAL_USB_USART_Receive_Data>
}
 23feee6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23feeea:	bd08      	pop	{r3, pc}

023feeec <_ZN9USBSerial17availableForWriteEv>:
{
 23feeec:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23feeee:	7c00      	ldrb	r0, [r0, #16]
 23feef0:	f7fe fb94 	bl	23fd61c <HAL_USB_USART_Available_Data_For_Write>
}
 23feef4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23feef8:	bd08      	pop	{r3, pc}

023feefa <_ZN9USBSerial9availableEv>:
{
 23feefa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23feefc:	7c00      	ldrb	r0, [r0, #16]
 23feefe:	f7fe fb7f 	bl	23fd600 <HAL_USB_USART_Available_Data>
}
 23fef02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fef06:	bd08      	pop	{r3, pc}

023fef08 <_ZN9USBSerial5writeEh>:
{
 23fef08:	b513      	push	{r0, r1, r4, lr}
 23fef0a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fef0c:	7c00      	ldrb	r0, [r0, #16]
{
 23fef0e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fef10:	f7fe fb84 	bl	23fd61c <HAL_USB_USART_Available_Data_For_Write>
 23fef14:	2800      	cmp	r0, #0
 23fef16:	9901      	ldr	r1, [sp, #4]
 23fef18:	dc01      	bgt.n	23fef1e <_ZN9USBSerial5writeEh+0x16>
 23fef1a:	7c60      	ldrb	r0, [r4, #17]
 23fef1c:	b120      	cbz	r0, 23fef28 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fef1e:	7c20      	ldrb	r0, [r4, #16]
 23fef20:	f7fe fb98 	bl	23fd654 <HAL_USB_USART_Send_Data>
 23fef24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fef28:	b002      	add	sp, #8
 23fef2a:	bd10      	pop	{r4, pc}

023fef2c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fef2c:	7c00      	ldrb	r0, [r0, #16]
 23fef2e:	f7fe bb9f 	b.w	23fd670 <HAL_USB_USART_Flush_Data>

023fef32 <_ZN9USBSerialD0Ev>:
 23fef32:	b510      	push	{r4, lr}
 23fef34:	4604      	mov	r4, r0
 23fef36:	2114      	movs	r1, #20
 23fef38:	f7fe f895 	bl	23fd066 <_ZdlPvj>
 23fef3c:	4620      	mov	r0, r4
 23fef3e:	bd10      	pop	{r4, pc}

023fef40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fef40:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fef42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fef46:	4604      	mov	r4, r0
 23fef48:	4608      	mov	r0, r1
 23fef4a:	2100      	movs	r1, #0
 23fef4c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fef50:	4b04      	ldr	r3, [pc, #16]	; (23fef64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fef52:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fef54:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fef56:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fef58:	4611      	mov	r1, r2
  _blocking = true;
 23fef5a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fef5c:	f7fe fb26 	bl	23fd5ac <HAL_USB_USART_Init>
}
 23fef60:	4620      	mov	r0, r4
 23fef62:	bd10      	pop	{r4, pc}
 23fef64:	023ffd38 	.word	0x023ffd38

023fef68 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fef68:	2200      	movs	r2, #0
 23fef6a:	7c00      	ldrb	r0, [r0, #16]
 23fef6c:	f7fe bb2c 	b.w	23fd5c8 <HAL_USB_USART_Begin>

023fef70 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fef70:	7c00      	ldrb	r0, [r0, #16]
 23fef72:	f7fe bb37 	b.w	23fd5e4 <HAL_USB_USART_End>

023fef76 <_Z19acquireSerialBufferv>:
{
 23fef76:	b510      	push	{r4, lr}
 23fef78:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fef7a:	2214      	movs	r2, #20
 23fef7c:	2100      	movs	r1, #0
 23fef7e:	f000 fc86 	bl	23ff88e <memset>
}
 23fef82:	4620      	mov	r0, r4
 23fef84:	bd10      	pop	{r4, pc}
	...

023fef88 <_Z16_fetch_usbserialv>:
{
 23fef88:	b510      	push	{r4, lr}
 23fef8a:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fef8c:	a803      	add	r0, sp, #12
 23fef8e:	f7ff fff2 	bl	23fef76 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fef92:	4c0c      	ldr	r4, [pc, #48]	; (23fefc4 <_Z16_fetch_usbserialv+0x3c>)
 23fef94:	e8d4 1f8f 	ldab	r1, [r4]
 23fef98:	f011 0101 	ands.w	r1, r1, #1
 23fef9c:	d10f      	bne.n	23fefbe <_Z16_fetch_usbserialv+0x36>
 23fef9e:	4620      	mov	r0, r4
 23fefa0:	9101      	str	r1, [sp, #4]
 23fefa2:	f7fe f86f 	bl	23fd084 <__cxa_guard_acquire>
 23fefa6:	9901      	ldr	r1, [sp, #4]
 23fefa8:	b148      	cbz	r0, 23fefbe <_Z16_fetch_usbserialv+0x36>
 23fefaa:	aa03      	add	r2, sp, #12
 23fefac:	4806      	ldr	r0, [pc, #24]	; (23fefc8 <_Z16_fetch_usbserialv+0x40>)
 23fefae:	f7ff ffc7 	bl	23fef40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fefb2:	4620      	mov	r0, r4
 23fefb4:	f7fe f86b 	bl	23fd08e <__cxa_guard_release>
 23fefb8:	4804      	ldr	r0, [pc, #16]	; (23fefcc <_Z16_fetch_usbserialv+0x44>)
 23fefba:	f000 fc33 	bl	23ff824 <atexit>
	return _usbserial;
}
 23fefbe:	4802      	ldr	r0, [pc, #8]	; (23fefc8 <_Z16_fetch_usbserialv+0x40>)
 23fefc0:	b008      	add	sp, #32
 23fefc2:	bd10      	pop	{r4, pc}
 23fefc4:	1007aed8 	.word	0x1007aed8
 23fefc8:	1007aedc 	.word	0x1007aedc
 23fefcc:	023feec9 	.word	0x023feec9

023fefd0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fefd0:	2201      	movs	r2, #1
 23fefd2:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fefd6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fefda:	4618      	mov	r0, r3
 23fefdc:	2901      	cmp	r1, #1
 23fefde:	d108      	bne.n	23feff2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fefe0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fefe4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fefe8:	3a01      	subs	r2, #1
 23fefea:	f103 0310 	add.w	r3, r3, #16
 23fefee:	d1f2      	bne.n	23fefd6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23feff0:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23feff2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23feff4:	bf04      	itt	eq
 23feff6:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23feffa:	1852      	addeq	r2, r2, r1
 23feffc:	e7f4      	b.n	23fefe8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023feffe <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23feffe:	b40e      	push	{r1, r2, r3}
 23ff000:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ff002:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23ff004:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23ff006:	af00      	add	r7, sp, #0
 23ff008:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23ff00c:	f855 2b04 	ldr.w	r2, [r5], #4
 23ff010:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23ff012:	462b      	mov	r3, r5
 23ff014:	1878      	adds	r0, r7, r1
 23ff016:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23ff018:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23ff01a:	f7fe fc95 	bl	23fd948 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23ff01e:	280f      	cmp	r0, #15
 23ff020:	687a      	ldr	r2, [r7, #4]
 23ff022:	d91a      	bls.n	23ff05a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23ff024:	f100 0308 	add.w	r3, r0, #8
 23ff028:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23ff02c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23ff02e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23ff032:	1c41      	adds	r1, r0, #1
 23ff034:	462b      	mov	r3, r5
 23ff036:	4668      	mov	r0, sp
        va_start(args, fmt);
 23ff038:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23ff03a:	f7fe fc85 	bl	23fd948 <vsnprintf>
        if (n > 0) {
 23ff03e:	1e02      	subs	r2, r0, #0
 23ff040:	dd04      	ble.n	23ff04c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23ff042:	6823      	ldr	r3, [r4, #0]
 23ff044:	4669      	mov	r1, sp
 23ff046:	4620      	mov	r0, r4
 23ff048:	689b      	ldr	r3, [r3, #8]
 23ff04a:	4798      	blx	r3
 23ff04c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23ff04e:	3720      	adds	r7, #32
 23ff050:	46bd      	mov	sp, r7
 23ff052:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23ff056:	b003      	add	sp, #12
 23ff058:	4770      	bx	lr
    } else if (n > 0) {
 23ff05a:	2800      	cmp	r0, #0
 23ff05c:	d0f7      	beq.n	23ff04e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23ff05e:	6823      	ldr	r3, [r4, #0]
 23ff060:	4602      	mov	r2, r0
 23ff062:	689b      	ldr	r3, [r3, #8]
 23ff064:	4620      	mov	r0, r4
 23ff066:	f107 0110 	add.w	r1, r7, #16
 23ff06a:	4798      	blx	r3
}
 23ff06c:	e7ef      	b.n	23ff04e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023ff06e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23ff06e:	b538      	push	{r3, r4, r5, lr}
 23ff070:	680b      	ldr	r3, [r1, #0]
 23ff072:	4604      	mov	r4, r0
 23ff074:	6003      	str	r3, [r0, #0]
 23ff076:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23ff078:	6843      	ldr	r3, [r0, #4]
 23ff07a:	429d      	cmp	r5, r3
 23ff07c:	d008      	beq.n	23ff090 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23ff07e:	b115      	cbz	r5, 23ff086 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23ff080:	686b      	ldr	r3, [r5, #4]
 23ff082:	3301      	adds	r3, #1
 23ff084:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23ff086:	6860      	ldr	r0, [r4, #4]
 23ff088:	b108      	cbz	r0, 23ff08e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23ff08a:	f7fe fd93 	bl	23fdbb4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23ff08e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23ff090:	bd38      	pop	{r3, r4, r5, pc}

023ff092 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 23ff092:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23ff094:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23ff096:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23ff09a:	2201      	movs	r2, #1
 23ff09c:	689b      	ldr	r3, [r3, #8]
 23ff09e:	f10d 0107 	add.w	r1, sp, #7
 23ff0a2:	4798      	blx	r3
}
 23ff0a4:	b003      	add	sp, #12
 23ff0a6:	f85d fb04 	ldr.w	pc, [sp], #4

023ff0aa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23ff0aa:	460b      	mov	r3, r1
 23ff0ac:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23ff0ae:	2200      	movs	r2, #0
 23ff0b0:	b510      	push	{r4, lr}
 23ff0b2:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23ff0b4:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23ff0b8:	6083      	str	r3, [r0, #8]
    if (t) {
 23ff0ba:	b90b      	cbnz	r3, 23ff0c0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23ff0bc:	4620      	mov	r0, r4
 23ff0be:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23ff0c0:	f7ff ffd5 	bl	23ff06e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23ff0c4:	e7fa      	b.n	23ff0bc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023ff0c6 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23ff0c6:	6883      	ldr	r3, [r0, #8]
 23ff0c8:	b1eb      	cbz	r3, 23ff106 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23ff0ca:	781a      	ldrb	r2, [r3, #0]
 23ff0cc:	2a03      	cmp	r2, #3
 23ff0ce:	d81a      	bhi.n	23ff106 <_ZNK5spark9JSONValue4typeEv+0x40>
 23ff0d0:	e8df f002 	tbb	[pc, r2]
 23ff0d4:	1b021704 	.word	0x1b021704
 23ff0d8:	2005      	movs	r0, #5
 23ff0da:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23ff0dc:	6802      	ldr	r2, [r0, #0]
 23ff0de:	685b      	ldr	r3, [r3, #4]
 23ff0e0:	6852      	ldr	r2, [r2, #4]
 23ff0e2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23ff0e4:	282d      	cmp	r0, #45	; 0x2d
 23ff0e6:	d012      	beq.n	23ff10e <_ZNK5spark9JSONValue4typeEv+0x48>
 23ff0e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23ff0ec:	2b09      	cmp	r3, #9
 23ff0ee:	d90e      	bls.n	23ff10e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23ff0f0:	2874      	cmp	r0, #116	; 0x74
 23ff0f2:	d00e      	beq.n	23ff112 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23ff0f4:	2866      	cmp	r0, #102	; 0x66
 23ff0f6:	d00c      	beq.n	23ff112 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23ff0f8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23ff0fc:	4258      	negs	r0, r3
 23ff0fe:	4158      	adcs	r0, r3
 23ff100:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23ff102:	2006      	movs	r0, #6
 23ff104:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23ff106:	2000      	movs	r0, #0
 23ff108:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23ff10a:	2004      	movs	r0, #4
 23ff10c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23ff10e:	2003      	movs	r0, #3
 23ff110:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23ff112:	2002      	movs	r0, #2
}
 23ff114:	4770      	bx	lr

023ff116 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23ff116:	b510      	push	{r4, lr}
 23ff118:	4604      	mov	r4, r0
    switch (type()) {
 23ff11a:	f7ff ffd4 	bl	23ff0c6 <_ZNK5spark9JSONValue4typeEv>
 23ff11e:	2802      	cmp	r0, #2
 23ff120:	d00e      	beq.n	23ff140 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23ff122:	1ec3      	subs	r3, r0, #3
 23ff124:	b2db      	uxtb	r3, r3
 23ff126:	2b01      	cmp	r3, #1
 23ff128:	d814      	bhi.n	23ff154 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23ff12a:	6822      	ldr	r2, [r4, #0]
 23ff12c:	68a3      	ldr	r3, [r4, #8]
 23ff12e:	6850      	ldr	r0, [r2, #4]
 23ff130:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23ff132:	220a      	movs	r2, #10
}
 23ff134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23ff138:	2100      	movs	r1, #0
 23ff13a:	4418      	add	r0, r3
 23ff13c:	f000 bca8 	b.w	23ffa90 <strtol>
        const char* const s = d_->json + t_->start;
 23ff140:	6822      	ldr	r2, [r4, #0]
 23ff142:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23ff144:	6852      	ldr	r2, [r2, #4]
 23ff146:	685b      	ldr	r3, [r3, #4]
 23ff148:	5cd0      	ldrb	r0, [r2, r3]
 23ff14a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23ff14e:	4258      	negs	r0, r3
 23ff150:	4158      	adcs	r0, r3
}
 23ff152:	bd10      	pop	{r4, pc}
    switch (type()) {
 23ff154:	2000      	movs	r0, #0
 23ff156:	e7fc      	b.n	23ff152 <_ZNK5spark9JSONValue5toIntEv+0x3c>

023ff158 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23ff158:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23ff15a:	2300      	movs	r3, #0
 23ff15c:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23ff15e:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23ff162:	480e      	ldr	r0, [pc, #56]	; (23ff19c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23ff164:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23ff168:	b1a9      	cbz	r1, 23ff196 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23ff16a:	780b      	ldrb	r3, [r1, #0]
 23ff16c:	2b03      	cmp	r3, #3
 23ff16e:	d006      	beq.n	23ff17e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23ff170:	b98b      	cbnz	r3, 23ff196 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23ff172:	6813      	ldr	r3, [r2, #0]
 23ff174:	6858      	ldr	r0, [r3, #4]
 23ff176:	684b      	ldr	r3, [r1, #4]
 23ff178:	5cc3      	ldrb	r3, [r0, r3]
 23ff17a:	2b6e      	cmp	r3, #110	; 0x6e
 23ff17c:	d007      	beq.n	23ff18e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23ff17e:	6813      	ldr	r3, [r2, #0]
 23ff180:	684d      	ldr	r5, [r1, #4]
 23ff182:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23ff184:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23ff186:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23ff188:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23ff18a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23ff18c:	60e3      	str	r3, [r4, #12]
 23ff18e:	4611      	mov	r1, r2
 23ff190:	4620      	mov	r0, r4
 23ff192:	f7ff ff6c 	bl	23ff06e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23ff196:	4620      	mov	r0, r4
 23ff198:	bd38      	pop	{r3, r4, r5, pc}
 23ff19a:	bf00      	nop
 23ff19c:	023ffc85 	.word	0x023ffc85

023ff1a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23ff1a0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23ff1a2:	2500      	movs	r5, #0
 23ff1a4:	460b      	mov	r3, r1
 23ff1a6:	4604      	mov	r4, r0
 23ff1a8:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23ff1aa:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23ff1ae:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23ff1b2:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23ff1b6:	b14b      	cbz	r3, 23ff1cc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23ff1b8:	781a      	ldrb	r2, [r3, #0]
 23ff1ba:	2a01      	cmp	r2, #1
 23ff1bc:	d106      	bne.n	23ff1cc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23ff1be:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23ff1c2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23ff1c4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23ff1c6:	6143      	str	r3, [r0, #20]
 23ff1c8:	f7ff ff51 	bl	23ff06e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23ff1cc:	4620      	mov	r0, r4
 23ff1ce:	bd38      	pop	{r3, r4, r5, pc}

023ff1d0 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23ff1d0:	b510      	push	{r4, lr}
    if (!n_) {
 23ff1d2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23ff1d4:	4604      	mov	r4, r0
    if (!n_) {
 23ff1d6:	b163      	cbz	r3, 23ff1f2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23ff1d8:	6880      	ldr	r0, [r0, #8]
    --n_;
 23ff1da:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23ff1dc:	60e0      	str	r0, [r4, #12]
    ++t_;
 23ff1de:	3010      	adds	r0, #16
 23ff1e0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23ff1e2:	6120      	str	r0, [r4, #16]
    --n_;
 23ff1e4:	6163      	str	r3, [r4, #20]
    if (n_) {
 23ff1e6:	b113      	cbz	r3, 23ff1ee <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23ff1e8:	f7ff fef2 	bl	23fefd0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23ff1ec:	60a0      	str	r0, [r4, #8]
    return true;
 23ff1ee:	2001      	movs	r0, #1
 23ff1f0:	e000      	b.n	23ff1f4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23ff1f2:	4618      	mov	r0, r3
}
 23ff1f4:	bd10      	pop	{r4, pc}

023ff1f6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23ff1f6:	b510      	push	{r4, lr}
    write('}');
 23ff1f8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23ff1fa:	4604      	mov	r4, r0
    write('}');
 23ff1fc:	f7ff ff49 	bl	23ff092 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23ff200:	2301      	movs	r3, #1
}
 23ff202:	4620      	mov	r0, r4
    state_ = NEXT;
 23ff204:	7123      	strb	r3, [r4, #4]
}
 23ff206:	bd10      	pop	{r4, pc}

023ff208 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23ff208:	b508      	push	{r3, lr}
    switch (state_) {
 23ff20a:	7903      	ldrb	r3, [r0, #4]
 23ff20c:	2b01      	cmp	r3, #1
 23ff20e:	d002      	beq.n	23ff216 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23ff210:	2b02      	cmp	r3, #2
 23ff212:	d004      	beq.n	23ff21e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23ff214:	bd08      	pop	{r3, pc}
        write(',');
 23ff216:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23ff218:	f7ff ff3b 	bl	23ff092 <_ZN5spark10JSONWriter5writeEc>
}
 23ff21c:	e7fa      	b.n	23ff214 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23ff21e:	213a      	movs	r1, #58	; 0x3a
 23ff220:	e7fa      	b.n	23ff218 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023ff222 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23ff222:	b510      	push	{r4, lr}
 23ff224:	4604      	mov	r4, r0
    writeSeparator();
 23ff226:	f7ff ffef 	bl	23ff208 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23ff22a:	4620      	mov	r0, r4
 23ff22c:	217b      	movs	r1, #123	; 0x7b
 23ff22e:	f7ff ff30 	bl	23ff092 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23ff232:	2300      	movs	r3, #0
}
 23ff234:	4620      	mov	r0, r4
    state_ = BEGIN;
 23ff236:	7123      	strb	r3, [r4, #4]
}
 23ff238:	bd10      	pop	{r4, pc}
	...

023ff23c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23ff23c:	b513      	push	{r0, r1, r4, lr}
 23ff23e:	4604      	mov	r4, r0
 23ff240:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23ff242:	f7ff ffe1 	bl	23ff208 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23ff246:	6823      	ldr	r3, [r4, #0]
 23ff248:	4620      	mov	r0, r4
 23ff24a:	68db      	ldr	r3, [r3, #12]
 23ff24c:	9a01      	ldr	r2, [sp, #4]
 23ff24e:	4903      	ldr	r1, [pc, #12]	; (23ff25c <_ZN5spark10JSONWriter5valueEi+0x20>)
 23ff250:	4798      	blx	r3
    state_ = NEXT;
 23ff252:	2301      	movs	r3, #1
}
 23ff254:	4620      	mov	r0, r4
    state_ = NEXT;
 23ff256:	7123      	strb	r3, [r4, #4]
}
 23ff258:	b002      	add	sp, #8
 23ff25a:	bd10      	pop	{r4, pc}
 23ff25c:	023ffc5f 	.word	0x023ffc5f

023ff260 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23ff260:	b513      	push	{r0, r1, r4, lr}
 23ff262:	4604      	mov	r4, r0
 23ff264:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23ff266:	f7ff ffcf 	bl	23ff208 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23ff26a:	6823      	ldr	r3, [r4, #0]
 23ff26c:	4620      	mov	r0, r4
 23ff26e:	68db      	ldr	r3, [r3, #12]
 23ff270:	9a01      	ldr	r2, [sp, #4]
 23ff272:	4903      	ldr	r1, [pc, #12]	; (23ff280 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23ff274:	4798      	blx	r3
    state_ = NEXT;
 23ff276:	2301      	movs	r3, #1
}
 23ff278:	4620      	mov	r0, r4
    state_ = NEXT;
 23ff27a:	7123      	strb	r3, [r4, #4]
}
 23ff27c:	b002      	add	sp, #8
 23ff27e:	bd10      	pop	{r4, pc}
 23ff280:	023ffd64 	.word	0x023ffd64

023ff284 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23ff284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff288:	460d      	mov	r5, r1
 23ff28a:	4690      	mov	r8, r2
    write('"');
 23ff28c:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23ff28e:	4604      	mov	r4, r0
 23ff290:	462f      	mov	r7, r5
    write('"');
 23ff292:	f7ff fefe 	bl	23ff092 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23ff296:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23ff33c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23ff29a:	44a8      	add	r8, r5
    while (s != end) {
 23ff29c:	4547      	cmp	r7, r8
 23ff29e:	46ba      	mov	sl, r7
 23ff2a0:	d03d      	beq.n	23ff31e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23ff2a2:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23ff2a6:	2e22      	cmp	r6, #34	; 0x22
 23ff2a8:	d006      	beq.n	23ff2b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23ff2aa:	2e5c      	cmp	r6, #92	; 0x5c
 23ff2ac:	d004      	beq.n	23ff2b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23ff2ae:	4630      	mov	r0, r6
 23ff2b0:	f000 fabe 	bl	23ff830 <isprint>
 23ff2b4:	2800      	cmp	r0, #0
 23ff2b6:	d1f1      	bne.n	23ff29c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23ff2b8:	6823      	ldr	r3, [r4, #0]
 23ff2ba:	4629      	mov	r1, r5
 23ff2bc:	4620      	mov	r0, r4
 23ff2be:	689b      	ldr	r3, [r3, #8]
 23ff2c0:	ebaa 0205 	sub.w	r2, sl, r5
 23ff2c4:	4798      	blx	r3
            write('\\');
 23ff2c6:	215c      	movs	r1, #92	; 0x5c
 23ff2c8:	4620      	mov	r0, r4
 23ff2ca:	f7ff fee2 	bl	23ff092 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23ff2ce:	2e0d      	cmp	r6, #13
 23ff2d0:	d80a      	bhi.n	23ff2e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23ff2d2:	2e07      	cmp	r6, #7
 23ff2d4:	d91c      	bls.n	23ff310 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23ff2d6:	f1a6 0308 	sub.w	r3, r6, #8
 23ff2da:	2b05      	cmp	r3, #5
 23ff2dc:	d818      	bhi.n	23ff310 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23ff2de:	e8df f003 	tbb	[pc, r3]
 23ff2e2:	0f0d      	.short	0x0f0d
 23ff2e4:	15131711 	.word	0x15131711
 23ff2e8:	2e22      	cmp	r6, #34	; 0x22
 23ff2ea:	d001      	beq.n	23ff2f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23ff2ec:	2e5c      	cmp	r6, #92	; 0x5c
 23ff2ee:	d10f      	bne.n	23ff310 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23ff2f0:	4631      	mov	r1, r6
                write('b');
 23ff2f2:	4620      	mov	r0, r4
 23ff2f4:	f7ff fecd 	bl	23ff092 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23ff2f8:	463d      	mov	r5, r7
    while (s != end) {
 23ff2fa:	e7cf      	b.n	23ff29c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23ff2fc:	2162      	movs	r1, #98	; 0x62
 23ff2fe:	e7f8      	b.n	23ff2f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23ff300:	2174      	movs	r1, #116	; 0x74
 23ff302:	e7f6      	b.n	23ff2f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23ff304:	216e      	movs	r1, #110	; 0x6e
 23ff306:	e7f4      	b.n	23ff2f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23ff308:	2166      	movs	r1, #102	; 0x66
 23ff30a:	e7f2      	b.n	23ff2f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23ff30c:	2172      	movs	r1, #114	; 0x72
 23ff30e:	e7f0      	b.n	23ff2f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23ff310:	6823      	ldr	r3, [r4, #0]
 23ff312:	4632      	mov	r2, r6
 23ff314:	4649      	mov	r1, r9
 23ff316:	4620      	mov	r0, r4
 23ff318:	68db      	ldr	r3, [r3, #12]
 23ff31a:	4798      	blx	r3
                break;
 23ff31c:	e7ec      	b.n	23ff2f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23ff31e:	42bd      	cmp	r5, r7
 23ff320:	d005      	beq.n	23ff32e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23ff322:	6823      	ldr	r3, [r4, #0]
 23ff324:	4629      	mov	r1, r5
 23ff326:	4620      	mov	r0, r4
 23ff328:	689b      	ldr	r3, [r3, #8]
 23ff32a:	1b7a      	subs	r2, r7, r5
 23ff32c:	4798      	blx	r3
    }
    write('"');
 23ff32e:	2122      	movs	r1, #34	; 0x22
 23ff330:	4620      	mov	r0, r4
 23ff332:	f7ff feae 	bl	23ff092 <_ZN5spark10JSONWriter5writeEc>
}
 23ff336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff33a:	bf00      	nop
 23ff33c:	023ffd67 	.word	0x023ffd67

023ff340 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23ff340:	b513      	push	{r0, r1, r4, lr}
 23ff342:	4604      	mov	r4, r0
 23ff344:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23ff348:	f7ff ff5e 	bl	23ff208 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23ff34c:	e9dd 2100 	ldrd	r2, r1, [sp]
 23ff350:	4620      	mov	r0, r4
 23ff352:	f7ff ff97 	bl	23ff284 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23ff356:	2302      	movs	r3, #2
}
 23ff358:	4620      	mov	r0, r4
    state_ = VALUE;
 23ff35a:	7123      	strb	r3, [r4, #4]
}
 23ff35c:	b002      	add	sp, #8
 23ff35e:	bd10      	pop	{r4, pc}

023ff360 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23ff360:	b513      	push	{r0, r1, r4, lr}
 23ff362:	4604      	mov	r4, r0
 23ff364:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23ff368:	f7ff ff4e 	bl	23ff208 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23ff36c:	e9dd 2100 	ldrd	r2, r1, [sp]
 23ff370:	4620      	mov	r0, r4
 23ff372:	f7ff ff87 	bl	23ff284 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23ff376:	2301      	movs	r3, #1
}
 23ff378:	4620      	mov	r0, r4
    state_ = NEXT;
 23ff37a:	7123      	strb	r3, [r4, #4]
}
 23ff37c:	b002      	add	sp, #8
 23ff37e:	bd10      	pop	{r4, pc}

023ff380 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff380:	4770      	bx	lr

023ff382 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff382:	7441      	strb	r1, [r0, #17]
}
 23ff384:	4770      	bx	lr

023ff386 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff386:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff388:	7c00      	ldrb	r0, [r0, #16]
 23ff38a:	f7fe f8e5 	bl	23fd558 <hal_usart_available_data_for_write>
}
 23ff38e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff392:	bd08      	pop	{r3, pc}

023ff394 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff394:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff396:	7c00      	ldrb	r0, [r0, #16]
 23ff398:	f7fe f898 	bl	23fd4cc <hal_usart_available>
}
 23ff39c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff3a0:	bd08      	pop	{r3, pc}

023ff3a2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff3a2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff3a4:	7c00      	ldrb	r0, [r0, #16]
 23ff3a6:	f7fe f8ad 	bl	23fd504 <hal_usart_peek>
}
 23ff3aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff3ae:	bd08      	pop	{r3, pc}

023ff3b0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff3b0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff3b2:	7c00      	ldrb	r0, [r0, #16]
 23ff3b4:	f7fe f898 	bl	23fd4e8 <hal_usart_read>
}
 23ff3b8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff3bc:	bd08      	pop	{r3, pc}

023ff3be <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff3be:	7c00      	ldrb	r0, [r0, #16]
 23ff3c0:	f7fe b8ae 	b.w	23fd520 <hal_usart_flush>

023ff3c4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff3c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff3c6:	7c45      	ldrb	r5, [r0, #17]
{
 23ff3c8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff3ca:	b12d      	cbz	r5, 23ff3d8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff3cc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff3ce:	b003      	add	sp, #12
 23ff3d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff3d4:	f7fe b86c 	b.w	23fd4b0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff3d8:	7c00      	ldrb	r0, [r0, #16]
 23ff3da:	9101      	str	r1, [sp, #4]
 23ff3dc:	f7fe f8bc 	bl	23fd558 <hal_usart_available_data_for_write>
 23ff3e0:	2800      	cmp	r0, #0
 23ff3e2:	9901      	ldr	r1, [sp, #4]
 23ff3e4:	dcf2      	bgt.n	23ff3cc <_ZN11USARTSerial5writeEh+0x8>
}
 23ff3e6:	4628      	mov	r0, r5
 23ff3e8:	b003      	add	sp, #12
 23ff3ea:	bd30      	pop	{r4, r5, pc}

023ff3ec <_ZN11USARTSerialD0Ev>:
 23ff3ec:	b510      	push	{r4, lr}
 23ff3ee:	4604      	mov	r4, r0
 23ff3f0:	2114      	movs	r1, #20
 23ff3f2:	f7fd fe38 	bl	23fd066 <_ZdlPvj>
 23ff3f6:	4620      	mov	r0, r4
 23ff3f8:	bd10      	pop	{r4, pc}
	...

023ff3fc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff3fc:	b510      	push	{r4, lr}
 23ff3fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff402:	4604      	mov	r4, r0
 23ff404:	4608      	mov	r0, r1
 23ff406:	4611      	mov	r1, r2
 23ff408:	2200      	movs	r2, #0
 23ff40a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff40e:	4b04      	ldr	r3, [pc, #16]	; (23ff420 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff410:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff412:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff414:	2301      	movs	r3, #1
 23ff416:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff418:	f7fe f8ba 	bl	23fd590 <hal_usart_init_ex>
}
 23ff41c:	4620      	mov	r0, r4
 23ff41e:	bd10      	pop	{r4, pc}
 23ff420:	023ffd78 	.word	0x023ffd78

023ff424 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23ff424:	2300      	movs	r3, #0
 23ff426:	7c00      	ldrb	r0, [r0, #16]
 23ff428:	f7fe b8a4 	b.w	23fd574 <hal_usart_begin_config>

023ff42c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23ff42c:	2200      	movs	r2, #0
 23ff42e:	f7ff bff9 	b.w	23ff424 <_ZN11USARTSerial5beginEmm>

023ff432 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23ff432:	7c00      	ldrb	r0, [r0, #16]
 23ff434:	f7fe b82e 	b.w	23fd494 <hal_usart_end>

023ff438 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff438:	7c00      	ldrb	r0, [r0, #16]
 23ff43a:	f7fe b87f 	b.w	23fd53c <hal_usart_is_enabled>
	...

023ff440 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS},
        buffer_(nullptr) {
 23ff440:	21ff      	movs	r1, #255	; 0xff
 23ff442:	2200      	movs	r2, #0
      : address_{address},
 23ff444:	4b04      	ldr	r3, [pc, #16]	; (23ff458 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23ff446:	2001      	movs	r0, #1
 23ff448:	e9c3 1200 	strd	r1, r2, [r3]
 23ff44c:	2164      	movs	r1, #100	; 0x64
 23ff44e:	611a      	str	r2, [r3, #16]
 23ff450:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23ff454:	4770      	bx	lr
 23ff456:	bf00      	nop
 23ff458:	1007aef0 	.word	0x1007aef0

023ff45c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff45c:	2200      	movs	r2, #0
 23ff45e:	6840      	ldr	r0, [r0, #4]
 23ff460:	4611      	mov	r1, r2
 23ff462:	f7fe b99f 	b.w	23fd7a4 <network_ready>

023ff466 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff466:	2200      	movs	r2, #0
 23ff468:	6840      	ldr	r0, [r0, #4]
 23ff46a:	4611      	mov	r1, r2
 23ff46c:	f7fe b9d2 	b.w	23fd814 <network_listening>

023ff470 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff470:	2200      	movs	r2, #0
 23ff472:	6840      	ldr	r0, [r0, #4]
 23ff474:	4611      	mov	r1, r2
 23ff476:	f7fe b9e9 	b.w	23fd84c <network_get_listen_timeout>

023ff47a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff47a:	2200      	movs	r2, #0
 23ff47c:	6840      	ldr	r0, [r0, #4]
 23ff47e:	f7fe b9d7 	b.w	23fd830 <network_set_listen_timeout>

023ff482 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff482:	2200      	movs	r2, #0
 23ff484:	6840      	ldr	r0, [r0, #4]
 23ff486:	f081 0101 	eor.w	r1, r1, #1
 23ff48a:	f7fe b9b5 	b.w	23fd7f8 <network_listen>

023ff48e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff48e:	2300      	movs	r3, #0
 23ff490:	6840      	ldr	r0, [r0, #4]
 23ff492:	461a      	mov	r2, r3
 23ff494:	4619      	mov	r1, r3
 23ff496:	f7fe b9a1 	b.w	23fd7dc <network_off>

023ff49a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff49a:	2300      	movs	r3, #0
 23ff49c:	6840      	ldr	r0, [r0, #4]
 23ff49e:	461a      	mov	r2, r3
 23ff4a0:	4619      	mov	r1, r3
 23ff4a2:	f7fe b98d 	b.w	23fd7c0 <network_on>

023ff4a6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff4a6:	2200      	movs	r2, #0
 23ff4a8:	6840      	ldr	r0, [r0, #4]
 23ff4aa:	4611      	mov	r1, r2
 23ff4ac:	f7fe b95e 	b.w	23fd76c <network_connecting>

023ff4b0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff4b0:	2200      	movs	r2, #0
 23ff4b2:	2102      	movs	r1, #2
 23ff4b4:	6840      	ldr	r0, [r0, #4]
 23ff4b6:	f7fe b967 	b.w	23fd788 <network_disconnect>

023ff4ba <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff4ba:	2300      	movs	r3, #0
 23ff4bc:	6840      	ldr	r0, [r0, #4]
 23ff4be:	461a      	mov	r2, r3
 23ff4c0:	f7fe b946 	b.w	23fd750 <network_connect>

023ff4c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff4c4:	2204      	movs	r2, #4
 23ff4c6:	4b02      	ldr	r3, [pc, #8]	; (23ff4d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff4c8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff4ca:	4a02      	ldr	r2, [pc, #8]	; (23ff4d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff4cc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff4ce:	4770      	bx	lr
 23ff4d0:	1007af04 	.word	0x1007af04
 23ff4d4:	023ffdac 	.word	0x023ffdac

023ff4d8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23ff4d8:	2300      	movs	r3, #0
 23ff4da:	6840      	ldr	r0, [r0, #4]
 23ff4dc:	461a      	mov	r2, r3
 23ff4de:	f7fe b937 	b.w	23fd750 <network_connect>

023ff4e2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23ff4e2:	2200      	movs	r2, #0
 23ff4e4:	2102      	movs	r1, #2
 23ff4e6:	6840      	ldr	r0, [r0, #4]
 23ff4e8:	f7fe b94e 	b.w	23fd788 <network_disconnect>

023ff4ec <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23ff4ec:	2200      	movs	r2, #0
 23ff4ee:	6840      	ldr	r0, [r0, #4]
 23ff4f0:	4611      	mov	r1, r2
 23ff4f2:	f7fe b93b 	b.w	23fd76c <network_connecting>

023ff4f6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23ff4f6:	2200      	movs	r2, #0
 23ff4f8:	6840      	ldr	r0, [r0, #4]
 23ff4fa:	4611      	mov	r1, r2
 23ff4fc:	f7fe b952 	b.w	23fd7a4 <network_ready>

023ff500 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23ff500:	2300      	movs	r3, #0
 23ff502:	6840      	ldr	r0, [r0, #4]
 23ff504:	461a      	mov	r2, r3
 23ff506:	4619      	mov	r1, r3
 23ff508:	f7fe b95a 	b.w	23fd7c0 <network_on>

023ff50c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23ff50c:	2300      	movs	r3, #0
 23ff50e:	6840      	ldr	r0, [r0, #4]
 23ff510:	461a      	mov	r2, r3
 23ff512:	4619      	mov	r1, r3
 23ff514:	f7fe b962 	b.w	23fd7dc <network_off>

023ff518 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23ff518:	2100      	movs	r1, #0
 23ff51a:	6840      	ldr	r0, [r0, #4]
 23ff51c:	f7fe b9a4 	b.w	23fd868 <network_is_on>

023ff520 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23ff520:	2100      	movs	r1, #0
 23ff522:	6840      	ldr	r0, [r0, #4]
 23ff524:	f7fe b9ae 	b.w	23fd884 <network_is_off>

023ff528 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23ff528:	2200      	movs	r2, #0
 23ff52a:	6840      	ldr	r0, [r0, #4]
 23ff52c:	f081 0101 	eor.w	r1, r1, #1
 23ff530:	f7fe b962 	b.w	23fd7f8 <network_listen>

023ff534 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23ff534:	2200      	movs	r2, #0
 23ff536:	6840      	ldr	r0, [r0, #4]
 23ff538:	f7fe b97a 	b.w	23fd830 <network_set_listen_timeout>

023ff53c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23ff53c:	2200      	movs	r2, #0
 23ff53e:	6840      	ldr	r0, [r0, #4]
 23ff540:	4611      	mov	r1, r2
 23ff542:	f7fe b983 	b.w	23fd84c <network_get_listen_timeout>

023ff546 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23ff546:	2200      	movs	r2, #0
 23ff548:	6840      	ldr	r0, [r0, #4]
 23ff54a:	4611      	mov	r1, r2
 23ff54c:	f7fe b962 	b.w	23fd814 <network_listening>

023ff550 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23ff550:	2100      	movs	r1, #0
 23ff552:	6840      	ldr	r0, [r0, #4]
 23ff554:	f7fe b9b2 	b.w	23fd8bc <network_is_preferred>

023ff558 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23ff558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ff55c:	b095      	sub	sp, #84	; 0x54
 23ff55e:	4614      	mov	r4, r2
 23ff560:	460d      	mov	r5, r1
 23ff562:	4607      	mov	r7, r0
    IPAddress addr;
 23ff564:	f7ff fc70 	bl	23fee48 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23ff568:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23ff56a:	221c      	movs	r2, #28
 23ff56c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23ff56e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23ff570:	f000 f98d 	bl	23ff88e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23ff574:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff576:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23ff578:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff57a:	2100      	movs	r1, #0
 23ff57c:	466b      	mov	r3, sp
 23ff57e:	aa0c      	add	r2, sp, #48	; 0x30
 23ff580:	f7fd feee 	bl	23fd360 <netdb_getaddrinfo>
    if (!r) {
 23ff584:	4604      	mov	r4, r0
 23ff586:	2800      	cmp	r0, #0
 23ff588:	d14b      	bne.n	23ff622 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff58a:	4602      	mov	r2, r0
 23ff58c:	2101      	movs	r1, #1
 23ff58e:	6868      	ldr	r0, [r5, #4]
 23ff590:	f7fe f908 	bl	23fd7a4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff594:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff596:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff598:	4622      	mov	r2, r4
 23ff59a:	6868      	ldr	r0, [r5, #4]
 23ff59c:	f7fe f902 	bl	23fd7a4 <network_ready>
        bool ok = false;
 23ff5a0:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff5a2:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff5a4:	9e00      	ldr	r6, [sp, #0]
 23ff5a6:	2e00      	cmp	r6, #0
 23ff5a8:	d03b      	beq.n	23ff622 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23ff5aa:	2900      	cmp	r1, #0
 23ff5ac:	d139      	bne.n	23ff622 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23ff5ae:	6873      	ldr	r3, [r6, #4]
 23ff5b0:	2b02      	cmp	r3, #2
 23ff5b2:	d003      	beq.n	23ff5bc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23ff5b4:	2b0a      	cmp	r3, #10
 23ff5b6:	d011      	beq.n	23ff5dc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff5b8:	69f6      	ldr	r6, [r6, #28]
 23ff5ba:	e7f4      	b.n	23ff5a6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23ff5bc:	f1b8 0f00 	cmp.w	r8, #0
 23ff5c0:	d0fa      	beq.n	23ff5b8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23ff5c2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23ff5c4:	a806      	add	r0, sp, #24
 23ff5c6:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23ff5c8:	1d3c      	adds	r4, r7, #4
 23ff5ca:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23ff5cc:	f7ff fc6a 	bl	23feea4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23ff5d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff5d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff5d4:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff5d6:	4641      	mov	r1, r8
 23ff5d8:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23ff5da:	e7ed      	b.n	23ff5b8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23ff5dc:	f1b9 0f00 	cmp.w	r9, #0
 23ff5e0:	d0ea      	beq.n	23ff5b8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23ff5e2:	2210      	movs	r2, #16
 23ff5e4:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23ff5e6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23ff5e8:	f000 f951 	bl	23ff88e <memset>
                    a.v = 6;
 23ff5ec:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff5ee:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23ff5f0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff5f4:	f104 0308 	add.w	r3, r4, #8
 23ff5f8:	3418      	adds	r4, #24
 23ff5fa:	462a      	mov	r2, r5
 23ff5fc:	6818      	ldr	r0, [r3, #0]
 23ff5fe:	6859      	ldr	r1, [r3, #4]
 23ff600:	3308      	adds	r3, #8
 23ff602:	c203      	stmia	r2!, {r0, r1}
 23ff604:	42a3      	cmp	r3, r4
 23ff606:	4615      	mov	r5, r2
 23ff608:	d1f7      	bne.n	23ff5fa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23ff60a:	a901      	add	r1, sp, #4
 23ff60c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23ff60e:	1d3c      	adds	r4, r7, #4
 23ff610:	ad07      	add	r5, sp, #28
 23ff612:	f7ff fc27 	bl	23fee64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff61a:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff61c:	4649      	mov	r1, r9
 23ff61e:	7023      	strb	r3, [r4, #0]
                    break;
 23ff620:	e7ca      	b.n	23ff5b8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff622:	9800      	ldr	r0, [sp, #0]
 23ff624:	f7fd fe8e 	bl	23fd344 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff628:	4638      	mov	r0, r7
 23ff62a:	b015      	add	sp, #84	; 0x54
 23ff62c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023ff630 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23ff630:	3803      	subs	r0, #3
 23ff632:	2802      	cmp	r0, #2
 23ff634:	bf9a      	itte	ls
 23ff636:	4b02      	ldrls	r3, [pc, #8]	; (23ff640 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23ff638:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23ff63c:	4801      	ldrhi	r0, [pc, #4]	; (23ff644 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23ff63e:	4770      	bx	lr
 23ff640:	023ffde8 	.word	0x023ffde8
 23ff644:	1007af0c 	.word	0x1007af0c

023ff648 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23ff648:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23ff64a:	2200      	movs	r2, #0
 23ff64c:	6840      	ldr	r0, [r0, #4]
 23ff64e:	f7fe f927 	bl	23fd8a0 <network_prefer>
}
 23ff652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23ff656:	f7ff bfeb 	b.w	23ff630 <_ZN5spark12NetworkClass4fromEm>
	...

023ff65c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23ff65c:	4b02      	ldr	r3, [pc, #8]	; (23ff668 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff65e:	4a03      	ldr	r2, [pc, #12]	; (23ff66c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff660:	601a      	str	r2, [r3, #0]
 23ff662:	2200      	movs	r2, #0
 23ff664:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff666:	4770      	bx	lr
 23ff668:	1007af0c 	.word	0x1007af0c
 23ff66c:	023ffdfc 	.word	0x023ffdfc

023ff670 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff670:	4770      	bx	lr
	...

023ff674 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff674:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff676:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff678:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff67a:	462a      	mov	r2, r5
 23ff67c:	2100      	movs	r1, #0
 23ff67e:	f000 f906 	bl	23ff88e <memset>
 23ff682:	8025      	strh	r5, [r4, #0]
 23ff684:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff686:	4907      	ldr	r1, [pc, #28]	; (23ff6a4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff688:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff68a:	8125      	strh	r5, [r4, #8]
 23ff68c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff68e:	f000 f8c7 	bl	23ff820 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff692:	4904      	ldr	r1, [pc, #16]	; (23ff6a4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff694:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff696:	4628      	mov	r0, r5
 23ff698:	f000 f8c2 	bl	23ff820 <_ZnajRKSt9nothrow_t>
    };
 23ff69c:	60e0      	str	r0, [r4, #12]
}
 23ff69e:	4620      	mov	r0, r4
 23ff6a0:	bd38      	pop	{r3, r4, r5, pc}
 23ff6a2:	bf00      	nop
 23ff6a4:	023ffe38 	.word	0x023ffe38

023ff6a8 <__tcf_2>:
 23ff6a8:	4770      	bx	lr

023ff6aa <__tcf_1>:
 23ff6aa:	4770      	bx	lr

023ff6ac <_Z20acquireSerial1Bufferv>:
{
 23ff6ac:	b510      	push	{r4, lr}
 23ff6ae:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff6b0:	f7ff ffe0 	bl	23ff674 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff6b4:	4620      	mov	r0, r4
 23ff6b6:	bd10      	pop	{r4, pc}

023ff6b8 <_Z20acquireSerial2Bufferv>:
 23ff6b8:	b510      	push	{r4, lr}
 23ff6ba:	4604      	mov	r4, r0
 23ff6bc:	f7ff ffda 	bl	23ff674 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff6c0:	4620      	mov	r0, r4
 23ff6c2:	bd10      	pop	{r4, pc}

023ff6c4 <_Z20acquireSerial3Bufferv>:
 23ff6c4:	b510      	push	{r4, lr}
 23ff6c6:	4604      	mov	r4, r0
 23ff6c8:	f7ff ffd4 	bl	23ff674 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff6cc:	4620      	mov	r0, r4
 23ff6ce:	bd10      	pop	{r4, pc}

023ff6d0 <_Z22__fetch_global_Serial1v>:
{
 23ff6d0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff6d2:	4d0e      	ldr	r5, [pc, #56]	; (23ff70c <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff6d4:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff6d6:	e8d5 1f8f 	ldab	r1, [r5]
 23ff6da:	f011 0401 	ands.w	r4, r1, #1
 23ff6de:	d111      	bne.n	23ff704 <_Z22__fetch_global_Serial1v+0x34>
 23ff6e0:	4628      	mov	r0, r5
 23ff6e2:	f7fd fccf 	bl	23fd084 <__cxa_guard_acquire>
 23ff6e6:	b168      	cbz	r0, 23ff704 <_Z22__fetch_global_Serial1v+0x34>
 23ff6e8:	a801      	add	r0, sp, #4
 23ff6ea:	f7ff ffdf 	bl	23ff6ac <_Z20acquireSerial1Bufferv>
 23ff6ee:	4621      	mov	r1, r4
 23ff6f0:	aa01      	add	r2, sp, #4
 23ff6f2:	4807      	ldr	r0, [pc, #28]	; (23ff710 <_Z22__fetch_global_Serial1v+0x40>)
 23ff6f4:	f7ff fe82 	bl	23ff3fc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff6f8:	4628      	mov	r0, r5
 23ff6fa:	f7fd fcc8 	bl	23fd08e <__cxa_guard_release>
 23ff6fe:	4805      	ldr	r0, [pc, #20]	; (23ff714 <_Z22__fetch_global_Serial1v+0x44>)
 23ff700:	f000 f890 	bl	23ff824 <atexit>
    return serial1;
}
 23ff704:	4802      	ldr	r0, [pc, #8]	; (23ff710 <_Z22__fetch_global_Serial1v+0x40>)
 23ff706:	b007      	add	sp, #28
 23ff708:	bd30      	pop	{r4, r5, pc}
 23ff70a:	bf00      	nop
 23ff70c:	1007af14 	.word	0x1007af14
 23ff710:	1007af20 	.word	0x1007af20
 23ff714:	023ff671 	.word	0x023ff671

023ff718 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff718:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff71a:	4c0d      	ldr	r4, [pc, #52]	; (23ff750 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff71c:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff71e:	e8d4 3f8f 	ldab	r3, [r4]
 23ff722:	07db      	lsls	r3, r3, #31
 23ff724:	d411      	bmi.n	23ff74a <_Z22__fetch_global_Serial2v+0x32>
 23ff726:	4620      	mov	r0, r4
 23ff728:	f7fd fcac 	bl	23fd084 <__cxa_guard_acquire>
 23ff72c:	b168      	cbz	r0, 23ff74a <_Z22__fetch_global_Serial2v+0x32>
 23ff72e:	a801      	add	r0, sp, #4
 23ff730:	f7ff ffc2 	bl	23ff6b8 <_Z20acquireSerial2Bufferv>
 23ff734:	2101      	movs	r1, #1
 23ff736:	aa01      	add	r2, sp, #4
 23ff738:	4806      	ldr	r0, [pc, #24]	; (23ff754 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff73a:	f7ff fe5f 	bl	23ff3fc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff73e:	4620      	mov	r0, r4
 23ff740:	f7fd fca5 	bl	23fd08e <__cxa_guard_release>
 23ff744:	4804      	ldr	r0, [pc, #16]	; (23ff758 <_Z22__fetch_global_Serial2v+0x40>)
 23ff746:	f000 f86d 	bl	23ff824 <atexit>
	return serial2;
}
 23ff74a:	4802      	ldr	r0, [pc, #8]	; (23ff754 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff74c:	b006      	add	sp, #24
 23ff74e:	bd10      	pop	{r4, pc}
 23ff750:	1007af18 	.word	0x1007af18
 23ff754:	1007af34 	.word	0x1007af34
 23ff758:	023ff6ab 	.word	0x023ff6ab

023ff75c <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff75c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff75e:	f7ff ffdb 	bl	23ff718 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff762:	4b07      	ldr	r3, [pc, #28]	; (23ff780 <_Z15serialEventRun2v+0x24>)
 23ff764:	4604      	mov	r4, r0
 23ff766:	b153      	cbz	r3, 23ff77e <_Z15serialEventRun2v+0x22>
 23ff768:	f7ff fe66 	bl	23ff438 <_ZN11USARTSerial9isEnabledEv>
 23ff76c:	b138      	cbz	r0, 23ff77e <_Z15serialEventRun2v+0x22>
 23ff76e:	6823      	ldr	r3, [r4, #0]
 23ff770:	4620      	mov	r0, r4
 23ff772:	691b      	ldr	r3, [r3, #16]
 23ff774:	4798      	blx	r3
 23ff776:	2800      	cmp	r0, #0
 23ff778:	dd01      	ble.n	23ff77e <_Z15serialEventRun2v+0x22>
        handler();
 23ff77a:	e000      	b.n	23ff77e <_Z15serialEventRun2v+0x22>
 23ff77c:	bf00      	nop
}
 23ff77e:	bd10      	pop	{r4, pc}
 23ff780:	00000000 	.word	0x00000000

023ff784 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff784:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff786:	4c0d      	ldr	r4, [pc, #52]	; (23ff7bc <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff788:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff78a:	e8d4 3f8f 	ldab	r3, [r4]
 23ff78e:	07db      	lsls	r3, r3, #31
 23ff790:	d411      	bmi.n	23ff7b6 <_Z22__fetch_global_Serial3v+0x32>
 23ff792:	4620      	mov	r0, r4
 23ff794:	f7fd fc76 	bl	23fd084 <__cxa_guard_acquire>
 23ff798:	b168      	cbz	r0, 23ff7b6 <_Z22__fetch_global_Serial3v+0x32>
 23ff79a:	a801      	add	r0, sp, #4
 23ff79c:	f7ff ff92 	bl	23ff6c4 <_Z20acquireSerial3Bufferv>
 23ff7a0:	2102      	movs	r1, #2
 23ff7a2:	aa01      	add	r2, sp, #4
 23ff7a4:	4806      	ldr	r0, [pc, #24]	; (23ff7c0 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff7a6:	f7ff fe29 	bl	23ff3fc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff7aa:	4620      	mov	r0, r4
 23ff7ac:	f7fd fc6f 	bl	23fd08e <__cxa_guard_release>
 23ff7b0:	4804      	ldr	r0, [pc, #16]	; (23ff7c4 <_Z22__fetch_global_Serial3v+0x40>)
 23ff7b2:	f000 f837 	bl	23ff824 <atexit>
	return serial3;
}
 23ff7b6:	4802      	ldr	r0, [pc, #8]	; (23ff7c0 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff7b8:	b006      	add	sp, #24
 23ff7ba:	bd10      	pop	{r4, pc}
 23ff7bc:	1007af1c 	.word	0x1007af1c
 23ff7c0:	1007af48 	.word	0x1007af48
 23ff7c4:	023ff6a9 	.word	0x023ff6a9

023ff7c8 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff7c8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff7ca:	f7ff ffdb 	bl	23ff784 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff7ce:	4b07      	ldr	r3, [pc, #28]	; (23ff7ec <_Z15serialEventRun3v+0x24>)
 23ff7d0:	4604      	mov	r4, r0
 23ff7d2:	b153      	cbz	r3, 23ff7ea <_Z15serialEventRun3v+0x22>
 23ff7d4:	f7ff fe30 	bl	23ff438 <_ZN11USARTSerial9isEnabledEv>
 23ff7d8:	b138      	cbz	r0, 23ff7ea <_Z15serialEventRun3v+0x22>
 23ff7da:	6823      	ldr	r3, [r4, #0]
 23ff7dc:	4620      	mov	r0, r4
 23ff7de:	691b      	ldr	r3, [r3, #16]
 23ff7e0:	4798      	blx	r3
 23ff7e2:	2800      	cmp	r0, #0
 23ff7e4:	dd01      	ble.n	23ff7ea <_Z15serialEventRun3v+0x22>
        handler();
 23ff7e6:	e000      	b.n	23ff7ea <_Z15serialEventRun3v+0x22>
 23ff7e8:	bf00      	nop
}
 23ff7ea:	bd10      	pop	{r4, pc}
 23ff7ec:	00000000 	.word	0x00000000

023ff7f0 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 23ff7f0:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 23ff7f2:	4c08      	ldr	r4, [pc, #32]	; (23ff814 <_Z21__fetch_global_EEPROMv+0x24>)
 23ff7f4:	e8d4 3f8f 	ldab	r3, [r4]
 23ff7f8:	07db      	lsls	r3, r3, #31
 23ff7fa:	d408      	bmi.n	23ff80e <_Z21__fetch_global_EEPROMv+0x1e>
 23ff7fc:	4620      	mov	r0, r4
 23ff7fe:	f7fd fc41 	bl	23fd084 <__cxa_guard_acquire>
 23ff802:	b120      	cbz	r0, 23ff80e <_Z21__fetch_global_EEPROMv+0x1e>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 23ff804:	f7fd fde4 	bl	23fd3d0 <HAL_EEPROM_Init>
 23ff808:	4620      	mov	r0, r4
 23ff80a:	f7fd fc40 	bl	23fd08e <__cxa_guard_release>
	return eeprom;
}
 23ff80e:	4802      	ldr	r0, [pc, #8]	; (23ff818 <_Z21__fetch_global_EEPROMv+0x28>)
 23ff810:	bd10      	pop	{r4, pc}
 23ff812:	bf00      	nop
 23ff814:	1007af60 	.word	0x1007af60
 23ff818:	1007af64 	.word	0x1007af64

023ff81c <_ZnwjRKSt9nothrow_t>:
 23ff81c:	f7fd bc1f 	b.w	23fd05e <_Znwj>

023ff820 <_ZnajRKSt9nothrow_t>:
 23ff820:	f7fd bc1f 	b.w	23fd062 <_Znaj>

023ff824 <atexit>:
 23ff824:	2300      	movs	r3, #0
 23ff826:	4601      	mov	r1, r0
 23ff828:	461a      	mov	r2, r3
 23ff82a:	4618      	mov	r0, r3
 23ff82c:	f000 b93a 	b.w	23ffaa4 <__register_exitproc>

023ff830 <isprint>:
 23ff830:	4b02      	ldr	r3, [pc, #8]	; (23ff83c <isprint+0xc>)
 23ff832:	4418      	add	r0, r3
 23ff834:	7840      	ldrb	r0, [r0, #1]
 23ff836:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff83a:	4770      	bx	lr
 23ff83c:	023ffecd 	.word	0x023ffecd

023ff840 <memcpy>:
 23ff840:	440a      	add	r2, r1
 23ff842:	1e43      	subs	r3, r0, #1
 23ff844:	4291      	cmp	r1, r2
 23ff846:	d100      	bne.n	23ff84a <memcpy+0xa>
 23ff848:	4770      	bx	lr
 23ff84a:	b510      	push	{r4, lr}
 23ff84c:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff850:	4291      	cmp	r1, r2
 23ff852:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff856:	d1f9      	bne.n	23ff84c <memcpy+0xc>
 23ff858:	bd10      	pop	{r4, pc}

023ff85a <memmove>:
 23ff85a:	4288      	cmp	r0, r1
 23ff85c:	b510      	push	{r4, lr}
 23ff85e:	eb01 0402 	add.w	r4, r1, r2
 23ff862:	d902      	bls.n	23ff86a <memmove+0x10>
 23ff864:	4284      	cmp	r4, r0
 23ff866:	4623      	mov	r3, r4
 23ff868:	d807      	bhi.n	23ff87a <memmove+0x20>
 23ff86a:	1e43      	subs	r3, r0, #1
 23ff86c:	42a1      	cmp	r1, r4
 23ff86e:	d008      	beq.n	23ff882 <memmove+0x28>
 23ff870:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff874:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff878:	e7f8      	b.n	23ff86c <memmove+0x12>
 23ff87a:	4402      	add	r2, r0
 23ff87c:	4601      	mov	r1, r0
 23ff87e:	428a      	cmp	r2, r1
 23ff880:	d100      	bne.n	23ff884 <memmove+0x2a>
 23ff882:	bd10      	pop	{r4, pc}
 23ff884:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff888:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff88c:	e7f7      	b.n	23ff87e <memmove+0x24>

023ff88e <memset>:
 23ff88e:	4402      	add	r2, r0
 23ff890:	4603      	mov	r3, r0
 23ff892:	4293      	cmp	r3, r2
 23ff894:	d100      	bne.n	23ff898 <memset+0xa>
 23ff896:	4770      	bx	lr
 23ff898:	f803 1b01 	strb.w	r1, [r3], #1
 23ff89c:	e7f9      	b.n	23ff892 <memset+0x4>
	...

023ff8a0 <srand>:
 23ff8a0:	b538      	push	{r3, r4, r5, lr}
 23ff8a2:	4b10      	ldr	r3, [pc, #64]	; (23ff8e4 <srand+0x44>)
 23ff8a4:	4604      	mov	r4, r0
 23ff8a6:	681d      	ldr	r5, [r3, #0]
 23ff8a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff8aa:	b9b3      	cbnz	r3, 23ff8da <srand+0x3a>
 23ff8ac:	2018      	movs	r0, #24
 23ff8ae:	f7fe f821 	bl	23fd8f4 <malloc>
 23ff8b2:	4602      	mov	r2, r0
 23ff8b4:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff8b6:	b920      	cbnz	r0, 23ff8c2 <srand+0x22>
 23ff8b8:	4b0b      	ldr	r3, [pc, #44]	; (23ff8e8 <srand+0x48>)
 23ff8ba:	2142      	movs	r1, #66	; 0x42
 23ff8bc:	480b      	ldr	r0, [pc, #44]	; (23ff8ec <srand+0x4c>)
 23ff8be:	f7fe f85f 	bl	23fd980 <__assert_func>
 23ff8c2:	490b      	ldr	r1, [pc, #44]	; (23ff8f0 <srand+0x50>)
 23ff8c4:	4b0b      	ldr	r3, [pc, #44]	; (23ff8f4 <srand+0x54>)
 23ff8c6:	e9c0 1300 	strd	r1, r3, [r0]
 23ff8ca:	4b0b      	ldr	r3, [pc, #44]	; (23ff8f8 <srand+0x58>)
 23ff8cc:	2100      	movs	r1, #0
 23ff8ce:	6083      	str	r3, [r0, #8]
 23ff8d0:	230b      	movs	r3, #11
 23ff8d2:	8183      	strh	r3, [r0, #12]
 23ff8d4:	2001      	movs	r0, #1
 23ff8d6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff8da:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff8dc:	2200      	movs	r2, #0
 23ff8de:	611c      	str	r4, [r3, #16]
 23ff8e0:	615a      	str	r2, [r3, #20]
 23ff8e2:	bd38      	pop	{r3, r4, r5, pc}
 23ff8e4:	1007add0 	.word	0x1007add0
 23ff8e8:	023ffe39 	.word	0x023ffe39
 23ff8ec:	023ffe50 	.word	0x023ffe50
 23ff8f0:	abcd330e 	.word	0xabcd330e
 23ff8f4:	e66d1234 	.word	0xe66d1234
 23ff8f8:	0005deec 	.word	0x0005deec

023ff8fc <strchr>:
 23ff8fc:	b2c9      	uxtb	r1, r1
 23ff8fe:	4603      	mov	r3, r0
 23ff900:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff904:	b11a      	cbz	r2, 23ff90e <strchr+0x12>
 23ff906:	428a      	cmp	r2, r1
 23ff908:	d1f9      	bne.n	23ff8fe <strchr+0x2>
 23ff90a:	4618      	mov	r0, r3
 23ff90c:	4770      	bx	lr
 23ff90e:	2900      	cmp	r1, #0
 23ff910:	bf18      	it	ne
 23ff912:	2300      	movne	r3, #0
 23ff914:	e7f9      	b.n	23ff90a <strchr+0xe>

023ff916 <strchrnul>:
 23ff916:	b510      	push	{r4, lr}
 23ff918:	4604      	mov	r4, r0
 23ff91a:	f7ff ffef 	bl	23ff8fc <strchr>
 23ff91e:	b918      	cbnz	r0, 23ff928 <strchrnul+0x12>
 23ff920:	4620      	mov	r0, r4
 23ff922:	f7fd fb77 	bl	23fd014 <strlen>
 23ff926:	4420      	add	r0, r4
 23ff928:	bd10      	pop	{r4, pc}

023ff92a <strcpy>:
 23ff92a:	4603      	mov	r3, r0
 23ff92c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff930:	f803 2b01 	strb.w	r2, [r3], #1
 23ff934:	2a00      	cmp	r2, #0
 23ff936:	d1f9      	bne.n	23ff92c <strcpy+0x2>
 23ff938:	4770      	bx	lr

023ff93a <strncmp>:
 23ff93a:	b510      	push	{r4, lr}
 23ff93c:	b17a      	cbz	r2, 23ff95e <strncmp+0x24>
 23ff93e:	4603      	mov	r3, r0
 23ff940:	3901      	subs	r1, #1
 23ff942:	1884      	adds	r4, r0, r2
 23ff944:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff948:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff94c:	4290      	cmp	r0, r2
 23ff94e:	d101      	bne.n	23ff954 <strncmp+0x1a>
 23ff950:	42a3      	cmp	r3, r4
 23ff952:	d101      	bne.n	23ff958 <strncmp+0x1e>
 23ff954:	1a80      	subs	r0, r0, r2
 23ff956:	bd10      	pop	{r4, pc}
 23ff958:	2800      	cmp	r0, #0
 23ff95a:	d1f3      	bne.n	23ff944 <strncmp+0xa>
 23ff95c:	e7fa      	b.n	23ff954 <strncmp+0x1a>
 23ff95e:	4610      	mov	r0, r2
 23ff960:	e7f9      	b.n	23ff956 <strncmp+0x1c>

023ff962 <strrchr>:
 23ff962:	b538      	push	{r3, r4, r5, lr}
 23ff964:	4603      	mov	r3, r0
 23ff966:	460c      	mov	r4, r1
 23ff968:	b969      	cbnz	r1, 23ff986 <strrchr+0x24>
 23ff96a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff96e:	f7ff bfc5 	b.w	23ff8fc <strchr>
 23ff972:	1c43      	adds	r3, r0, #1
 23ff974:	4605      	mov	r5, r0
 23ff976:	4621      	mov	r1, r4
 23ff978:	4618      	mov	r0, r3
 23ff97a:	f7ff ffbf 	bl	23ff8fc <strchr>
 23ff97e:	2800      	cmp	r0, #0
 23ff980:	d1f7      	bne.n	23ff972 <strrchr+0x10>
 23ff982:	4628      	mov	r0, r5
 23ff984:	bd38      	pop	{r3, r4, r5, pc}
 23ff986:	2500      	movs	r5, #0
 23ff988:	e7f5      	b.n	23ff976 <strrchr+0x14>
	...

023ff98c <_strtol_l.constprop.0>:
 23ff98c:	2b01      	cmp	r3, #1
 23ff98e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff992:	d001      	beq.n	23ff998 <_strtol_l.constprop.0+0xc>
 23ff994:	2b24      	cmp	r3, #36	; 0x24
 23ff996:	d906      	bls.n	23ff9a6 <_strtol_l.constprop.0+0x1a>
 23ff998:	f7fd ffe4 	bl	23fd964 <__errno>
 23ff99c:	2316      	movs	r3, #22
 23ff99e:	6003      	str	r3, [r0, #0]
 23ff9a0:	2000      	movs	r0, #0
 23ff9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff9a6:	460d      	mov	r5, r1
 23ff9a8:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ffa8c <_strtol_l.constprop.0+0x100>
 23ff9ac:	462e      	mov	r6, r5
 23ff9ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff9b2:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff9b6:	f017 0708 	ands.w	r7, r7, #8
 23ff9ba:	d1f7      	bne.n	23ff9ac <_strtol_l.constprop.0+0x20>
 23ff9bc:	2c2d      	cmp	r4, #45	; 0x2d
 23ff9be:	d132      	bne.n	23ffa26 <_strtol_l.constprop.0+0x9a>
 23ff9c0:	782c      	ldrb	r4, [r5, #0]
 23ff9c2:	2701      	movs	r7, #1
 23ff9c4:	1cb5      	adds	r5, r6, #2
 23ff9c6:	2b00      	cmp	r3, #0
 23ff9c8:	d05b      	beq.n	23ffa82 <_strtol_l.constprop.0+0xf6>
 23ff9ca:	2b10      	cmp	r3, #16
 23ff9cc:	d109      	bne.n	23ff9e2 <_strtol_l.constprop.0+0x56>
 23ff9ce:	2c30      	cmp	r4, #48	; 0x30
 23ff9d0:	d107      	bne.n	23ff9e2 <_strtol_l.constprop.0+0x56>
 23ff9d2:	782c      	ldrb	r4, [r5, #0]
 23ff9d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff9d8:	2c58      	cmp	r4, #88	; 0x58
 23ff9da:	d14d      	bne.n	23ffa78 <_strtol_l.constprop.0+0xec>
 23ff9dc:	786c      	ldrb	r4, [r5, #1]
 23ff9de:	2310      	movs	r3, #16
 23ff9e0:	3502      	adds	r5, #2
 23ff9e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff9e6:	f04f 0c00 	mov.w	ip, #0
 23ff9ea:	f108 38ff 	add.w	r8, r8, #4294967295
 23ff9ee:	4666      	mov	r6, ip
 23ff9f0:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff9f4:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff9f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff9fc:	f1be 0f09 	cmp.w	lr, #9
 23ffa00:	d816      	bhi.n	23ffa30 <_strtol_l.constprop.0+0xa4>
 23ffa02:	4674      	mov	r4, lr
 23ffa04:	42a3      	cmp	r3, r4
 23ffa06:	dd24      	ble.n	23ffa52 <_strtol_l.constprop.0+0xc6>
 23ffa08:	f1bc 0f00 	cmp.w	ip, #0
 23ffa0c:	db1e      	blt.n	23ffa4c <_strtol_l.constprop.0+0xc0>
 23ffa0e:	45b1      	cmp	r9, r6
 23ffa10:	d31c      	bcc.n	23ffa4c <_strtol_l.constprop.0+0xc0>
 23ffa12:	d101      	bne.n	23ffa18 <_strtol_l.constprop.0+0x8c>
 23ffa14:	45a2      	cmp	sl, r4
 23ffa16:	db19      	blt.n	23ffa4c <_strtol_l.constprop.0+0xc0>
 23ffa18:	fb06 4603 	mla	r6, r6, r3, r4
 23ffa1c:	f04f 0c01 	mov.w	ip, #1
 23ffa20:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ffa24:	e7e8      	b.n	23ff9f8 <_strtol_l.constprop.0+0x6c>
 23ffa26:	2c2b      	cmp	r4, #43	; 0x2b
 23ffa28:	bf04      	itt	eq
 23ffa2a:	782c      	ldrbeq	r4, [r5, #0]
 23ffa2c:	1cb5      	addeq	r5, r6, #2
 23ffa2e:	e7ca      	b.n	23ff9c6 <_strtol_l.constprop.0+0x3a>
 23ffa30:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ffa34:	f1be 0f19 	cmp.w	lr, #25
 23ffa38:	d801      	bhi.n	23ffa3e <_strtol_l.constprop.0+0xb2>
 23ffa3a:	3c37      	subs	r4, #55	; 0x37
 23ffa3c:	e7e2      	b.n	23ffa04 <_strtol_l.constprop.0+0x78>
 23ffa3e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ffa42:	f1be 0f19 	cmp.w	lr, #25
 23ffa46:	d804      	bhi.n	23ffa52 <_strtol_l.constprop.0+0xc6>
 23ffa48:	3c57      	subs	r4, #87	; 0x57
 23ffa4a:	e7db      	b.n	23ffa04 <_strtol_l.constprop.0+0x78>
 23ffa4c:	f04f 3cff 	mov.w	ip, #4294967295
 23ffa50:	e7e6      	b.n	23ffa20 <_strtol_l.constprop.0+0x94>
 23ffa52:	f1bc 0f00 	cmp.w	ip, #0
 23ffa56:	da05      	bge.n	23ffa64 <_strtol_l.constprop.0+0xd8>
 23ffa58:	2322      	movs	r3, #34	; 0x22
 23ffa5a:	4646      	mov	r6, r8
 23ffa5c:	6003      	str	r3, [r0, #0]
 23ffa5e:	b942      	cbnz	r2, 23ffa72 <_strtol_l.constprop.0+0xe6>
 23ffa60:	4630      	mov	r0, r6
 23ffa62:	e79e      	b.n	23ff9a2 <_strtol_l.constprop.0+0x16>
 23ffa64:	b107      	cbz	r7, 23ffa68 <_strtol_l.constprop.0+0xdc>
 23ffa66:	4276      	negs	r6, r6
 23ffa68:	2a00      	cmp	r2, #0
 23ffa6a:	d0f9      	beq.n	23ffa60 <_strtol_l.constprop.0+0xd4>
 23ffa6c:	f1bc 0f00 	cmp.w	ip, #0
 23ffa70:	d000      	beq.n	23ffa74 <_strtol_l.constprop.0+0xe8>
 23ffa72:	1e69      	subs	r1, r5, #1
 23ffa74:	6011      	str	r1, [r2, #0]
 23ffa76:	e7f3      	b.n	23ffa60 <_strtol_l.constprop.0+0xd4>
 23ffa78:	2430      	movs	r4, #48	; 0x30
 23ffa7a:	2b00      	cmp	r3, #0
 23ffa7c:	d1b1      	bne.n	23ff9e2 <_strtol_l.constprop.0+0x56>
 23ffa7e:	2308      	movs	r3, #8
 23ffa80:	e7af      	b.n	23ff9e2 <_strtol_l.constprop.0+0x56>
 23ffa82:	2c30      	cmp	r4, #48	; 0x30
 23ffa84:	d0a5      	beq.n	23ff9d2 <_strtol_l.constprop.0+0x46>
 23ffa86:	230a      	movs	r3, #10
 23ffa88:	e7ab      	b.n	23ff9e2 <_strtol_l.constprop.0+0x56>
 23ffa8a:	bf00      	nop
 23ffa8c:	023ffece 	.word	0x023ffece

023ffa90 <strtol>:
 23ffa90:	4613      	mov	r3, r2
 23ffa92:	460a      	mov	r2, r1
 23ffa94:	4601      	mov	r1, r0
 23ffa96:	4802      	ldr	r0, [pc, #8]	; (23ffaa0 <strtol+0x10>)
 23ffa98:	6800      	ldr	r0, [r0, #0]
 23ffa9a:	f7ff bf77 	b.w	23ff98c <_strtol_l.constprop.0>
 23ffa9e:	bf00      	nop
 23ffaa0:	1007add0 	.word	0x1007add0

023ffaa4 <__register_exitproc>:
 23ffaa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffaa8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffb68 <__register_exitproc+0xc4>
 23ffaac:	4606      	mov	r6, r0
 23ffaae:	461f      	mov	r7, r3
 23ffab0:	460d      	mov	r5, r1
 23ffab2:	f8d8 0000 	ldr.w	r0, [r8]
 23ffab6:	4691      	mov	r9, r2
 23ffab8:	f000 f858 	bl	23ffb6c <__retarget_lock_acquire_recursive>
 23ffabc:	4b26      	ldr	r3, [pc, #152]	; (23ffb58 <__register_exitproc+0xb4>)
 23ffabe:	681c      	ldr	r4, [r3, #0]
 23ffac0:	b934      	cbnz	r4, 23ffad0 <__register_exitproc+0x2c>
 23ffac2:	4c26      	ldr	r4, [pc, #152]	; (23ffb5c <__register_exitproc+0xb8>)
 23ffac4:	601c      	str	r4, [r3, #0]
 23ffac6:	4b26      	ldr	r3, [pc, #152]	; (23ffb60 <__register_exitproc+0xbc>)
 23ffac8:	b113      	cbz	r3, 23ffad0 <__register_exitproc+0x2c>
 23ffaca:	681b      	ldr	r3, [r3, #0]
 23ffacc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffad0:	6863      	ldr	r3, [r4, #4]
 23ffad2:	2b1f      	cmp	r3, #31
 23ffad4:	dd07      	ble.n	23ffae6 <__register_exitproc+0x42>
 23ffad6:	f8d8 0000 	ldr.w	r0, [r8]
 23ffada:	f000 f849 	bl	23ffb70 <__retarget_lock_release_recursive>
 23ffade:	f04f 30ff 	mov.w	r0, #4294967295
 23ffae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffae6:	b35e      	cbz	r6, 23ffb40 <__register_exitproc+0x9c>
 23ffae8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffaec:	b988      	cbnz	r0, 23ffb12 <__register_exitproc+0x6e>
 23ffaee:	4b1d      	ldr	r3, [pc, #116]	; (23ffb64 <__register_exitproc+0xc0>)
 23ffaf0:	b923      	cbnz	r3, 23ffafc <__register_exitproc+0x58>
 23ffaf2:	f8d8 0000 	ldr.w	r0, [r8]
 23ffaf6:	f000 f83a 	bl	23ffb6e <__retarget_lock_release>
 23ffafa:	e7f0      	b.n	23ffade <__register_exitproc+0x3a>
 23ffafc:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffb00:	f7fd fef8 	bl	23fd8f4 <malloc>
 23ffb04:	2800      	cmp	r0, #0
 23ffb06:	d0f4      	beq.n	23ffaf2 <__register_exitproc+0x4e>
 23ffb08:	2300      	movs	r3, #0
 23ffb0a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffb0e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffb12:	6863      	ldr	r3, [r4, #4]
 23ffb14:	2201      	movs	r2, #1
 23ffb16:	2e02      	cmp	r6, #2
 23ffb18:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffb1c:	fa02 f203 	lsl.w	r2, r2, r3
 23ffb20:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffb24:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffb28:	ea43 0302 	orr.w	r3, r3, r2
 23ffb2c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffb30:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffb34:	bf02      	ittt	eq
 23ffb36:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffb3a:	4313      	orreq	r3, r2
 23ffb3c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffb40:	6863      	ldr	r3, [r4, #4]
 23ffb42:	f8d8 0000 	ldr.w	r0, [r8]
 23ffb46:	1c5a      	adds	r2, r3, #1
 23ffb48:	3302      	adds	r3, #2
 23ffb4a:	6062      	str	r2, [r4, #4]
 23ffb4c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffb50:	f000 f80e 	bl	23ffb70 <__retarget_lock_release_recursive>
 23ffb54:	2000      	movs	r0, #0
 23ffb56:	e7c4      	b.n	23ffae2 <__register_exitproc+0x3e>
 23ffb58:	1007aff4 	.word	0x1007aff4
 23ffb5c:	1007af68 	.word	0x1007af68
 23ffb60:	00000000 	.word	0x00000000
 23ffb64:	023fd8f5 	.word	0x023fd8f5
 23ffb68:	1007ae34 	.word	0x1007ae34

023ffb6c <__retarget_lock_acquire_recursive>:
 23ffb6c:	4770      	bx	lr

023ffb6e <__retarget_lock_release>:
 23ffb6e:	4770      	bx	lr

023ffb70 <__retarget_lock_release_recursive>:
 23ffb70:	4770      	bx	lr
	...

023ffb74 <dynalib_user>:
 23ffb74:	d025 023f d04d 023f d051 023f 0000 0000     %.?.M.?.Q.?.....
 23ffb84:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ffb94:	7574 6c61 0000 0000                         tual....

023ffb9c <_ZTVN5spark10LogHandlerE>:
	...
 23ffbac:	d06d 023f d095 023f                         m.?...?.

023ffbb4 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ffbbc:	d099 023f d0cd 023f e911 023f eab9 023f     ..?...?...?...?.

023ffbcc <_ZTVN5spark13EthernetClassE>:
	...
 23ffbd4:	da17 023f da0d 023f da03 023f d9f9 023f     ..?...?...?...?.
 23ffbe4:	d9ed 023f d9e1 023f f519 023f f521 023f     ..?...?...?.!.?.
 23ffbf4:	d9d5 023f d9cd 023f d9c3 023f d9b9 023f     ..?...?...?...?.
 23ffc04:	f649 023f f551 023f f559 023f               I.?.Q.?.Y.?.

023ffc10 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffc18:	dc51 023f dc53 023f dc11 023f efff 023f     Q.?.S.?...?...?.
 23ffc28:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
 23ffc38:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
 23ffc48:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
 23ffc58:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
 23ffc68:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
 23ffc78:	6564 6174 6c69 2073 203d 0d00 000a 006d     details = ....m.
 23ffc88:	0066 6e6c 6600 006e 0074 6f63 6564 6400     f.ln.fn.t.code.d
 23ffc98:	7465 6961 006c 0000                         etail...

023ffca0 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffca8:	e199 023f e1b1 023f e911 023f eab9 023f     ..?...?...?...?.

023ffcb8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffcc0:	e1c5 023f e1d9 023f eaf1 023f dd1b 023f     ..?...?...?...?.

023ffcd0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffcd8:	dd2d 023f dd53 023f e875 023f dd1d 023f     -.?.S.?.u.?...?.

023ffce8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffcf0:	dd2b 023f dd61 023f e101 023f dd83 023f     +.?.a.?...?...?.
 23ffd00:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 23ffd10:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

023ffd1c <_ZTV9IPAddress>:
	...
 23ffd24:	ede5 023f edd5 023f edd7 023f               ..?...?...?.

023ffd30 <_ZTV9USBSerial>:
	...
 23ffd38:	eecb 023f ef33 023f ef09 023f dc25 023f     ..?.3.?...?.%.?.
 23ffd48:	eefb 023f eecd 023f eedd 023f ef2d 023f     ..?...?...?.-.?.
 23ffd58:	dcf1 023f eeed 023f eec5 023f 7525 7500     ..?...?...?.%u.u
 23ffd68:	3025 7834 0000 0000                         %04x....

023ffd70 <_ZTV11USARTSerial>:
	...
 23ffd78:	f381 023f f3ed 023f f3c5 023f dc25 023f     ..?...?...?.%.?.
 23ffd88:	f395 023f f3b1 023f f3a3 023f f3bf 023f     ..?...?...?...?.
 23ffd98:	dcf1 023f f383 023f f387 023f               ..?...?...?.

023ffda4 <_ZTVN5spark9WiFiClassE>:
	...
 23ffdac:	f4bb 023f f4b1 023f f4a7 023f f45d 023f     ..?...?...?.].?.
 23ffdbc:	f49b 023f f48f 023f f519 023f f521 023f     ..?...?...?.!.?.
 23ffdcc:	f483 023f f47b 023f f471 023f f467 023f     ..?.{.?.q.?.g.?.
 23ffddc:	f649 023f f551 023f f559 023f               I.?.Q.?.Y.?.

023ffde8 <CSWTCH.109>:
 23ffde8:	ae68 1007 af04 1007 af0c 1007               h...........

023ffdf4 <_ZTVN5spark12NetworkClassE>:
	...
 23ffdfc:	f4d9 023f f4e3 023f f4ed 023f f4f7 023f     ..?...?...?...?.
 23ffe0c:	f501 023f f50d 023f f519 023f f521 023f     ..?...?...?.!.?.
 23ffe1c:	f529 023f f535 023f f53d 023f f547 023f     ).?.5.?.=.?.G.?.
 23ffe2c:	f649 023f f551 023f f559 023f               I.?.Q.?.Y.?.

023ffe38 <_ZSt7nothrow>:
 23ffe38:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23ffe48:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
 23ffe58:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
 23ffe68:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
 23ffe78:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 23ffe88:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 23ffe98:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
 23ffea8:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 23ffeb8:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 23ffec8:	646e 632e                                    nd.c.

023ffecd <_ctype_>:
 23ffecd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffedd:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffeed:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23ffefd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23fff0d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23fff1d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23fff2d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23fff3d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23fff4d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

023fffce <link_const_data_end>:
	...

023fffd0 <link_constructors_location>:
 23fffd0:	023fd299 	.word	0x023fd299
 23fffd4:	023fda21 	.word	0x023fda21
 23fffd8:	023fda75 	.word	0x023fda75
 23fffdc:	023fdc01 	.word	0x023fdc01
 23fffe0:	023fe901 	.word	0x023fe901
 23fffe4:	023fec65 	.word	0x023fec65
 23fffe8:	023fec79 	.word	0x023fec79
 23fffec:	023ff441 	.word	0x023ff441
 23ffff0:	023ff4c5 	.word	0x023ff4c5
 23ffff4:	023ff65d 	.word	0x023ff65d
